'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("AK_ShallowLakesDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class AK_ShallowLakesDataSet
    Inherits Global.System.Data.DataSet
    
    Private tabletbl_ContinuousTLL As tbl_ContinuousTLLDataTable
    
    Private tabletbl_ContinuousWL As tbl_ContinuousWLDataTable
    
    Private tabletbl_ContinuousYSI As tbl_ContinuousYSIDataTable
    
    Private tabletblChlorophyll As tblChlorophyllDataTable
    
    Private tabletblContinuousDataDeployments As tblContinuousDataDeploymentsDataTable
    
    Private tabletblContinuousDataLoggers As tblContinuousDataLoggersDataTable
    
    Private tabletblContinuousDataSites As tblContinuousDataSitesDataTable
    
    Private tabletblDBEdits As tblDBEditsDataTable
    
    Private tabletblDBIssues As tblDBIssuesDataTable
    
    Private tabletblEvents As tblEventsDataTable
    
    Private tabletblFrogMonitors As tblFrogMonitorsDataTable
    
    Private tabletblInvertebrates As tblInvertebratesDataTable
    
    Private tabletblInvertebrateSamples As tblInvertebrateSamplesDataTable
    
    Private tabletblLoons As tblLoonsDataTable
    
    Private tabletblMonuments As tblMonumentsDataTable
    
    Private tabletblPhotos As tblPhotosDataTable
    
    Private tabletblPondDepths As tblPondDepthsDataTable
    
    Private tabletblPonds As tblPondsDataTable
    
    Private tabletblTransQuadrats As tblTransQuadratsDataTable
    
    Private tabletblTransSpeciesPointIntercepts As tblTransSpeciesPointInterceptsDataTable
    
    Private tabletblUSGSLabData As tblUSGSLabDataDataTable
    
    Private tabletblVegProfiles As tblVegProfilesDataTable
    
    Private tabletblVegTransects As tblVegTransectsDataTable
    
    Private tabletblWaterChemistry As tblWaterChemistryDataTable
    
    Private tabletblWaterProfiles As tblWaterProfilesDataTable
    
    Private tabletblWaterSamples As tblWaterSamplesDataTable
    
    Private relationFK_tbl_ContinuousTLL_tblContinuousDataLoggers As Global.System.Data.DataRelation
    
    Private relationFK_tbl_ContinuousWL_tblContinuousDataLoggers As Global.System.Data.DataRelation
    
    Private relationFK_tbl_ContinuousYSI_tblContinuousDataLoggers As Global.System.Data.DataRelation
    
    Private relationFK_tblChlorophyll_tblWaterSamples As Global.System.Data.DataRelation
    
    Private relationFK_tblContinuousDataLoggers_tblContinuousDataDeployments As Global.System.Data.DataRelation
    
    Private relationFK_tblContinuousDataSites_tblPonds As Global.System.Data.DataRelation
    
    Private relationFK_tblEvents_tblPonds As Global.System.Data.DataRelation
    
    Private relationFK_tblInvertebrates_2009_tblInvertebrateSamples As Global.System.Data.DataRelation
    
    Private relationFK_tblInvertebrateSamples_tblEvents1 As Global.System.Data.DataRelation
    
    Private relationFK_tblLoons_tblEvents As Global.System.Data.DataRelation
    
    Private relationFK_tblMonuments_tblPonds As Global.System.Data.DataRelation
    
    Private relationFK_tblPondDepths_tblEvents As Global.System.Data.DataRelation
    
    Private relationFK_tblTransQuadrats_tblEvents As Global.System.Data.DataRelation
    
    Private relationFK_tblTransSpeciesPointIntercepts_tblEvents As Global.System.Data.DataRelation
    
    Private relationFK_tblUSGSLabData_tblEvents As Global.System.Data.DataRelation
    
    Private relationFK_tblVegProfiles_tblEvents As Global.System.Data.DataRelation
    
    Private relationFK_tblVegTransSpp_tblEvents As Global.System.Data.DataRelation
    
    Private relationFK_tblWaterChemistry_tblWaterSamples As Global.System.Data.DataRelation
    
    Private relationFK_tblWaterProfiles_tblWaterSamples As Global.System.Data.DataRelation
    
    Private relationFK_tblWaterSamples_tblEvents As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tbl_ContinuousTLL")) Is Nothing) Then
                MyBase.Tables.Add(New tbl_ContinuousTLLDataTable(ds.Tables("tbl_ContinuousTLL")))
            End If
            If (Not (ds.Tables("tbl_ContinuousWL")) Is Nothing) Then
                MyBase.Tables.Add(New tbl_ContinuousWLDataTable(ds.Tables("tbl_ContinuousWL")))
            End If
            If (Not (ds.Tables("tbl_ContinuousYSI")) Is Nothing) Then
                MyBase.Tables.Add(New tbl_ContinuousYSIDataTable(ds.Tables("tbl_ContinuousYSI")))
            End If
            If (Not (ds.Tables("tblChlorophyll")) Is Nothing) Then
                MyBase.Tables.Add(New tblChlorophyllDataTable(ds.Tables("tblChlorophyll")))
            End If
            If (Not (ds.Tables("tblContinuousDataDeployments")) Is Nothing) Then
                MyBase.Tables.Add(New tblContinuousDataDeploymentsDataTable(ds.Tables("tblContinuousDataDeployments")))
            End If
            If (Not (ds.Tables("tblContinuousDataLoggers")) Is Nothing) Then
                MyBase.Tables.Add(New tblContinuousDataLoggersDataTable(ds.Tables("tblContinuousDataLoggers")))
            End If
            If (Not (ds.Tables("tblContinuousDataSites")) Is Nothing) Then
                MyBase.Tables.Add(New tblContinuousDataSitesDataTable(ds.Tables("tblContinuousDataSites")))
            End If
            If (Not (ds.Tables("tblDBEdits")) Is Nothing) Then
                MyBase.Tables.Add(New tblDBEditsDataTable(ds.Tables("tblDBEdits")))
            End If
            If (Not (ds.Tables("tblDBIssues")) Is Nothing) Then
                MyBase.Tables.Add(New tblDBIssuesDataTable(ds.Tables("tblDBIssues")))
            End If
            If (Not (ds.Tables("tblEvents")) Is Nothing) Then
                MyBase.Tables.Add(New tblEventsDataTable(ds.Tables("tblEvents")))
            End If
            If (Not (ds.Tables("tblFrogMonitors")) Is Nothing) Then
                MyBase.Tables.Add(New tblFrogMonitorsDataTable(ds.Tables("tblFrogMonitors")))
            End If
            If (Not (ds.Tables("tblInvertebrates")) Is Nothing) Then
                MyBase.Tables.Add(New tblInvertebratesDataTable(ds.Tables("tblInvertebrates")))
            End If
            If (Not (ds.Tables("tblInvertebrateSamples")) Is Nothing) Then
                MyBase.Tables.Add(New tblInvertebrateSamplesDataTable(ds.Tables("tblInvertebrateSamples")))
            End If
            If (Not (ds.Tables("tblLoons")) Is Nothing) Then
                MyBase.Tables.Add(New tblLoonsDataTable(ds.Tables("tblLoons")))
            End If
            If (Not (ds.Tables("tblMonuments")) Is Nothing) Then
                MyBase.Tables.Add(New tblMonumentsDataTable(ds.Tables("tblMonuments")))
            End If
            If (Not (ds.Tables("tblPhotos")) Is Nothing) Then
                MyBase.Tables.Add(New tblPhotosDataTable(ds.Tables("tblPhotos")))
            End If
            If (Not (ds.Tables("tblPondDepths")) Is Nothing) Then
                MyBase.Tables.Add(New tblPondDepthsDataTable(ds.Tables("tblPondDepths")))
            End If
            If (Not (ds.Tables("tblPonds")) Is Nothing) Then
                MyBase.Tables.Add(New tblPondsDataTable(ds.Tables("tblPonds")))
            End If
            If (Not (ds.Tables("tblTransQuadrats")) Is Nothing) Then
                MyBase.Tables.Add(New tblTransQuadratsDataTable(ds.Tables("tblTransQuadrats")))
            End If
            If (Not (ds.Tables("tblTransSpeciesPointIntercepts")) Is Nothing) Then
                MyBase.Tables.Add(New tblTransSpeciesPointInterceptsDataTable(ds.Tables("tblTransSpeciesPointIntercepts")))
            End If
            If (Not (ds.Tables("tblUSGSLabData")) Is Nothing) Then
                MyBase.Tables.Add(New tblUSGSLabDataDataTable(ds.Tables("tblUSGSLabData")))
            End If
            If (Not (ds.Tables("tblVegProfiles")) Is Nothing) Then
                MyBase.Tables.Add(New tblVegProfilesDataTable(ds.Tables("tblVegProfiles")))
            End If
            If (Not (ds.Tables("tblVegTransects")) Is Nothing) Then
                MyBase.Tables.Add(New tblVegTransectsDataTable(ds.Tables("tblVegTransects")))
            End If
            If (Not (ds.Tables("tblWaterChemistry")) Is Nothing) Then
                MyBase.Tables.Add(New tblWaterChemistryDataTable(ds.Tables("tblWaterChemistry")))
            End If
            If (Not (ds.Tables("tblWaterProfiles")) Is Nothing) Then
                MyBase.Tables.Add(New tblWaterProfilesDataTable(ds.Tables("tblWaterProfiles")))
            End If
            If (Not (ds.Tables("tblWaterSamples")) Is Nothing) Then
                MyBase.Tables.Add(New tblWaterSamplesDataTable(ds.Tables("tblWaterSamples")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbl_ContinuousTLL() As tbl_ContinuousTLLDataTable
        Get
            Return Me.tabletbl_ContinuousTLL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbl_ContinuousWL() As tbl_ContinuousWLDataTable
        Get
            Return Me.tabletbl_ContinuousWL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbl_ContinuousYSI() As tbl_ContinuousYSIDataTable
        Get
            Return Me.tabletbl_ContinuousYSI
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblChlorophyll() As tblChlorophyllDataTable
        Get
            Return Me.tabletblChlorophyll
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblContinuousDataDeployments() As tblContinuousDataDeploymentsDataTable
        Get
            Return Me.tabletblContinuousDataDeployments
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblContinuousDataLoggers() As tblContinuousDataLoggersDataTable
        Get
            Return Me.tabletblContinuousDataLoggers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblContinuousDataSites() As tblContinuousDataSitesDataTable
        Get
            Return Me.tabletblContinuousDataSites
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblDBEdits() As tblDBEditsDataTable
        Get
            Return Me.tabletblDBEdits
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblDBIssues() As tblDBIssuesDataTable
        Get
            Return Me.tabletblDBIssues
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblEvents() As tblEventsDataTable
        Get
            Return Me.tabletblEvents
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblFrogMonitors() As tblFrogMonitorsDataTable
        Get
            Return Me.tabletblFrogMonitors
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblInvertebrates() As tblInvertebratesDataTable
        Get
            Return Me.tabletblInvertebrates
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblInvertebrateSamples() As tblInvertebrateSamplesDataTable
        Get
            Return Me.tabletblInvertebrateSamples
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblLoons() As tblLoonsDataTable
        Get
            Return Me.tabletblLoons
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblMonuments() As tblMonumentsDataTable
        Get
            Return Me.tabletblMonuments
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblPhotos() As tblPhotosDataTable
        Get
            Return Me.tabletblPhotos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblPondDepths() As tblPondDepthsDataTable
        Get
            Return Me.tabletblPondDepths
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblPonds() As tblPondsDataTable
        Get
            Return Me.tabletblPonds
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblTransQuadrats() As tblTransQuadratsDataTable
        Get
            Return Me.tabletblTransQuadrats
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblTransSpeciesPointIntercepts() As tblTransSpeciesPointInterceptsDataTable
        Get
            Return Me.tabletblTransSpeciesPointIntercepts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblUSGSLabData() As tblUSGSLabDataDataTable
        Get
            Return Me.tabletblUSGSLabData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblVegProfiles() As tblVegProfilesDataTable
        Get
            Return Me.tabletblVegProfiles
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblVegTransects() As tblVegTransectsDataTable
        Get
            Return Me.tabletblVegTransects
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblWaterChemistry() As tblWaterChemistryDataTable
        Get
            Return Me.tabletblWaterChemistry
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblWaterProfiles() As tblWaterProfilesDataTable
        Get
            Return Me.tabletblWaterProfiles
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblWaterSamples() As tblWaterSamplesDataTable
        Get
            Return Me.tabletblWaterSamples
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As AK_ShallowLakesDataSet = CType(MyBase.Clone,AK_ShallowLakesDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("tbl_ContinuousTLL")) Is Nothing) Then
                MyBase.Tables.Add(New tbl_ContinuousTLLDataTable(ds.Tables("tbl_ContinuousTLL")))
            End If
            If (Not (ds.Tables("tbl_ContinuousWL")) Is Nothing) Then
                MyBase.Tables.Add(New tbl_ContinuousWLDataTable(ds.Tables("tbl_ContinuousWL")))
            End If
            If (Not (ds.Tables("tbl_ContinuousYSI")) Is Nothing) Then
                MyBase.Tables.Add(New tbl_ContinuousYSIDataTable(ds.Tables("tbl_ContinuousYSI")))
            End If
            If (Not (ds.Tables("tblChlorophyll")) Is Nothing) Then
                MyBase.Tables.Add(New tblChlorophyllDataTable(ds.Tables("tblChlorophyll")))
            End If
            If (Not (ds.Tables("tblContinuousDataDeployments")) Is Nothing) Then
                MyBase.Tables.Add(New tblContinuousDataDeploymentsDataTable(ds.Tables("tblContinuousDataDeployments")))
            End If
            If (Not (ds.Tables("tblContinuousDataLoggers")) Is Nothing) Then
                MyBase.Tables.Add(New tblContinuousDataLoggersDataTable(ds.Tables("tblContinuousDataLoggers")))
            End If
            If (Not (ds.Tables("tblContinuousDataSites")) Is Nothing) Then
                MyBase.Tables.Add(New tblContinuousDataSitesDataTable(ds.Tables("tblContinuousDataSites")))
            End If
            If (Not (ds.Tables("tblDBEdits")) Is Nothing) Then
                MyBase.Tables.Add(New tblDBEditsDataTable(ds.Tables("tblDBEdits")))
            End If
            If (Not (ds.Tables("tblDBIssues")) Is Nothing) Then
                MyBase.Tables.Add(New tblDBIssuesDataTable(ds.Tables("tblDBIssues")))
            End If
            If (Not (ds.Tables("tblEvents")) Is Nothing) Then
                MyBase.Tables.Add(New tblEventsDataTable(ds.Tables("tblEvents")))
            End If
            If (Not (ds.Tables("tblFrogMonitors")) Is Nothing) Then
                MyBase.Tables.Add(New tblFrogMonitorsDataTable(ds.Tables("tblFrogMonitors")))
            End If
            If (Not (ds.Tables("tblInvertebrates")) Is Nothing) Then
                MyBase.Tables.Add(New tblInvertebratesDataTable(ds.Tables("tblInvertebrates")))
            End If
            If (Not (ds.Tables("tblInvertebrateSamples")) Is Nothing) Then
                MyBase.Tables.Add(New tblInvertebrateSamplesDataTable(ds.Tables("tblInvertebrateSamples")))
            End If
            If (Not (ds.Tables("tblLoons")) Is Nothing) Then
                MyBase.Tables.Add(New tblLoonsDataTable(ds.Tables("tblLoons")))
            End If
            If (Not (ds.Tables("tblMonuments")) Is Nothing) Then
                MyBase.Tables.Add(New tblMonumentsDataTable(ds.Tables("tblMonuments")))
            End If
            If (Not (ds.Tables("tblPhotos")) Is Nothing) Then
                MyBase.Tables.Add(New tblPhotosDataTable(ds.Tables("tblPhotos")))
            End If
            If (Not (ds.Tables("tblPondDepths")) Is Nothing) Then
                MyBase.Tables.Add(New tblPondDepthsDataTable(ds.Tables("tblPondDepths")))
            End If
            If (Not (ds.Tables("tblPonds")) Is Nothing) Then
                MyBase.Tables.Add(New tblPondsDataTable(ds.Tables("tblPonds")))
            End If
            If (Not (ds.Tables("tblTransQuadrats")) Is Nothing) Then
                MyBase.Tables.Add(New tblTransQuadratsDataTable(ds.Tables("tblTransQuadrats")))
            End If
            If (Not (ds.Tables("tblTransSpeciesPointIntercepts")) Is Nothing) Then
                MyBase.Tables.Add(New tblTransSpeciesPointInterceptsDataTable(ds.Tables("tblTransSpeciesPointIntercepts")))
            End If
            If (Not (ds.Tables("tblUSGSLabData")) Is Nothing) Then
                MyBase.Tables.Add(New tblUSGSLabDataDataTable(ds.Tables("tblUSGSLabData")))
            End If
            If (Not (ds.Tables("tblVegProfiles")) Is Nothing) Then
                MyBase.Tables.Add(New tblVegProfilesDataTable(ds.Tables("tblVegProfiles")))
            End If
            If (Not (ds.Tables("tblVegTransects")) Is Nothing) Then
                MyBase.Tables.Add(New tblVegTransectsDataTable(ds.Tables("tblVegTransects")))
            End If
            If (Not (ds.Tables("tblWaterChemistry")) Is Nothing) Then
                MyBase.Tables.Add(New tblWaterChemistryDataTable(ds.Tables("tblWaterChemistry")))
            End If
            If (Not (ds.Tables("tblWaterProfiles")) Is Nothing) Then
                MyBase.Tables.Add(New tblWaterProfilesDataTable(ds.Tables("tblWaterProfiles")))
            End If
            If (Not (ds.Tables("tblWaterSamples")) Is Nothing) Then
                MyBase.Tables.Add(New tblWaterSamplesDataTable(ds.Tables("tblWaterSamples")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletbl_ContinuousTLL = CType(MyBase.Tables("tbl_ContinuousTLL"),tbl_ContinuousTLLDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbl_ContinuousTLL) Is Nothing) Then
                Me.tabletbl_ContinuousTLL.InitVars
            End If
        End If
        Me.tabletbl_ContinuousWL = CType(MyBase.Tables("tbl_ContinuousWL"),tbl_ContinuousWLDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbl_ContinuousWL) Is Nothing) Then
                Me.tabletbl_ContinuousWL.InitVars
            End If
        End If
        Me.tabletbl_ContinuousYSI = CType(MyBase.Tables("tbl_ContinuousYSI"),tbl_ContinuousYSIDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbl_ContinuousYSI) Is Nothing) Then
                Me.tabletbl_ContinuousYSI.InitVars
            End If
        End If
        Me.tabletblChlorophyll = CType(MyBase.Tables("tblChlorophyll"),tblChlorophyllDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblChlorophyll) Is Nothing) Then
                Me.tabletblChlorophyll.InitVars
            End If
        End If
        Me.tabletblContinuousDataDeployments = CType(MyBase.Tables("tblContinuousDataDeployments"),tblContinuousDataDeploymentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblContinuousDataDeployments) Is Nothing) Then
                Me.tabletblContinuousDataDeployments.InitVars
            End If
        End If
        Me.tabletblContinuousDataLoggers = CType(MyBase.Tables("tblContinuousDataLoggers"),tblContinuousDataLoggersDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblContinuousDataLoggers) Is Nothing) Then
                Me.tabletblContinuousDataLoggers.InitVars
            End If
        End If
        Me.tabletblContinuousDataSites = CType(MyBase.Tables("tblContinuousDataSites"),tblContinuousDataSitesDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblContinuousDataSites) Is Nothing) Then
                Me.tabletblContinuousDataSites.InitVars
            End If
        End If
        Me.tabletblDBEdits = CType(MyBase.Tables("tblDBEdits"),tblDBEditsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblDBEdits) Is Nothing) Then
                Me.tabletblDBEdits.InitVars
            End If
        End If
        Me.tabletblDBIssues = CType(MyBase.Tables("tblDBIssues"),tblDBIssuesDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblDBIssues) Is Nothing) Then
                Me.tabletblDBIssues.InitVars
            End If
        End If
        Me.tabletblEvents = CType(MyBase.Tables("tblEvents"),tblEventsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblEvents) Is Nothing) Then
                Me.tabletblEvents.InitVars
            End If
        End If
        Me.tabletblFrogMonitors = CType(MyBase.Tables("tblFrogMonitors"),tblFrogMonitorsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblFrogMonitors) Is Nothing) Then
                Me.tabletblFrogMonitors.InitVars
            End If
        End If
        Me.tabletblInvertebrates = CType(MyBase.Tables("tblInvertebrates"),tblInvertebratesDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblInvertebrates) Is Nothing) Then
                Me.tabletblInvertebrates.InitVars
            End If
        End If
        Me.tabletblInvertebrateSamples = CType(MyBase.Tables("tblInvertebrateSamples"),tblInvertebrateSamplesDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblInvertebrateSamples) Is Nothing) Then
                Me.tabletblInvertebrateSamples.InitVars
            End If
        End If
        Me.tabletblLoons = CType(MyBase.Tables("tblLoons"),tblLoonsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblLoons) Is Nothing) Then
                Me.tabletblLoons.InitVars
            End If
        End If
        Me.tabletblMonuments = CType(MyBase.Tables("tblMonuments"),tblMonumentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblMonuments) Is Nothing) Then
                Me.tabletblMonuments.InitVars
            End If
        End If
        Me.tabletblPhotos = CType(MyBase.Tables("tblPhotos"),tblPhotosDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblPhotos) Is Nothing) Then
                Me.tabletblPhotos.InitVars
            End If
        End If
        Me.tabletblPondDepths = CType(MyBase.Tables("tblPondDepths"),tblPondDepthsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblPondDepths) Is Nothing) Then
                Me.tabletblPondDepths.InitVars
            End If
        End If
        Me.tabletblPonds = CType(MyBase.Tables("tblPonds"),tblPondsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblPonds) Is Nothing) Then
                Me.tabletblPonds.InitVars
            End If
        End If
        Me.tabletblTransQuadrats = CType(MyBase.Tables("tblTransQuadrats"),tblTransQuadratsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblTransQuadrats) Is Nothing) Then
                Me.tabletblTransQuadrats.InitVars
            End If
        End If
        Me.tabletblTransSpeciesPointIntercepts = CType(MyBase.Tables("tblTransSpeciesPointIntercepts"),tblTransSpeciesPointInterceptsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblTransSpeciesPointIntercepts) Is Nothing) Then
                Me.tabletblTransSpeciesPointIntercepts.InitVars
            End If
        End If
        Me.tabletblUSGSLabData = CType(MyBase.Tables("tblUSGSLabData"),tblUSGSLabDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblUSGSLabData) Is Nothing) Then
                Me.tabletblUSGSLabData.InitVars
            End If
        End If
        Me.tabletblVegProfiles = CType(MyBase.Tables("tblVegProfiles"),tblVegProfilesDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblVegProfiles) Is Nothing) Then
                Me.tabletblVegProfiles.InitVars
            End If
        End If
        Me.tabletblVegTransects = CType(MyBase.Tables("tblVegTransects"),tblVegTransectsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblVegTransects) Is Nothing) Then
                Me.tabletblVegTransects.InitVars
            End If
        End If
        Me.tabletblWaterChemistry = CType(MyBase.Tables("tblWaterChemistry"),tblWaterChemistryDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblWaterChemistry) Is Nothing) Then
                Me.tabletblWaterChemistry.InitVars
            End If
        End If
        Me.tabletblWaterProfiles = CType(MyBase.Tables("tblWaterProfiles"),tblWaterProfilesDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblWaterProfiles) Is Nothing) Then
                Me.tabletblWaterProfiles.InitVars
            End If
        End If
        Me.tabletblWaterSamples = CType(MyBase.Tables("tblWaterSamples"),tblWaterSamplesDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblWaterSamples) Is Nothing) Then
                Me.tabletblWaterSamples.InitVars
            End If
        End If
        Me.relationFK_tbl_ContinuousTLL_tblContinuousDataLoggers = Me.Relations("FK_tbl_ContinuousTLL_tblContinuousDataLoggers")
        Me.relationFK_tbl_ContinuousWL_tblContinuousDataLoggers = Me.Relations("FK_tbl_ContinuousWL_tblContinuousDataLoggers")
        Me.relationFK_tbl_ContinuousYSI_tblContinuousDataLoggers = Me.Relations("FK_tbl_ContinuousYSI_tblContinuousDataLoggers")
        Me.relationFK_tblChlorophyll_tblWaterSamples = Me.Relations("FK_tblChlorophyll_tblWaterSamples")
        Me.relationFK_tblContinuousDataLoggers_tblContinuousDataDeployments = Me.Relations("FK_tblContinuousDataLoggers_tblContinuousDataDeployments")
        Me.relationFK_tblContinuousDataSites_tblPonds = Me.Relations("FK_tblContinuousDataSites_tblPonds")
        Me.relationFK_tblEvents_tblPonds = Me.Relations("FK_tblEvents_tblPonds")
        Me.relationFK_tblInvertebrates_2009_tblInvertebrateSamples = Me.Relations("FK_tblInvertebrates_2009_tblInvertebrateSamples")
        Me.relationFK_tblInvertebrateSamples_tblEvents1 = Me.Relations("FK_tblInvertebrateSamples_tblEvents1")
        Me.relationFK_tblLoons_tblEvents = Me.Relations("FK_tblLoons_tblEvents")
        Me.relationFK_tblMonuments_tblPonds = Me.Relations("FK_tblMonuments_tblPonds")
        Me.relationFK_tblPondDepths_tblEvents = Me.Relations("FK_tblPondDepths_tblEvents")
        Me.relationFK_tblTransQuadrats_tblEvents = Me.Relations("FK_tblTransQuadrats_tblEvents")
        Me.relationFK_tblTransSpeciesPointIntercepts_tblEvents = Me.Relations("FK_tblTransSpeciesPointIntercepts_tblEvents")
        Me.relationFK_tblUSGSLabData_tblEvents = Me.Relations("FK_tblUSGSLabData_tblEvents")
        Me.relationFK_tblVegProfiles_tblEvents = Me.Relations("FK_tblVegProfiles_tblEvents")
        Me.relationFK_tblVegTransSpp_tblEvents = Me.Relations("FK_tblVegTransSpp_tblEvents")
        Me.relationFK_tblWaterChemistry_tblWaterSamples = Me.Relations("FK_tblWaterChemistry_tblWaterSamples")
        Me.relationFK_tblWaterProfiles_tblWaterSamples = Me.Relations("FK_tblWaterProfiles_tblWaterSamples")
        Me.relationFK_tblWaterSamples_tblEvents = Me.Relations("FK_tblWaterSamples_tblEvents")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "AK_ShallowLakesDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/AK_ShallowLakesDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletbl_ContinuousTLL = New tbl_ContinuousTLLDataTable()
        MyBase.Tables.Add(Me.tabletbl_ContinuousTLL)
        Me.tabletbl_ContinuousWL = New tbl_ContinuousWLDataTable()
        MyBase.Tables.Add(Me.tabletbl_ContinuousWL)
        Me.tabletbl_ContinuousYSI = New tbl_ContinuousYSIDataTable()
        MyBase.Tables.Add(Me.tabletbl_ContinuousYSI)
        Me.tabletblChlorophyll = New tblChlorophyllDataTable()
        MyBase.Tables.Add(Me.tabletblChlorophyll)
        Me.tabletblContinuousDataDeployments = New tblContinuousDataDeploymentsDataTable()
        MyBase.Tables.Add(Me.tabletblContinuousDataDeployments)
        Me.tabletblContinuousDataLoggers = New tblContinuousDataLoggersDataTable()
        MyBase.Tables.Add(Me.tabletblContinuousDataLoggers)
        Me.tabletblContinuousDataSites = New tblContinuousDataSitesDataTable()
        MyBase.Tables.Add(Me.tabletblContinuousDataSites)
        Me.tabletblDBEdits = New tblDBEditsDataTable()
        MyBase.Tables.Add(Me.tabletblDBEdits)
        Me.tabletblDBIssues = New tblDBIssuesDataTable()
        MyBase.Tables.Add(Me.tabletblDBIssues)
        Me.tabletblEvents = New tblEventsDataTable()
        MyBase.Tables.Add(Me.tabletblEvents)
        Me.tabletblFrogMonitors = New tblFrogMonitorsDataTable()
        MyBase.Tables.Add(Me.tabletblFrogMonitors)
        Me.tabletblInvertebrates = New tblInvertebratesDataTable()
        MyBase.Tables.Add(Me.tabletblInvertebrates)
        Me.tabletblInvertebrateSamples = New tblInvertebrateSamplesDataTable()
        MyBase.Tables.Add(Me.tabletblInvertebrateSamples)
        Me.tabletblLoons = New tblLoonsDataTable()
        MyBase.Tables.Add(Me.tabletblLoons)
        Me.tabletblMonuments = New tblMonumentsDataTable()
        MyBase.Tables.Add(Me.tabletblMonuments)
        Me.tabletblPhotos = New tblPhotosDataTable()
        MyBase.Tables.Add(Me.tabletblPhotos)
        Me.tabletblPondDepths = New tblPondDepthsDataTable()
        MyBase.Tables.Add(Me.tabletblPondDepths)
        Me.tabletblPonds = New tblPondsDataTable()
        MyBase.Tables.Add(Me.tabletblPonds)
        Me.tabletblTransQuadrats = New tblTransQuadratsDataTable()
        MyBase.Tables.Add(Me.tabletblTransQuadrats)
        Me.tabletblTransSpeciesPointIntercepts = New tblTransSpeciesPointInterceptsDataTable()
        MyBase.Tables.Add(Me.tabletblTransSpeciesPointIntercepts)
        Me.tabletblUSGSLabData = New tblUSGSLabDataDataTable()
        MyBase.Tables.Add(Me.tabletblUSGSLabData)
        Me.tabletblVegProfiles = New tblVegProfilesDataTable()
        MyBase.Tables.Add(Me.tabletblVegProfiles)
        Me.tabletblVegTransects = New tblVegTransectsDataTable()
        MyBase.Tables.Add(Me.tabletblVegTransects)
        Me.tabletblWaterChemistry = New tblWaterChemistryDataTable()
        MyBase.Tables.Add(Me.tabletblWaterChemistry)
        Me.tabletblWaterProfiles = New tblWaterProfilesDataTable()
        MyBase.Tables.Add(Me.tabletblWaterProfiles)
        Me.tabletblWaterSamples = New tblWaterSamplesDataTable()
        MyBase.Tables.Add(Me.tabletblWaterSamples)
        Me.relationFK_tbl_ContinuousTLL_tblContinuousDataLoggers = New Global.System.Data.DataRelation("FK_tbl_ContinuousTLL_tblContinuousDataLoggers", New Global.System.Data.DataColumn() {Me.tabletblContinuousDataLoggers.SiteNameColumn, Me.tabletblContinuousDataLoggers.DateTimeDeployedColumn, Me.tabletblContinuousDataLoggers.FilenameColumn}, New Global.System.Data.DataColumn() {Me.tabletbl_ContinuousTLL.SiteNameColumn, Me.tabletbl_ContinuousTLL.DateTimeDeployedColumn, Me.tabletbl_ContinuousTLL.FilenameColumn}, false)
        Me.Relations.Add(Me.relationFK_tbl_ContinuousTLL_tblContinuousDataLoggers)
        Me.relationFK_tbl_ContinuousWL_tblContinuousDataLoggers = New Global.System.Data.DataRelation("FK_tbl_ContinuousWL_tblContinuousDataLoggers", New Global.System.Data.DataColumn() {Me.tabletblContinuousDataLoggers.SiteNameColumn, Me.tabletblContinuousDataLoggers.DateTimeDeployedColumn, Me.tabletblContinuousDataLoggers.FilenameColumn}, New Global.System.Data.DataColumn() {Me.tabletbl_ContinuousWL.SiteNameColumn, Me.tabletbl_ContinuousWL.DateTimeDeployedColumn, Me.tabletbl_ContinuousWL.FilenameColumn}, false)
        Me.Relations.Add(Me.relationFK_tbl_ContinuousWL_tblContinuousDataLoggers)
        Me.relationFK_tbl_ContinuousYSI_tblContinuousDataLoggers = New Global.System.Data.DataRelation("FK_tbl_ContinuousYSI_tblContinuousDataLoggers", New Global.System.Data.DataColumn() {Me.tabletblContinuousDataLoggers.SiteNameColumn, Me.tabletblContinuousDataLoggers.DateTimeDeployedColumn, Me.tabletblContinuousDataLoggers.FilenameColumn}, New Global.System.Data.DataColumn() {Me.tabletbl_ContinuousYSI.SiteNameColumn, Me.tabletbl_ContinuousYSI.DateTimeDeployedColumn, Me.tabletbl_ContinuousYSI.FilenameColumn}, false)
        Me.Relations.Add(Me.relationFK_tbl_ContinuousYSI_tblContinuousDataLoggers)
        Me.relationFK_tblChlorophyll_tblWaterSamples = New Global.System.Data.DataRelation("FK_tblChlorophyll_tblWaterSamples", New Global.System.Data.DataColumn() {Me.tabletblWaterSamples.PONDNAMEColumn, Me.tabletblWaterSamples.SAMPLEDATEColumn, Me.tabletblWaterSamples.SAMPLENUMBERColumn}, New Global.System.Data.DataColumn() {Me.tabletblChlorophyll.PONDNAMEColumn, Me.tabletblChlorophyll.SAMPLEDATEColumn, Me.tabletblChlorophyll.SAMPLENUMBERColumn}, false)
        Me.Relations.Add(Me.relationFK_tblChlorophyll_tblWaterSamples)
        Me.relationFK_tblContinuousDataLoggers_tblContinuousDataDeployments = New Global.System.Data.DataRelation("FK_tblContinuousDataLoggers_tblContinuousDataDeployments", New Global.System.Data.DataColumn() {Me.tabletblContinuousDataDeployments.SiteNameColumn, Me.tabletblContinuousDataDeployments.DateDeployedColumn}, New Global.System.Data.DataColumn() {Me.tabletblContinuousDataLoggers.SiteNameColumn, Me.tabletblContinuousDataLoggers.DateTimeDeployedColumn}, false)
        Me.Relations.Add(Me.relationFK_tblContinuousDataLoggers_tblContinuousDataDeployments)
        Me.relationFK_tblContinuousDataSites_tblPonds = New Global.System.Data.DataRelation("FK_tblContinuousDataSites_tblPonds", New Global.System.Data.DataColumn() {Me.tabletblPonds.PONDNAMEColumn}, New Global.System.Data.DataColumn() {Me.tabletblContinuousDataSites.SiteNameColumn}, false)
        Me.Relations.Add(Me.relationFK_tblContinuousDataSites_tblPonds)
        Me.relationFK_tblEvents_tblPonds = New Global.System.Data.DataRelation("FK_tblEvents_tblPonds", New Global.System.Data.DataColumn() {Me.tabletblPonds.PONDNAMEColumn}, New Global.System.Data.DataColumn() {Me.tabletblEvents.PONDNAMEColumn}, false)
        Me.Relations.Add(Me.relationFK_tblEvents_tblPonds)
        Me.relationFK_tblInvertebrates_2009_tblInvertebrateSamples = New Global.System.Data.DataRelation("FK_tblInvertebrates_2009_tblInvertebrateSamples", New Global.System.Data.DataColumn() {Me.tabletblInvertebrateSamples.PONDNAMEColumn, Me.tabletblInvertebrateSamples.SAMPLEDATEColumn, Me.tabletblInvertebrateSamples.SAMPLENUMBERColumn}, New Global.System.Data.DataColumn() {Me.tabletblInvertebrates.PONDNAMEColumn, Me.tabletblInvertebrates.SAMPLEDATEColumn, Me.tabletblInvertebrates.SAMPLENUMBERColumn}, false)
        Me.Relations.Add(Me.relationFK_tblInvertebrates_2009_tblInvertebrateSamples)
        Me.relationFK_tblInvertebrateSamples_tblEvents1 = New Global.System.Data.DataRelation("FK_tblInvertebrateSamples_tblEvents1", New Global.System.Data.DataColumn() {Me.tabletblEvents.PONDNAMEColumn, Me.tabletblEvents.SAMPLEDATEColumn}, New Global.System.Data.DataColumn() {Me.tabletblInvertebrateSamples.PONDNAMEColumn, Me.tabletblInvertebrateSamples.SAMPLEDATEColumn}, false)
        Me.Relations.Add(Me.relationFK_tblInvertebrateSamples_tblEvents1)
        Me.relationFK_tblLoons_tblEvents = New Global.System.Data.DataRelation("FK_tblLoons_tblEvents", New Global.System.Data.DataColumn() {Me.tabletblEvents.PONDNAMEColumn, Me.tabletblEvents.SAMPLEDATEColumn}, New Global.System.Data.DataColumn() {Me.tabletblLoons.PONDNAMEColumn, Me.tabletblLoons.SAMPLEDATEColumn}, false)
        Me.Relations.Add(Me.relationFK_tblLoons_tblEvents)
        Me.relationFK_tblMonuments_tblPonds = New Global.System.Data.DataRelation("FK_tblMonuments_tblPonds", New Global.System.Data.DataColumn() {Me.tabletblPonds.PONDNAMEColumn}, New Global.System.Data.DataColumn() {Me.tabletblMonuments.PONDNAMEColumn}, false)
        Me.Relations.Add(Me.relationFK_tblMonuments_tblPonds)
        Me.relationFK_tblPondDepths_tblEvents = New Global.System.Data.DataRelation("FK_tblPondDepths_tblEvents", New Global.System.Data.DataColumn() {Me.tabletblEvents.PONDNAMEColumn, Me.tabletblEvents.SAMPLEDATEColumn}, New Global.System.Data.DataColumn() {Me.tabletblPondDepths.PONDNAMEColumn, Me.tabletblPondDepths.SAMPLEDATEColumn}, false)
        Me.Relations.Add(Me.relationFK_tblPondDepths_tblEvents)
        Me.relationFK_tblTransQuadrats_tblEvents = New Global.System.Data.DataRelation("FK_tblTransQuadrats_tblEvents", New Global.System.Data.DataColumn() {Me.tabletblEvents.PONDNAMEColumn, Me.tabletblEvents.SAMPLEDATEColumn}, New Global.System.Data.DataColumn() {Me.tabletblTransQuadrats.PONDNAMEColumn, Me.tabletblTransQuadrats.SAMPLEDATEColumn}, false)
        Me.Relations.Add(Me.relationFK_tblTransQuadrats_tblEvents)
        Me.relationFK_tblTransSpeciesPointIntercepts_tblEvents = New Global.System.Data.DataRelation("FK_tblTransSpeciesPointIntercepts_tblEvents", New Global.System.Data.DataColumn() {Me.tabletblEvents.PONDNAMEColumn, Me.tabletblEvents.SAMPLEDATEColumn}, New Global.System.Data.DataColumn() {Me.tabletblTransSpeciesPointIntercepts.PONDNAMEColumn, Me.tabletblTransSpeciesPointIntercepts.SAMPLEDATEColumn}, false)
        Me.Relations.Add(Me.relationFK_tblTransSpeciesPointIntercepts_tblEvents)
        Me.relationFK_tblUSGSLabData_tblEvents = New Global.System.Data.DataRelation("FK_tblUSGSLabData_tblEvents", New Global.System.Data.DataColumn() {Me.tabletblEvents.PONDNAMEColumn, Me.tabletblEvents.SAMPLEDATEColumn}, New Global.System.Data.DataColumn() {Me.tabletblUSGSLabData.SiteNameColumn, Me.tabletblUSGSLabData.SiteDateColumn}, false)
        Me.Relations.Add(Me.relationFK_tblUSGSLabData_tblEvents)
        Me.relationFK_tblVegProfiles_tblEvents = New Global.System.Data.DataRelation("FK_tblVegProfiles_tblEvents", New Global.System.Data.DataColumn() {Me.tabletblEvents.PONDNAMEColumn, Me.tabletblEvents.SAMPLEDATEColumn}, New Global.System.Data.DataColumn() {Me.tabletblVegProfiles.PONDNAMEColumn, Me.tabletblVegProfiles.SAMPLEDATEColumn}, false)
        Me.Relations.Add(Me.relationFK_tblVegProfiles_tblEvents)
        Me.relationFK_tblVegTransSpp_tblEvents = New Global.System.Data.DataRelation("FK_tblVegTransSpp_tblEvents", New Global.System.Data.DataColumn() {Me.tabletblEvents.PONDNAMEColumn, Me.tabletblEvents.SAMPLEDATEColumn}, New Global.System.Data.DataColumn() {Me.tabletblVegTransects.PONDNAMEColumn, Me.tabletblVegTransects.SAMPLEDATEColumn}, false)
        Me.Relations.Add(Me.relationFK_tblVegTransSpp_tblEvents)
        Me.relationFK_tblWaterChemistry_tblWaterSamples = New Global.System.Data.DataRelation("FK_tblWaterChemistry_tblWaterSamples", New Global.System.Data.DataColumn() {Me.tabletblWaterSamples.PONDNAMEColumn, Me.tabletblWaterSamples.SAMPLEDATEColumn, Me.tabletblWaterSamples.SAMPLENUMBERColumn}, New Global.System.Data.DataColumn() {Me.tabletblWaterChemistry.PONDNAMEColumn, Me.tabletblWaterChemistry.SAMPLEDATEColumn, Me.tabletblWaterChemistry.SAMPLENUMBERColumn}, false)
        Me.Relations.Add(Me.relationFK_tblWaterChemistry_tblWaterSamples)
        Me.relationFK_tblWaterProfiles_tblWaterSamples = New Global.System.Data.DataRelation("FK_tblWaterProfiles_tblWaterSamples", New Global.System.Data.DataColumn() {Me.tabletblWaterSamples.PONDNAMEColumn, Me.tabletblWaterSamples.SAMPLEDATEColumn, Me.tabletblWaterSamples.SAMPLENUMBERColumn}, New Global.System.Data.DataColumn() {Me.tabletblWaterProfiles.PONDNAMEColumn, Me.tabletblWaterProfiles.SAMPLEDATEColumn, Me.tabletblWaterProfiles.SAMPLENUMBERColumn}, false)
        Me.Relations.Add(Me.relationFK_tblWaterProfiles_tblWaterSamples)
        Me.relationFK_tblWaterSamples_tblEvents = New Global.System.Data.DataRelation("FK_tblWaterSamples_tblEvents", New Global.System.Data.DataColumn() {Me.tabletblEvents.PONDNAMEColumn, Me.tabletblEvents.SAMPLEDATEColumn}, New Global.System.Data.DataColumn() {Me.tabletblWaterSamples.PONDNAMEColumn, Me.tabletblWaterSamples.SAMPLEDATEColumn}, false)
        Me.Relations.Add(Me.relationFK_tblWaterSamples_tblEvents)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetbl_ContinuousTLL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetbl_ContinuousWL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetbl_ContinuousYSI() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblChlorophyll() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblContinuousDataDeployments() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblContinuousDataLoggers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblContinuousDataSites() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblDBEdits() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblDBIssues() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblEvents() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblFrogMonitors() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblInvertebrates() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblInvertebrateSamples() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblLoons() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblMonuments() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblPhotos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblPondDepths() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblPonds() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblTransQuadrats() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblTransSpeciesPointIntercepts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblUSGSLabData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblVegProfiles() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblVegTransects() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblWaterChemistry() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblWaterProfiles() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializetblWaterSamples() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tbl_ContinuousTLLRowChangeEventHandler(ByVal sender As Object, ByVal e As tbl_ContinuousTLLRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tbl_ContinuousWLRowChangeEventHandler(ByVal sender As Object, ByVal e As tbl_ContinuousWLRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tbl_ContinuousYSIRowChangeEventHandler(ByVal sender As Object, ByVal e As tbl_ContinuousYSIRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblChlorophyllRowChangeEventHandler(ByVal sender As Object, ByVal e As tblChlorophyllRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblContinuousDataDeploymentsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblContinuousDataDeploymentsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblContinuousDataLoggersRowChangeEventHandler(ByVal sender As Object, ByVal e As tblContinuousDataLoggersRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblContinuousDataSitesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblContinuousDataSitesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblDBEditsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblDBEditsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblDBIssuesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblDBIssuesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblEventsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblEventsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblFrogMonitorsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblFrogMonitorsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblInvertebratesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblInvertebratesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblInvertebrateSamplesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblInvertebrateSamplesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblLoonsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblLoonsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblMonumentsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblMonumentsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblPhotosRowChangeEventHandler(ByVal sender As Object, ByVal e As tblPhotosRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblPondDepthsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblPondDepthsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblPondsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblPondsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblTransQuadratsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblTransQuadratsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblTransSpeciesPointInterceptsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblTransSpeciesPointInterceptsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblUSGSLabDataRowChangeEventHandler(ByVal sender As Object, ByVal e As tblUSGSLabDataRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblVegProfilesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblVegProfilesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblVegTransectsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblVegTransectsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblWaterChemistryRowChangeEventHandler(ByVal sender As Object, ByVal e As tblWaterChemistryRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblWaterProfilesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblWaterProfilesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub tblWaterSamplesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblWaterSamplesRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbl_ContinuousTLLDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbl_ContinuousTLLRow)
        
        Private columnFilename As Global.System.Data.DataColumn
        
        Private columnLogNum As Global.System.Data.DataColumn
        
        Private columnDateTime As Global.System.Data.DataColumn
        
        Private columnTemp_C As Global.System.Data.DataColumn
        
        Private columnIntensity_Lux As Global.System.Data.DataColumn
        
        Private columnBatt_V As Global.System.Data.DataColumn
        
        Private columnSiteName As Global.System.Data.DataColumn
        
        Private columnDateTimeDeployed As Global.System.Data.DataColumn
        
        Private columnExclude As Global.System.Data.DataColumn
        
        Private columnExclusionReason As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbl_ContinuousTLL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FilenameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFilename
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LogNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Temp_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTemp_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Intensity_LuxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIntensity_Lux
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Batt_VColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBatt_V
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SiteNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DateTimeDeployedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateTimeDeployed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ExcludeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExclude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ExclusionReasonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExclusionReason
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbl_ContinuousTLLRow
            Get
                Return CType(Me.Rows(index),tbl_ContinuousTLLRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tbl_ContinuousTLLRowChanging As tbl_ContinuousTLLRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tbl_ContinuousTLLRowChanged As tbl_ContinuousTLLRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tbl_ContinuousTLLRowDeleting As tbl_ContinuousTLLRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tbl_ContinuousTLLRowDeleted As tbl_ContinuousTLLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addtbl_ContinuousTLLRow(ByVal row As tbl_ContinuousTLLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addtbl_ContinuousTLLRow( _
                    ByVal Filename As String,  _
                    ByVal LogNum As String,  _
                    ByVal DateTime As Date,  _
                    ByVal Temp_C As Decimal,  _
                    ByVal Intensity_Lux As Decimal,  _
                    ByVal Batt_V As Decimal,  _
                    ByVal SiteName As String,  _
                    ByVal DateTimeDeployed As Date,  _
                    ByVal Exclude As Boolean,  _
                    ByVal ExclusionReason As String,  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte) As tbl_ContinuousTLLRow
            Dim rowtbl_ContinuousTLLRow As tbl_ContinuousTLLRow = CType(Me.NewRow,tbl_ContinuousTLLRow)
            Dim columnValuesArray() As Object = New Object() {Filename, LogNum, DateTime, Temp_C, Intensity_Lux, Batt_V, SiteName, DateTimeDeployed, Exclude, ExclusionReason, Comments, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp}
            rowtbl_ContinuousTLLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbl_ContinuousTLLRow)
            Return rowtbl_ContinuousTLLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByFilenameDateTimeSiteNameDateTimeDeployed(ByVal Filename As String, ByVal DateTime As Date, ByVal SiteName As String, ByVal DateTimeDeployed As Date) As tbl_ContinuousTLLRow
            Return CType(Me.Rows.Find(New Object() {Filename, DateTime, SiteName, DateTimeDeployed}),tbl_ContinuousTLLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbl_ContinuousTLLDataTable = CType(MyBase.Clone,tbl_ContinuousTLLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbl_ContinuousTLLDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFilename = MyBase.Columns("Filename")
            Me.columnLogNum = MyBase.Columns("LogNum")
            Me.columnDateTime = MyBase.Columns("DateTime")
            Me.columnTemp_C = MyBase.Columns("Temp_C")
            Me.columnIntensity_Lux = MyBase.Columns("Intensity_Lux")
            Me.columnBatt_V = MyBase.Columns("Batt_V")
            Me.columnSiteName = MyBase.Columns("SiteName")
            Me.columnDateTimeDeployed = MyBase.Columns("DateTimeDeployed")
            Me.columnExclude = MyBase.Columns("Exclude")
            Me.columnExclusionReason = MyBase.Columns("ExclusionReason")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFilename = New Global.System.Data.DataColumn("Filename", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFilename)
            Me.columnLogNum = New Global.System.Data.DataColumn("LogNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogNum)
            Me.columnDateTime = New Global.System.Data.DataColumn("DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateTime)
            Me.columnTemp_C = New Global.System.Data.DataColumn("Temp_C", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemp_C)
            Me.columnIntensity_Lux = New Global.System.Data.DataColumn("Intensity_Lux", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIntensity_Lux)
            Me.columnBatt_V = New Global.System.Data.DataColumn("Batt_V", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBatt_V)
            Me.columnSiteName = New Global.System.Data.DataColumn("SiteName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteName)
            Me.columnDateTimeDeployed = New Global.System.Data.DataColumn("DateTimeDeployed", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateTimeDeployed)
            Me.columnExclude = New Global.System.Data.DataColumn("Exclude", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExclude)
            Me.columnExclusionReason = New Global.System.Data.DataColumn("ExclusionReason", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExclusionReason)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFilename, Me.columnDateTime, Me.columnSiteName, Me.columnDateTimeDeployed}, true))
            Me.columnFilename.AllowDBNull = false
            Me.columnFilename.MaxLength = 50
            Me.columnLogNum.MaxLength = 50
            Me.columnDateTime.AllowDBNull = false
            Me.columnSiteName.AllowDBNull = false
            Me.columnSiteName.MaxLength = 50
            Me.columnDateTimeDeployed.AllowDBNull = false
            Me.columnExclude.AllowDBNull = false
            Me.columnExclusionReason.MaxLength = 50
            Me.columnComments.MaxLength = 2147483647
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newtbl_ContinuousTLLRow() As tbl_ContinuousTLLRow
            Return CType(Me.NewRow,tbl_ContinuousTLLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbl_ContinuousTLLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbl_ContinuousTLLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbl_ContinuousTLLRowChangedEvent) Is Nothing) Then
                RaiseEvent tbl_ContinuousTLLRowChanged(Me, New tbl_ContinuousTLLRowChangeEvent(CType(e.Row,tbl_ContinuousTLLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbl_ContinuousTLLRowChangingEvent) Is Nothing) Then
                RaiseEvent tbl_ContinuousTLLRowChanging(Me, New tbl_ContinuousTLLRowChangeEvent(CType(e.Row,tbl_ContinuousTLLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbl_ContinuousTLLRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbl_ContinuousTLLRowDeleted(Me, New tbl_ContinuousTLLRowChangeEvent(CType(e.Row,tbl_ContinuousTLLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbl_ContinuousTLLRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbl_ContinuousTLLRowDeleting(Me, New tbl_ContinuousTLLRowChangeEvent(CType(e.Row,tbl_ContinuousTLLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removetbl_ContinuousTLLRow(ByVal row As tbl_ContinuousTLLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbl_ContinuousTLLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbl_ContinuousWLDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbl_ContinuousWLRow)
        
        Private columnFilename As Global.System.Data.DataColumn
        
        Private columnLogNum As Global.System.Data.DataColumn
        
        Private columnDateTime As Global.System.Data.DataColumn
        
        Private columnAbsPres_kPa As Global.System.Data.DataColumn
        
        Private columnTemp_C As Global.System.Data.DataColumn
        
        Private columnBatt_V As Global.System.Data.DataColumn
        
        Private columnAbsPresBarom_kPa As Global.System.Data.DataColumn
        
        Private columnSensorDepth As Global.System.Data.DataColumn
        
        Private columnSiteName As Global.System.Data.DataColumn
        
        Private columnDateTimeDeployed As Global.System.Data.DataColumn
        
        Private columnExclude As Global.System.Data.DataColumn
        
        Private columnExclusionReason As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbl_ContinuousWL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FilenameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFilename
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LogNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AbsPres_kPaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbsPres_kPa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Temp_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTemp_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Batt_VColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBatt_V
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AbsPresBarom_kPaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbsPresBarom_kPa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SensorDepthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSensorDepth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SiteNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DateTimeDeployedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateTimeDeployed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ExcludeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExclude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ExclusionReasonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExclusionReason
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbl_ContinuousWLRow
            Get
                Return CType(Me.Rows(index),tbl_ContinuousWLRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tbl_ContinuousWLRowChanging As tbl_ContinuousWLRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tbl_ContinuousWLRowChanged As tbl_ContinuousWLRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tbl_ContinuousWLRowDeleting As tbl_ContinuousWLRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tbl_ContinuousWLRowDeleted As tbl_ContinuousWLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addtbl_ContinuousWLRow(ByVal row As tbl_ContinuousWLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addtbl_ContinuousWLRow( _
                    ByVal Filename As String,  _
                    ByVal LogNum As String,  _
                    ByVal DateTime As Date,  _
                    ByVal AbsPres_kPa As Decimal,  _
                    ByVal Temp_C As Decimal,  _
                    ByVal Batt_V As Decimal,  _
                    ByVal AbsPresBarom_kPa As Decimal,  _
                    ByVal SensorDepth As Decimal,  _
                    ByVal SiteName As String,  _
                    ByVal DateTimeDeployed As Date,  _
                    ByVal Exclude As Boolean,  _
                    ByVal ExclusionReason As String,  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte) As tbl_ContinuousWLRow
            Dim rowtbl_ContinuousWLRow As tbl_ContinuousWLRow = CType(Me.NewRow,tbl_ContinuousWLRow)
            Dim columnValuesArray() As Object = New Object() {Filename, LogNum, DateTime, AbsPres_kPa, Temp_C, Batt_V, AbsPresBarom_kPa, SensorDepth, SiteName, DateTimeDeployed, Exclude, ExclusionReason, Comments, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp}
            rowtbl_ContinuousWLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbl_ContinuousWLRow)
            Return rowtbl_ContinuousWLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByFilenameDateTimeSiteNameDateTimeDeployed(ByVal Filename As String, ByVal DateTime As Date, ByVal SiteName As String, ByVal DateTimeDeployed As Date) As tbl_ContinuousWLRow
            Return CType(Me.Rows.Find(New Object() {Filename, DateTime, SiteName, DateTimeDeployed}),tbl_ContinuousWLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbl_ContinuousWLDataTable = CType(MyBase.Clone,tbl_ContinuousWLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbl_ContinuousWLDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFilename = MyBase.Columns("Filename")
            Me.columnLogNum = MyBase.Columns("LogNum")
            Me.columnDateTime = MyBase.Columns("DateTime")
            Me.columnAbsPres_kPa = MyBase.Columns("AbsPres_kPa")
            Me.columnTemp_C = MyBase.Columns("Temp_C")
            Me.columnBatt_V = MyBase.Columns("Batt_V")
            Me.columnAbsPresBarom_kPa = MyBase.Columns("AbsPresBarom_kPa")
            Me.columnSensorDepth = MyBase.Columns("SensorDepth")
            Me.columnSiteName = MyBase.Columns("SiteName")
            Me.columnDateTimeDeployed = MyBase.Columns("DateTimeDeployed")
            Me.columnExclude = MyBase.Columns("Exclude")
            Me.columnExclusionReason = MyBase.Columns("ExclusionReason")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFilename = New Global.System.Data.DataColumn("Filename", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFilename)
            Me.columnLogNum = New Global.System.Data.DataColumn("LogNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogNum)
            Me.columnDateTime = New Global.System.Data.DataColumn("DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateTime)
            Me.columnAbsPres_kPa = New Global.System.Data.DataColumn("AbsPres_kPa", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbsPres_kPa)
            Me.columnTemp_C = New Global.System.Data.DataColumn("Temp_C", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemp_C)
            Me.columnBatt_V = New Global.System.Data.DataColumn("Batt_V", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBatt_V)
            Me.columnAbsPresBarom_kPa = New Global.System.Data.DataColumn("AbsPresBarom_kPa", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbsPresBarom_kPa)
            Me.columnSensorDepth = New Global.System.Data.DataColumn("SensorDepth", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSensorDepth)
            Me.columnSiteName = New Global.System.Data.DataColumn("SiteName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteName)
            Me.columnDateTimeDeployed = New Global.System.Data.DataColumn("DateTimeDeployed", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateTimeDeployed)
            Me.columnExclude = New Global.System.Data.DataColumn("Exclude", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExclude)
            Me.columnExclusionReason = New Global.System.Data.DataColumn("ExclusionReason", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExclusionReason)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFilename, Me.columnDateTime, Me.columnSiteName, Me.columnDateTimeDeployed}, true))
            Me.columnFilename.AllowDBNull = false
            Me.columnFilename.MaxLength = 50
            Me.columnLogNum.MaxLength = 50
            Me.columnDateTime.AllowDBNull = false
            Me.columnSiteName.AllowDBNull = false
            Me.columnSiteName.MaxLength = 50
            Me.columnDateTimeDeployed.AllowDBNull = false
            Me.columnExclude.AllowDBNull = false
            Me.columnExclusionReason.MaxLength = 50
            Me.columnComments.MaxLength = 2147483647
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newtbl_ContinuousWLRow() As tbl_ContinuousWLRow
            Return CType(Me.NewRow,tbl_ContinuousWLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbl_ContinuousWLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbl_ContinuousWLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbl_ContinuousWLRowChangedEvent) Is Nothing) Then
                RaiseEvent tbl_ContinuousWLRowChanged(Me, New tbl_ContinuousWLRowChangeEvent(CType(e.Row,tbl_ContinuousWLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbl_ContinuousWLRowChangingEvent) Is Nothing) Then
                RaiseEvent tbl_ContinuousWLRowChanging(Me, New tbl_ContinuousWLRowChangeEvent(CType(e.Row,tbl_ContinuousWLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbl_ContinuousWLRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbl_ContinuousWLRowDeleted(Me, New tbl_ContinuousWLRowChangeEvent(CType(e.Row,tbl_ContinuousWLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbl_ContinuousWLRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbl_ContinuousWLRowDeleting(Me, New tbl_ContinuousWLRowChangeEvent(CType(e.Row,tbl_ContinuousWLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removetbl_ContinuousWLRow(ByVal row As tbl_ContinuousWLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbl_ContinuousWLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbl_ContinuousYSIDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbl_ContinuousYSIRow)
        
        Private columnSiteName As Global.System.Data.DataColumn
        
        Private columnDateTimeDeployed As Global.System.Data.DataColumn
        
        Private columnFilename As Global.System.Data.DataColumn
        
        Private columnDateTime As Global.System.Data.DataColumn
        
        Private columnTemp_C As Global.System.Data.DataColumn
        
        Private columnSpCond_uScm As Global.System.Data.DataColumn
        
        Private columnpH As Global.System.Data.DataColumn
        
        Private columnpHmV As Global.System.Data.DataColumn
        
        Private columnDOpct As Global.System.Data.DataColumn
        
        Private columnDO_mgL As Global.System.Data.DataColumn
        
        Private columnDOchrg As Global.System.Data.DataColumn
        
        Private columnODOpct As Global.System.Data.DataColumn
        
        Private columnODO_mgL As Global.System.Data.DataColumn
        
        Private columnTurbidity_NTU As Global.System.Data.DataColumn
        
        Private columnORP_mV As Global.System.Data.DataColumn
        
        Private columnBattery_V As Global.System.Data.DataColumn
        
        Private columnExclude As Global.System.Data.DataColumn
        
        Private columnExclusionReason As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbl_ContinuousYSI"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SiteNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DateTimeDeployedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateTimeDeployed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FilenameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFilename
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Temp_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTemp_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SpCond_uScmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpCond_uScm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property pHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property pHmVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpHmV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DOpctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOpct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DO_mgLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDO_mgL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DOchrgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOchrg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ODOpctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnODOpct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ODO_mgLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnODO_mgL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Turbidity_NTUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTurbidity_NTU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ORP_mVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORP_mV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Battery_VColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBattery_V
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ExcludeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExclude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ExclusionReasonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExclusionReason
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbl_ContinuousYSIRow
            Get
                Return CType(Me.Rows(index),tbl_ContinuousYSIRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tbl_ContinuousYSIRowChanging As tbl_ContinuousYSIRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tbl_ContinuousYSIRowChanged As tbl_ContinuousYSIRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tbl_ContinuousYSIRowDeleting As tbl_ContinuousYSIRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tbl_ContinuousYSIRowDeleted As tbl_ContinuousYSIRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addtbl_ContinuousYSIRow(ByVal row As tbl_ContinuousYSIRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addtbl_ContinuousYSIRow( _
                    ByVal SiteName As String,  _
                    ByVal DateTimeDeployed As Date,  _
                    ByVal Filename As String,  _
                    ByVal DateTime As Date,  _
                    ByVal Temp_C As Decimal,  _
                    ByVal SpCond_uScm As Decimal,  _
                    ByVal pH As Decimal,  _
                    ByVal pHmV As Decimal,  _
                    ByVal DOpct As Decimal,  _
                    ByVal DO_mgL As Decimal,  _
                    ByVal DOchrg As Decimal,  _
                    ByVal ODOpct As Decimal,  _
                    ByVal ODO_mgL As Decimal,  _
                    ByVal Turbidity_NTU As Decimal,  _
                    ByVal ORP_mV As Decimal,  _
                    ByVal Battery_V As Decimal,  _
                    ByVal Exclude As Boolean,  _
                    ByVal ExclusionReason As String,  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte) As tbl_ContinuousYSIRow
            Dim rowtbl_ContinuousYSIRow As tbl_ContinuousYSIRow = CType(Me.NewRow,tbl_ContinuousYSIRow)
            Dim columnValuesArray() As Object = New Object() {SiteName, DateTimeDeployed, Filename, DateTime, Temp_C, SpCond_uScm, pH, pHmV, DOpct, DO_mgL, DOchrg, ODOpct, ODO_mgL, Turbidity_NTU, ORP_mV, Battery_V, Exclude, ExclusionReason, Comments, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp}
            rowtbl_ContinuousYSIRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbl_ContinuousYSIRow)
            Return rowtbl_ContinuousYSIRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindBySiteNameDateTimeDeployedFilenameDateTime(ByVal SiteName As String, ByVal DateTimeDeployed As Date, ByVal Filename As String, ByVal DateTime As Date) As tbl_ContinuousYSIRow
            Return CType(Me.Rows.Find(New Object() {SiteName, DateTimeDeployed, Filename, DateTime}),tbl_ContinuousYSIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbl_ContinuousYSIDataTable = CType(MyBase.Clone,tbl_ContinuousYSIDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbl_ContinuousYSIDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSiteName = MyBase.Columns("SiteName")
            Me.columnDateTimeDeployed = MyBase.Columns("DateTimeDeployed")
            Me.columnFilename = MyBase.Columns("Filename")
            Me.columnDateTime = MyBase.Columns("DateTime")
            Me.columnTemp_C = MyBase.Columns("Temp_C")
            Me.columnSpCond_uScm = MyBase.Columns("SpCond_uScm")
            Me.columnpH = MyBase.Columns("pH")
            Me.columnpHmV = MyBase.Columns("pHmV")
            Me.columnDOpct = MyBase.Columns("DOpct")
            Me.columnDO_mgL = MyBase.Columns("DO_mgL")
            Me.columnDOchrg = MyBase.Columns("DOchrg")
            Me.columnODOpct = MyBase.Columns("ODOpct")
            Me.columnODO_mgL = MyBase.Columns("ODO_mgL")
            Me.columnTurbidity_NTU = MyBase.Columns("Turbidity_NTU")
            Me.columnORP_mV = MyBase.Columns("ORP_mV")
            Me.columnBattery_V = MyBase.Columns("Battery_V")
            Me.columnExclude = MyBase.Columns("Exclude")
            Me.columnExclusionReason = MyBase.Columns("ExclusionReason")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSiteName = New Global.System.Data.DataColumn("SiteName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteName)
            Me.columnDateTimeDeployed = New Global.System.Data.DataColumn("DateTimeDeployed", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateTimeDeployed)
            Me.columnFilename = New Global.System.Data.DataColumn("Filename", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFilename)
            Me.columnDateTime = New Global.System.Data.DataColumn("DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateTime)
            Me.columnTemp_C = New Global.System.Data.DataColumn("Temp_C", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemp_C)
            Me.columnSpCond_uScm = New Global.System.Data.DataColumn("SpCond_uScm", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpCond_uScm)
            Me.columnpH = New Global.System.Data.DataColumn("pH", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpH)
            Me.columnpHmV = New Global.System.Data.DataColumn("pHmV", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpHmV)
            Me.columnDOpct = New Global.System.Data.DataColumn("DOpct", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOpct)
            Me.columnDO_mgL = New Global.System.Data.DataColumn("DO_mgL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDO_mgL)
            Me.columnDOchrg = New Global.System.Data.DataColumn("DOchrg", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOchrg)
            Me.columnODOpct = New Global.System.Data.DataColumn("ODOpct", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnODOpct)
            Me.columnODO_mgL = New Global.System.Data.DataColumn("ODO_mgL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnODO_mgL)
            Me.columnTurbidity_NTU = New Global.System.Data.DataColumn("Turbidity_NTU", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTurbidity_NTU)
            Me.columnORP_mV = New Global.System.Data.DataColumn("ORP_mV", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORP_mV)
            Me.columnBattery_V = New Global.System.Data.DataColumn("Battery_V", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBattery_V)
            Me.columnExclude = New Global.System.Data.DataColumn("Exclude", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExclude)
            Me.columnExclusionReason = New Global.System.Data.DataColumn("ExclusionReason", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExclusionReason)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSiteName, Me.columnDateTimeDeployed, Me.columnFilename, Me.columnDateTime}, true))
            Me.columnSiteName.AllowDBNull = false
            Me.columnSiteName.MaxLength = 50
            Me.columnDateTimeDeployed.AllowDBNull = false
            Me.columnFilename.AllowDBNull = false
            Me.columnFilename.MaxLength = 50
            Me.columnDateTime.AllowDBNull = false
            Me.columnExclude.AllowDBNull = false
            Me.columnExclusionReason.MaxLength = 50
            Me.columnComments.MaxLength = 2147483647
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newtbl_ContinuousYSIRow() As tbl_ContinuousYSIRow
            Return CType(Me.NewRow,tbl_ContinuousYSIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbl_ContinuousYSIRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbl_ContinuousYSIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbl_ContinuousYSIRowChangedEvent) Is Nothing) Then
                RaiseEvent tbl_ContinuousYSIRowChanged(Me, New tbl_ContinuousYSIRowChangeEvent(CType(e.Row,tbl_ContinuousYSIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbl_ContinuousYSIRowChangingEvent) Is Nothing) Then
                RaiseEvent tbl_ContinuousYSIRowChanging(Me, New tbl_ContinuousYSIRowChangeEvent(CType(e.Row,tbl_ContinuousYSIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbl_ContinuousYSIRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbl_ContinuousYSIRowDeleted(Me, New tbl_ContinuousYSIRowChangeEvent(CType(e.Row,tbl_ContinuousYSIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbl_ContinuousYSIRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbl_ContinuousYSIRowDeleting(Me, New tbl_ContinuousYSIRowChangeEvent(CType(e.Row,tbl_ContinuousYSIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removetbl_ContinuousYSIRow(ByVal row As tbl_ContinuousYSIRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbl_ContinuousYSIDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblChlorophyllDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblChlorophyllRow)
        
        Private columnChlorophyllID As Global.System.Data.DataColumn
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnSAMPLEDATE As Global.System.Data.DataColumn
        
        Private columnSAMPLENUMBER As Global.System.Data.DataColumn
        
        Private columnCHLA_LAB As Global.System.Data.DataColumn
        
        Private columnCHLA_METHOD As Global.System.Data.DataColumn
        
        Private columnCHLA_LABSAMPLENUM As Global.System.Data.DataColumn
        
        Private columnCHLA_CORRECTED_UG_L As Global.System.Data.DataColumn
        
        Private columnCHLA_Corrected_Notes As Global.System.Data.DataColumn
        
        Private columnCHLA_MDL_YN As Global.System.Data.DataColumn
        
        Private columnCHLA_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnCHLA_UNCORRECTED_UG_L As Global.System.Data.DataColumn
        
        Private columnCHLA_Uncorrected_Notes As Global.System.Data.DataColumn
        
        Private columnREPEATED_CHLA_SAMPLE As Global.System.Data.DataColumn
        
        Private columnCOMMENTS As Global.System.Data.DataColumn
        
        Private columnSOURCE As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblChlorophyll"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ChlorophyllIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChlorophyllID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CHLA_LABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHLA_LAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CHLA_METHODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHLA_METHOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CHLA_LABSAMPLENUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHLA_LABSAMPLENUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CHLA_CORRECTED_UG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHLA_CORRECTED_UG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CHLA_Corrected_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHLA_Corrected_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CHLA_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHLA_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CHLA_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHLA_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CHLA_UNCORRECTED_UG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHLA_UNCORRECTED_UG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CHLA_Uncorrected_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHLA_Uncorrected_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property REPEATED_CHLA_SAMPLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPEATED_CHLA_SAMPLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SOURCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOURCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblChlorophyllRow
            Get
                Return CType(Me.Rows(index),tblChlorophyllRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblChlorophyllRowChanging As tblChlorophyllRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblChlorophyllRowChanged As tblChlorophyllRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblChlorophyllRowDeleting As tblChlorophyllRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblChlorophyllRowDeleted As tblChlorophyllRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblChlorophyllRow(ByVal row As tblChlorophyllRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblChlorophyllRow( _
                    ByVal ChlorophyllID As System.Guid,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal CHLA_LAB As String,  _
                    ByVal CHLA_METHOD As String,  _
                    ByVal CHLA_LABSAMPLENUM As String,  _
                    ByVal CHLA_CORRECTED_UG_L As Decimal,  _
                    ByVal CHLA_Corrected_Notes As String,  _
                    ByVal CHLA_MDL_YN As Boolean,  _
                    ByVal CHLA_MDL_LEVEL As Double,  _
                    ByVal CHLA_UNCORRECTED_UG_L As Decimal,  _
                    ByVal CHLA_Uncorrected_Notes As String,  _
                    ByVal REPEATED_CHLA_SAMPLE As Boolean,  _
                    ByVal COMMENTS As String,  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte) As tblChlorophyllRow
            Dim rowtblChlorophyllRow As tblChlorophyllRow = CType(Me.NewRow,tblChlorophyllRow)
            Dim columnValuesArray() As Object = New Object() {ChlorophyllID, PONDNAME, SAMPLEDATE, SAMPLENUMBER, CHLA_LAB, CHLA_METHOD, CHLA_LABSAMPLENUM, CHLA_CORRECTED_UG_L, CHLA_Corrected_Notes, CHLA_MDL_YN, CHLA_MDL_LEVEL, CHLA_UNCORRECTED_UG_L, CHLA_Uncorrected_Notes, REPEATED_CHLA_SAMPLE, COMMENTS, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp}
            rowtblChlorophyllRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblChlorophyllRow)
            Return rowtblChlorophyllRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByChlorophyllIDPONDNAMESAMPLEDATESAMPLENUMBER(ByVal ChlorophyllID As System.Guid, ByVal PONDNAME As String, ByVal SAMPLEDATE As Date, ByVal SAMPLENUMBER As String) As tblChlorophyllRow
            Return CType(Me.Rows.Find(New Object() {ChlorophyllID, PONDNAME, SAMPLEDATE, SAMPLENUMBER}),tblChlorophyllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblChlorophyllDataTable = CType(MyBase.Clone,tblChlorophyllDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblChlorophyllDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnChlorophyllID = MyBase.Columns("ChlorophyllID")
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnSAMPLEDATE = MyBase.Columns("SAMPLEDATE")
            Me.columnSAMPLENUMBER = MyBase.Columns("SAMPLENUMBER")
            Me.columnCHLA_LAB = MyBase.Columns("CHLA_LAB")
            Me.columnCHLA_METHOD = MyBase.Columns("CHLA_METHOD")
            Me.columnCHLA_LABSAMPLENUM = MyBase.Columns("CHLA_LABSAMPLENUM")
            Me.columnCHLA_CORRECTED_UG_L = MyBase.Columns("CHLA_CORRECTED_UG_L")
            Me.columnCHLA_Corrected_Notes = MyBase.Columns("CHLA_Corrected_Notes")
            Me.columnCHLA_MDL_YN = MyBase.Columns("CHLA_MDL_YN")
            Me.columnCHLA_MDL_LEVEL = MyBase.Columns("CHLA_MDL_LEVEL")
            Me.columnCHLA_UNCORRECTED_UG_L = MyBase.Columns("CHLA_UNCORRECTED_UG_L")
            Me.columnCHLA_Uncorrected_Notes = MyBase.Columns("CHLA_Uncorrected_Notes")
            Me.columnREPEATED_CHLA_SAMPLE = MyBase.Columns("REPEATED_CHLA_SAMPLE")
            Me.columnCOMMENTS = MyBase.Columns("COMMENTS")
            Me.columnSOURCE = MyBase.Columns("SOURCE")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnChlorophyllID = New Global.System.Data.DataColumn("ChlorophyllID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChlorophyllID)
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnSAMPLEDATE = New Global.System.Data.DataColumn("SAMPLEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEDATE)
            Me.columnSAMPLENUMBER = New Global.System.Data.DataColumn("SAMPLENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLENUMBER)
            Me.columnCHLA_LAB = New Global.System.Data.DataColumn("CHLA_LAB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHLA_LAB)
            Me.columnCHLA_METHOD = New Global.System.Data.DataColumn("CHLA_METHOD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHLA_METHOD)
            Me.columnCHLA_LABSAMPLENUM = New Global.System.Data.DataColumn("CHLA_LABSAMPLENUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHLA_LABSAMPLENUM)
            Me.columnCHLA_CORRECTED_UG_L = New Global.System.Data.DataColumn("CHLA_CORRECTED_UG_L", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHLA_CORRECTED_UG_L)
            Me.columnCHLA_Corrected_Notes = New Global.System.Data.DataColumn("CHLA_Corrected_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHLA_Corrected_Notes)
            Me.columnCHLA_MDL_YN = New Global.System.Data.DataColumn("CHLA_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHLA_MDL_YN)
            Me.columnCHLA_MDL_LEVEL = New Global.System.Data.DataColumn("CHLA_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHLA_MDL_LEVEL)
            Me.columnCHLA_UNCORRECTED_UG_L = New Global.System.Data.DataColumn("CHLA_UNCORRECTED_UG_L", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHLA_UNCORRECTED_UG_L)
            Me.columnCHLA_Uncorrected_Notes = New Global.System.Data.DataColumn("CHLA_Uncorrected_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHLA_Uncorrected_Notes)
            Me.columnREPEATED_CHLA_SAMPLE = New Global.System.Data.DataColumn("REPEATED_CHLA_SAMPLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPEATED_CHLA_SAMPLE)
            Me.columnCOMMENTS = New Global.System.Data.DataColumn("COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS)
            Me.columnSOURCE = New Global.System.Data.DataColumn("SOURCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOURCE)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnChlorophyllID, Me.columnPONDNAME, Me.columnSAMPLEDATE, Me.columnSAMPLENUMBER}, true))
            Me.columnChlorophyllID.AllowDBNull = false
            Me.columnPONDNAME.AllowDBNull = false
            Me.columnPONDNAME.MaxLength = 50
            Me.columnSAMPLEDATE.AllowDBNull = false
            Me.columnSAMPLENUMBER.AllowDBNull = false
            Me.columnSAMPLENUMBER.MaxLength = 50
            Me.columnCHLA_LAB.MaxLength = 50
            Me.columnCHLA_METHOD.MaxLength = 100
            Me.columnCHLA_LABSAMPLENUM.MaxLength = 10
            Me.columnCHLA_Corrected_Notes.MaxLength = 300
            Me.columnCHLA_Uncorrected_Notes.MaxLength = 50
            Me.columnCOMMENTS.MaxLength = 2147483647
            Me.columnSOURCE.MaxLength = 100
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblChlorophyllRow() As tblChlorophyllRow
            Return CType(Me.NewRow,tblChlorophyllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblChlorophyllRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblChlorophyllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblChlorophyllRowChangedEvent) Is Nothing) Then
                RaiseEvent tblChlorophyllRowChanged(Me, New tblChlorophyllRowChangeEvent(CType(e.Row,tblChlorophyllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblChlorophyllRowChangingEvent) Is Nothing) Then
                RaiseEvent tblChlorophyllRowChanging(Me, New tblChlorophyllRowChangeEvent(CType(e.Row,tblChlorophyllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblChlorophyllRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblChlorophyllRowDeleted(Me, New tblChlorophyllRowChangeEvent(CType(e.Row,tblChlorophyllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblChlorophyllRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblChlorophyllRowDeleting(Me, New tblChlorophyllRowChangeEvent(CType(e.Row,tblChlorophyllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblChlorophyllRow(ByVal row As tblChlorophyllRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblChlorophyllDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblContinuousDataDeploymentsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblContinuousDataDeploymentsRow)
        
        Private columnSiteName As Global.System.Data.DataColumn
        
        Private columnDateDeployed As Global.System.Data.DataColumn
        
        Private columnTimeDeployed As Global.System.Data.DataColumn
        
        Private columnDateRetrieved As Global.System.Data.DataColumn
        
        Private columnTimeRetrieved As Global.System.Data.DataColumn
        
        Private columnDeploymentType As Global.System.Data.DataColumn
        
        Private columnDeployLatitude As Global.System.Data.DataColumn
        
        Private columnDeployLongitude As Global.System.Data.DataColumn
        
        Private columnDeploymentNotes As Global.System.Data.DataColumn
        
        Private columnRetrieveLatitude As Global.System.Data.DataColumn
        
        Private columnRetrieveLongitude As Global.System.Data.DataColumn
        
        Private columnRetrievalNotes As Global.System.Data.DataColumn
        
        Private columnDataProcessingNotes As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblContinuousDataDeployments"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SiteNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DateDeployedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateDeployed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TimeDeployedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeDeployed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DateRetrievedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRetrieved
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TimeRetrievedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeRetrieved
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DeploymentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeploymentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DeployLatitudeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeployLatitude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DeployLongitudeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeployLongitude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DeploymentNotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeploymentNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RetrieveLatitudeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetrieveLatitude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RetrieveLongitudeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetrieveLongitude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RetrievalNotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetrievalNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DataProcessingNotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataProcessingNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblContinuousDataDeploymentsRow
            Get
                Return CType(Me.Rows(index),tblContinuousDataDeploymentsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblContinuousDataDeploymentsRowChanging As tblContinuousDataDeploymentsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblContinuousDataDeploymentsRowChanged As tblContinuousDataDeploymentsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblContinuousDataDeploymentsRowDeleting As tblContinuousDataDeploymentsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblContinuousDataDeploymentsRowDeleted As tblContinuousDataDeploymentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblContinuousDataDeploymentsRow(ByVal row As tblContinuousDataDeploymentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblContinuousDataDeploymentsRow( _
                    ByVal SiteName As String,  _
                    ByVal DateDeployed As Date,  _
                    ByVal TimeDeployed As Date,  _
                    ByVal DateRetrieved As Date,  _
                    ByVal TimeRetrieved As Date,  _
                    ByVal DeploymentType As String,  _
                    ByVal DeployLatitude As Double,  _
                    ByVal DeployLongitude As Double,  _
                    ByVal DeploymentNotes As String,  _
                    ByVal RetrieveLatitude As Double,  _
                    ByVal RetrieveLongitude As Double,  _
                    ByVal RetrievalNotes As String,  _
                    ByVal DataProcessingNotes As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte) As tblContinuousDataDeploymentsRow
            Dim rowtblContinuousDataDeploymentsRow As tblContinuousDataDeploymentsRow = CType(Me.NewRow,tblContinuousDataDeploymentsRow)
            Dim columnValuesArray() As Object = New Object() {SiteName, DateDeployed, TimeDeployed, DateRetrieved, TimeRetrieved, DeploymentType, DeployLatitude, DeployLongitude, DeploymentNotes, RetrieveLatitude, RetrieveLongitude, RetrievalNotes, DataProcessingNotes, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp}
            rowtblContinuousDataDeploymentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblContinuousDataDeploymentsRow)
            Return rowtblContinuousDataDeploymentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindBySiteNameDateDeployed(ByVal SiteName As String, ByVal DateDeployed As Date) As tblContinuousDataDeploymentsRow
            Return CType(Me.Rows.Find(New Object() {SiteName, DateDeployed}),tblContinuousDataDeploymentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblContinuousDataDeploymentsDataTable = CType(MyBase.Clone,tblContinuousDataDeploymentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblContinuousDataDeploymentsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSiteName = MyBase.Columns("SiteName")
            Me.columnDateDeployed = MyBase.Columns("DateDeployed")
            Me.columnTimeDeployed = MyBase.Columns("TimeDeployed")
            Me.columnDateRetrieved = MyBase.Columns("DateRetrieved")
            Me.columnTimeRetrieved = MyBase.Columns("TimeRetrieved")
            Me.columnDeploymentType = MyBase.Columns("DeploymentType")
            Me.columnDeployLatitude = MyBase.Columns("DeployLatitude")
            Me.columnDeployLongitude = MyBase.Columns("DeployLongitude")
            Me.columnDeploymentNotes = MyBase.Columns("DeploymentNotes")
            Me.columnRetrieveLatitude = MyBase.Columns("RetrieveLatitude")
            Me.columnRetrieveLongitude = MyBase.Columns("RetrieveLongitude")
            Me.columnRetrievalNotes = MyBase.Columns("RetrievalNotes")
            Me.columnDataProcessingNotes = MyBase.Columns("DataProcessingNotes")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSiteName = New Global.System.Data.DataColumn("SiteName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteName)
            Me.columnDateDeployed = New Global.System.Data.DataColumn("DateDeployed", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateDeployed)
            Me.columnTimeDeployed = New Global.System.Data.DataColumn("TimeDeployed", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeDeployed)
            Me.columnDateRetrieved = New Global.System.Data.DataColumn("DateRetrieved", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRetrieved)
            Me.columnTimeRetrieved = New Global.System.Data.DataColumn("TimeRetrieved", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeRetrieved)
            Me.columnDeploymentType = New Global.System.Data.DataColumn("DeploymentType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeploymentType)
            Me.columnDeployLatitude = New Global.System.Data.DataColumn("DeployLatitude", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeployLatitude)
            Me.columnDeployLongitude = New Global.System.Data.DataColumn("DeployLongitude", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeployLongitude)
            Me.columnDeploymentNotes = New Global.System.Data.DataColumn("DeploymentNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeploymentNotes)
            Me.columnRetrieveLatitude = New Global.System.Data.DataColumn("RetrieveLatitude", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetrieveLatitude)
            Me.columnRetrieveLongitude = New Global.System.Data.DataColumn("RetrieveLongitude", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetrieveLongitude)
            Me.columnRetrievalNotes = New Global.System.Data.DataColumn("RetrievalNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetrievalNotes)
            Me.columnDataProcessingNotes = New Global.System.Data.DataColumn("DataProcessingNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataProcessingNotes)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSiteName, Me.columnDateDeployed}, true))
            Me.columnSiteName.AllowDBNull = false
            Me.columnSiteName.MaxLength = 50
            Me.columnDateDeployed.AllowDBNull = false
            Me.columnDeploymentType.MaxLength = 50
            Me.columnDeploymentNotes.MaxLength = 4000
            Me.columnRetrievalNotes.MaxLength = 4000
            Me.columnDataProcessingNotes.MaxLength = 4000
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblContinuousDataDeploymentsRow() As tblContinuousDataDeploymentsRow
            Return CType(Me.NewRow,tblContinuousDataDeploymentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblContinuousDataDeploymentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblContinuousDataDeploymentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblContinuousDataDeploymentsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblContinuousDataDeploymentsRowChanged(Me, New tblContinuousDataDeploymentsRowChangeEvent(CType(e.Row,tblContinuousDataDeploymentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblContinuousDataDeploymentsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblContinuousDataDeploymentsRowChanging(Me, New tblContinuousDataDeploymentsRowChangeEvent(CType(e.Row,tblContinuousDataDeploymentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblContinuousDataDeploymentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblContinuousDataDeploymentsRowDeleted(Me, New tblContinuousDataDeploymentsRowChangeEvent(CType(e.Row,tblContinuousDataDeploymentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblContinuousDataDeploymentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblContinuousDataDeploymentsRowDeleting(Me, New tblContinuousDataDeploymentsRowChangeEvent(CType(e.Row,tblContinuousDataDeploymentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblContinuousDataDeploymentsRow(ByVal row As tblContinuousDataDeploymentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblContinuousDataDeploymentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblContinuousDataLoggersDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblContinuousDataLoggersRow)
        
        Private columnSiteName As Global.System.Data.DataColumn
        
        Private columnDateTimeDeployed As Global.System.Data.DataColumn
        
        Private columnSerialNumber As Global.System.Data.DataColumn
        
        Private columnLoggerType As Global.System.Data.DataColumn
        
        Private columnLoggerModel As Global.System.Data.DataColumn
        
        Private columnPctBattConfig As Global.System.Data.DataColumn
        
        Private columnPctBattDwnld As Global.System.Data.DataColumn
        
        Private columnLoggerName As Global.System.Data.DataColumn
        
        Private columnFilename As Global.System.Data.DataColumn
        
        Private columnDataProcessingNotes As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblContinuousDataLoggers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SiteNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DateTimeDeployedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateTimeDeployed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SerialNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerialNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LoggerTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoggerType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LoggerModelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoggerModel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PctBattConfigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPctBattConfig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PctBattDwnldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPctBattDwnld
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LoggerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoggerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FilenameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFilename
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DataProcessingNotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataProcessingNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblContinuousDataLoggersRow
            Get
                Return CType(Me.Rows(index),tblContinuousDataLoggersRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblContinuousDataLoggersRowChanging As tblContinuousDataLoggersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblContinuousDataLoggersRowChanged As tblContinuousDataLoggersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblContinuousDataLoggersRowDeleting As tblContinuousDataLoggersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblContinuousDataLoggersRowDeleted As tblContinuousDataLoggersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblContinuousDataLoggersRow(ByVal row As tblContinuousDataLoggersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblContinuousDataLoggersRow(ByVal SiteName As String, ByVal DateTimeDeployed As Date, ByVal SerialNumber As String, ByVal LoggerType As String, ByVal LoggerModel As String, ByVal PctBattConfig As Double, ByVal PctBattDwnld As Double, ByVal LoggerName As String, ByVal Filename As String, ByVal DataProcessingNotes As String, ByVal RecordInsertedDate As Date, ByVal RecordInsertedBy As String, ByVal RecordUpdatedDate As Date, ByVal RecordUpdatedBy As String, ByVal row_timestamp() As Byte) As tblContinuousDataLoggersRow
            Dim rowtblContinuousDataLoggersRow As tblContinuousDataLoggersRow = CType(Me.NewRow,tblContinuousDataLoggersRow)
            Dim columnValuesArray() As Object = New Object() {SiteName, DateTimeDeployed, SerialNumber, LoggerType, LoggerModel, PctBattConfig, PctBattDwnld, LoggerName, Filename, DataProcessingNotes, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp}
            rowtblContinuousDataLoggersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblContinuousDataLoggersRow)
            Return rowtblContinuousDataLoggersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindBySiteNameDateTimeDeployedFilename(ByVal SiteName As String, ByVal DateTimeDeployed As Date, ByVal Filename As String) As tblContinuousDataLoggersRow
            Return CType(Me.Rows.Find(New Object() {SiteName, DateTimeDeployed, Filename}),tblContinuousDataLoggersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblContinuousDataLoggersDataTable = CType(MyBase.Clone,tblContinuousDataLoggersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblContinuousDataLoggersDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSiteName = MyBase.Columns("SiteName")
            Me.columnDateTimeDeployed = MyBase.Columns("DateTimeDeployed")
            Me.columnSerialNumber = MyBase.Columns("SerialNumber")
            Me.columnLoggerType = MyBase.Columns("LoggerType")
            Me.columnLoggerModel = MyBase.Columns("LoggerModel")
            Me.columnPctBattConfig = MyBase.Columns("PctBattConfig")
            Me.columnPctBattDwnld = MyBase.Columns("PctBattDwnld")
            Me.columnLoggerName = MyBase.Columns("LoggerName")
            Me.columnFilename = MyBase.Columns("Filename")
            Me.columnDataProcessingNotes = MyBase.Columns("DataProcessingNotes")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSiteName = New Global.System.Data.DataColumn("SiteName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteName)
            Me.columnDateTimeDeployed = New Global.System.Data.DataColumn("DateTimeDeployed", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateTimeDeployed)
            Me.columnSerialNumber = New Global.System.Data.DataColumn("SerialNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerialNumber)
            Me.columnLoggerType = New Global.System.Data.DataColumn("LoggerType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoggerType)
            Me.columnLoggerModel = New Global.System.Data.DataColumn("LoggerModel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoggerModel)
            Me.columnPctBattConfig = New Global.System.Data.DataColumn("PctBattConfig", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPctBattConfig)
            Me.columnPctBattDwnld = New Global.System.Data.DataColumn("PctBattDwnld", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPctBattDwnld)
            Me.columnLoggerName = New Global.System.Data.DataColumn("LoggerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoggerName)
            Me.columnFilename = New Global.System.Data.DataColumn("Filename", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFilename)
            Me.columnDataProcessingNotes = New Global.System.Data.DataColumn("DataProcessingNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataProcessingNotes)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSiteName, Me.columnDateTimeDeployed, Me.columnFilename}, true))
            Me.columnSiteName.AllowDBNull = false
            Me.columnSiteName.MaxLength = 50
            Me.columnDateTimeDeployed.AllowDBNull = false
            Me.columnSerialNumber.AllowDBNull = false
            Me.columnSerialNumber.MaxLength = 50
            Me.columnLoggerType.MaxLength = 50
            Me.columnLoggerModel.MaxLength = 50
            Me.columnLoggerName.MaxLength = 50
            Me.columnFilename.AllowDBNull = false
            Me.columnFilename.MaxLength = 50
            Me.columnDataProcessingNotes.MaxLength = 4000
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblContinuousDataLoggersRow() As tblContinuousDataLoggersRow
            Return CType(Me.NewRow,tblContinuousDataLoggersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblContinuousDataLoggersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblContinuousDataLoggersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblContinuousDataLoggersRowChangedEvent) Is Nothing) Then
                RaiseEvent tblContinuousDataLoggersRowChanged(Me, New tblContinuousDataLoggersRowChangeEvent(CType(e.Row,tblContinuousDataLoggersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblContinuousDataLoggersRowChangingEvent) Is Nothing) Then
                RaiseEvent tblContinuousDataLoggersRowChanging(Me, New tblContinuousDataLoggersRowChangeEvent(CType(e.Row,tblContinuousDataLoggersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblContinuousDataLoggersRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblContinuousDataLoggersRowDeleted(Me, New tblContinuousDataLoggersRowChangeEvent(CType(e.Row,tblContinuousDataLoggersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblContinuousDataLoggersRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblContinuousDataLoggersRowDeleting(Me, New tblContinuousDataLoggersRowChangeEvent(CType(e.Row,tblContinuousDataLoggersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblContinuousDataLoggersRow(ByVal row As tblContinuousDataLoggersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblContinuousDataLoggersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblContinuousDataSitesDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblContinuousDataSitesRow)
        
        Private columnSiteName As Global.System.Data.DataColumn
        
        Private columnSiteType As Global.System.Data.DataColumn
        
        Private columnLatitude As Global.System.Data.DataColumn
        
        Private columnLongitude As Global.System.Data.DataColumn
        
        Private columnLocationNotes As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblContinuousDataSites"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SiteNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SiteTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LatitudeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLatitude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LongitudeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLongitude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LocationNotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocationNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblContinuousDataSitesRow
            Get
                Return CType(Me.Rows(index),tblContinuousDataSitesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblContinuousDataSitesRowChanging As tblContinuousDataSitesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblContinuousDataSitesRowChanged As tblContinuousDataSitesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblContinuousDataSitesRowDeleting As tblContinuousDataSitesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblContinuousDataSitesRowDeleted As tblContinuousDataSitesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblContinuousDataSitesRow(ByVal row As tblContinuousDataSitesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblContinuousDataSitesRow(ByVal parenttblPondsRowByFK_tblContinuousDataSites_tblPonds As tblPondsRow, ByVal SiteType As String, ByVal Latitude As Decimal, ByVal Longitude As Decimal, ByVal LocationNotes As String, ByVal RecordInsertedDate As Date, ByVal RecordInsertedBy As String, ByVal RecordUpdatedDate As Date, ByVal RecordUpdatedBy As String, ByVal row_timestamp() As Byte) As tblContinuousDataSitesRow
            Dim rowtblContinuousDataSitesRow As tblContinuousDataSitesRow = CType(Me.NewRow,tblContinuousDataSitesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SiteType, Latitude, Longitude, LocationNotes, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp}
            If (Not (parenttblPondsRowByFK_tblContinuousDataSites_tblPonds) Is Nothing) Then
                columnValuesArray(0) = parenttblPondsRowByFK_tblContinuousDataSites_tblPonds(0)
            End If
            rowtblContinuousDataSitesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblContinuousDataSitesRow)
            Return rowtblContinuousDataSitesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindBySiteName(ByVal SiteName As String) As tblContinuousDataSitesRow
            Return CType(Me.Rows.Find(New Object() {SiteName}),tblContinuousDataSitesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblContinuousDataSitesDataTable = CType(MyBase.Clone,tblContinuousDataSitesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblContinuousDataSitesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSiteName = MyBase.Columns("SiteName")
            Me.columnSiteType = MyBase.Columns("SiteType")
            Me.columnLatitude = MyBase.Columns("Latitude")
            Me.columnLongitude = MyBase.Columns("Longitude")
            Me.columnLocationNotes = MyBase.Columns("LocationNotes")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSiteName = New Global.System.Data.DataColumn("SiteName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteName)
            Me.columnSiteType = New Global.System.Data.DataColumn("SiteType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteType)
            Me.columnLatitude = New Global.System.Data.DataColumn("Latitude", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLatitude)
            Me.columnLongitude = New Global.System.Data.DataColumn("Longitude", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLongitude)
            Me.columnLocationNotes = New Global.System.Data.DataColumn("LocationNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationNotes)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSiteName}, true))
            Me.columnSiteName.AllowDBNull = false
            Me.columnSiteName.Unique = true
            Me.columnSiteName.MaxLength = 50
            Me.columnSiteType.MaxLength = 50
            Me.columnLocationNotes.MaxLength = 2147483647
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblContinuousDataSitesRow() As tblContinuousDataSitesRow
            Return CType(Me.NewRow,tblContinuousDataSitesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblContinuousDataSitesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblContinuousDataSitesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblContinuousDataSitesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblContinuousDataSitesRowChanged(Me, New tblContinuousDataSitesRowChangeEvent(CType(e.Row,tblContinuousDataSitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblContinuousDataSitesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblContinuousDataSitesRowChanging(Me, New tblContinuousDataSitesRowChangeEvent(CType(e.Row,tblContinuousDataSitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblContinuousDataSitesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblContinuousDataSitesRowDeleted(Me, New tblContinuousDataSitesRowChangeEvent(CType(e.Row,tblContinuousDataSitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblContinuousDataSitesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblContinuousDataSitesRowDeleting(Me, New tblContinuousDataSitesRowChangeEvent(CType(e.Row,tblContinuousDataSitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblContinuousDataSitesRow(ByVal row As tblContinuousDataSitesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblContinuousDataSitesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblDBEditsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblDBEditsRow)
        
        Private columnEditDescription As Global.System.Data.DataColumn
        
        Private columnEditor As Global.System.Data.DataColumn
        
        Private columnDateTime As Global.System.Data.DataColumn
        
        Private columnPrevVersion As Global.System.Data.DataColumn
        
        Private columnNewVersion As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblDBEdits"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property EditDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEditDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property EditorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEditor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PrevVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrevVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NewVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblDBEditsRow
            Get
                Return CType(Me.Rows(index),tblDBEditsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblDBEditsRowChanging As tblDBEditsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblDBEditsRowChanged As tblDBEditsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblDBEditsRowDeleting As tblDBEditsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblDBEditsRowDeleted As tblDBEditsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblDBEditsRow(ByVal row As tblDBEditsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblDBEditsRow(ByVal EditDescription As String, ByVal Editor As String, ByVal DateTime As Date, ByVal PrevVersion As Double, ByVal NewVersion As Double, ByVal row_timestamp() As Byte) As tblDBEditsRow
            Dim rowtblDBEditsRow As tblDBEditsRow = CType(Me.NewRow,tblDBEditsRow)
            Dim columnValuesArray() As Object = New Object() {EditDescription, Editor, DateTime, PrevVersion, NewVersion, row_timestamp}
            rowtblDBEditsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblDBEditsRow)
            Return rowtblDBEditsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByDateTime(ByVal DateTime As Date) As tblDBEditsRow
            Return CType(Me.Rows.Find(New Object() {DateTime}),tblDBEditsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblDBEditsDataTable = CType(MyBase.Clone,tblDBEditsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblDBEditsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEditDescription = MyBase.Columns("EditDescription")
            Me.columnEditor = MyBase.Columns("Editor")
            Me.columnDateTime = MyBase.Columns("DateTime")
            Me.columnPrevVersion = MyBase.Columns("PrevVersion")
            Me.columnNewVersion = MyBase.Columns("NewVersion")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEditDescription = New Global.System.Data.DataColumn("EditDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEditDescription)
            Me.columnEditor = New Global.System.Data.DataColumn("Editor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEditor)
            Me.columnDateTime = New Global.System.Data.DataColumn("DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateTime)
            Me.columnPrevVersion = New Global.System.Data.DataColumn("PrevVersion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrevVersion)
            Me.columnNewVersion = New Global.System.Data.DataColumn("NewVersion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewVersion)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDateTime}, true))
            Me.columnEditDescription.MaxLength = 1073741823
            Me.columnEditor.MaxLength = 50
            Me.columnDateTime.AllowDBNull = false
            Me.columnDateTime.Unique = true
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblDBEditsRow() As tblDBEditsRow
            Return CType(Me.NewRow,tblDBEditsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblDBEditsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblDBEditsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblDBEditsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblDBEditsRowChanged(Me, New tblDBEditsRowChangeEvent(CType(e.Row,tblDBEditsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblDBEditsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblDBEditsRowChanging(Me, New tblDBEditsRowChangeEvent(CType(e.Row,tblDBEditsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblDBEditsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblDBEditsRowDeleted(Me, New tblDBEditsRowChangeEvent(CType(e.Row,tblDBEditsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblDBEditsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblDBEditsRowDeleting(Me, New tblDBEditsRowChangeEvent(CType(e.Row,tblDBEditsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblDBEditsRow(ByVal row As tblDBEditsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblDBEditsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblDBIssuesDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblDBIssuesRow)
        
        Private columnIssueID As Global.System.Data.DataColumn
        
        Private columnIssue As Global.System.Data.DataColumn
        
        Private columnIsResolved As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblDBIssues"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IssueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIssueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IssueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIssue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IsResolvedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsResolved
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblDBIssuesRow
            Get
                Return CType(Me.Rows(index),tblDBIssuesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblDBIssuesRowChanging As tblDBIssuesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblDBIssuesRowChanged As tblDBIssuesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblDBIssuesRowDeleting As tblDBIssuesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblDBIssuesRowDeleted As tblDBIssuesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblDBIssuesRow(ByVal row As tblDBIssuesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblDBIssuesRow(ByVal IssueID As System.Guid, ByVal Issue As String, ByVal IsResolved As Boolean, ByVal RecordInsertedDate As Date, ByVal RecordInsertedBy As String, ByVal RecordUpdatedDate As Date, ByVal RecordUpdatedBy As String, ByVal row_timestamp() As Byte) As tblDBIssuesRow
            Dim rowtblDBIssuesRow As tblDBIssuesRow = CType(Me.NewRow,tblDBIssuesRow)
            Dim columnValuesArray() As Object = New Object() {IssueID, Issue, IsResolved, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp}
            rowtblDBIssuesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblDBIssuesRow)
            Return rowtblDBIssuesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByIssueID(ByVal IssueID As System.Guid) As tblDBIssuesRow
            Return CType(Me.Rows.Find(New Object() {IssueID}),tblDBIssuesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblDBIssuesDataTable = CType(MyBase.Clone,tblDBIssuesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblDBIssuesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIssueID = MyBase.Columns("IssueID")
            Me.columnIssue = MyBase.Columns("Issue")
            Me.columnIsResolved = MyBase.Columns("IsResolved")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIssueID = New Global.System.Data.DataColumn("IssueID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIssueID)
            Me.columnIssue = New Global.System.Data.DataColumn("Issue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIssue)
            Me.columnIsResolved = New Global.System.Data.DataColumn("IsResolved", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsResolved)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIssueID}, true))
            Me.columnIssueID.AllowDBNull = false
            Me.columnIssueID.Unique = true
            Me.columnIssue.MaxLength = 2147483647
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblDBIssuesRow() As tblDBIssuesRow
            Return CType(Me.NewRow,tblDBIssuesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblDBIssuesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblDBIssuesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblDBIssuesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblDBIssuesRowChanged(Me, New tblDBIssuesRowChangeEvent(CType(e.Row,tblDBIssuesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblDBIssuesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblDBIssuesRowChanging(Me, New tblDBIssuesRowChangeEvent(CType(e.Row,tblDBIssuesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblDBIssuesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblDBIssuesRowDeleted(Me, New tblDBIssuesRowChangeEvent(CType(e.Row,tblDBIssuesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblDBIssuesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblDBIssuesRowDeleting(Me, New tblDBIssuesRowChangeEvent(CType(e.Row,tblDBIssuesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblDBIssuesRow(ByVal row As tblDBIssuesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblDBIssuesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblEventsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblEventsRow)
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnSAMPLEDATE As Global.System.Data.DataColumn
        
        Private columnSTART_TIME As Global.System.Data.DataColumn
        
        Private columnYEAR As Global.System.Data.DataColumn
        
        Private columnCONTMONVISIT As Global.System.Data.DataColumn
        
        Private columnSAMPLEMETHOD As Global.System.Data.DataColumn
        
        Private columnOBSERVERS As Global.System.Data.DataColumn
        
        Private columnSECCHIDEPTH As Global.System.Data.DataColumn
        
        Private columnSECCHINOTES As Global.System.Data.DataColumn
        
        Private columnSECCHIONBOTTOM As Global.System.Data.DataColumn
        
        Private columnISSHOREBURNED As Global.System.Data.DataColumn
        
        Private columnBURNNOTES As Global.System.Data.DataColumn
        
        Private columnBURNDATE As Global.System.Data.DataColumn
        
        Private columnTHERMOKARSTEVIDENCE As Global.System.Data.DataColumn
        
        Private columnTHERMOKARSTLOCATION As Global.System.Data.DataColumn
        
        Private columnTHERMOKARSTEXTENT As Global.System.Data.DataColumn
        
        Private columnTHERMOKARSTACTIVE As Global.System.Data.DataColumn
        
        Private columnTHERMOKARSTMATERIAL As Global.System.Data.DataColumn
        
        Private columnWOODFROGPRESENT As Global.System.Data.DataColumn
        
        Private columnPERCENTCLOUDS As Global.System.Data.DataColumn
        
        Private columnWIND As Global.System.Data.DataColumn
        
        Private columnPRECIPITATION As Global.System.Data.DataColumn
        
        Private columnPRECIPITATIONINTENSITY As Global.System.Data.DataColumn
        
        Private columnWEATHERCOMMENTS As Global.System.Data.DataColumn
        
        Private columnSITECONDITIONSCOMMENTS As Global.System.Data.DataColumn
        
        Private columnBIRD_ANIMAL_ACTIVITY As Global.System.Data.DataColumn
        
        Private columnUPLAND_VIERECK_CLASS As Global.System.Data.DataColumn
        
        Private columnEMERGENT_VIERECK_CLASS As Global.System.Data.DataColumn
        
        Private columnSUBMERGENT_VIERECK_CLASS As Global.System.Data.DataColumn
        
        Private columnSUBMERGENT_COVER As Global.System.Data.DataColumn
        
        Private columnELODEA_SURVEYED As Global.System.Data.DataColumn
        
        Private columnELODEA_PRESENT As Global.System.Data.DataColumn
        
        Private columnELODEA_NOTES As Global.System.Data.DataColumn
        
        Private columnFISHPRESENT As Global.System.Data.DataColumn
        
        Private columnWL_L_TO_S As Global.System.Data.DataColumn
        
        Private columnWL_L_TO_G As Global.System.Data.DataColumn
        
        Private columnWATERLEVEL_CM As Global.System.Data.DataColumn
        
        Private columnMON_MOVED As Global.System.Data.DataColumn
        
        Private columnLAKE_LEVEL_NOTES As Global.System.Data.DataColumn
        
        Private columnSTRATCLASS As Global.System.Data.DataColumn
        
        Private columnTURBIDITY_FIELD As Global.System.Data.DataColumn
        
        Private columnEMERGENT_WIDTH As Global.System.Data.DataColumn
        
        Private columnSUBMERGENT_WIDTH As Global.System.Data.DataColumn
        
        Private columnLOONSPRESENT As Global.System.Data.DataColumn
        
        Private columnRUSTYBBIRDSPRESENT As Global.System.Data.DataColumn
        
        Private columnSDI As Global.System.Data.DataColumn
        
        Private columnLAKEVOLUME_GIS_M3 As Global.System.Data.DataColumn
        
        Private columnLAKEAREA_GIS_M2 As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblEvents"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property START_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTART_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CONTMONVISITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTMONVISIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEMETHODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEMETHOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property OBSERVERSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOBSERVERS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SECCHIDEPTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSECCHIDEPTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SECCHINOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSECCHINOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SECCHIONBOTTOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSECCHIONBOTTOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ISSHOREBURNEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISSHOREBURNED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property BURNNOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBURNNOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property BURNDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBURNDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property THERMOKARSTEVIDENCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHERMOKARSTEVIDENCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property THERMOKARSTLOCATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHERMOKARSTLOCATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property THERMOKARSTEXTENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHERMOKARSTEXTENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property THERMOKARSTACTIVEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHERMOKARSTACTIVE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property THERMOKARSTMATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHERMOKARSTMATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WOODFROGPRESENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWOODFROGPRESENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PERCENTCLOUDSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERCENTCLOUDS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WINDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PRECIPITATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECIPITATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PRECIPITATIONINTENSITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECIPITATIONINTENSITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WEATHERCOMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWEATHERCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SITECONDITIONSCOMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSITECONDITIONSCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property BIRD_ANIMAL_ACTIVITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIRD_ANIMAL_ACTIVITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property UPLAND_VIERECK_CLASSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPLAND_VIERECK_CLASS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property EMERGENT_VIERECK_CLASSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMERGENT_VIERECK_CLASS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SUBMERGENT_VIERECK_CLASSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUBMERGENT_VIERECK_CLASS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SUBMERGENT_COVERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUBMERGENT_COVER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ELODEA_SURVEYEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELODEA_SURVEYED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ELODEA_PRESENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELODEA_PRESENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ELODEA_NOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELODEA_NOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FISHPRESENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFISHPRESENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WL_L_TO_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWL_L_TO_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WL_L_TO_GColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWL_L_TO_G
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WATERLEVEL_CMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWATERLEVEL_CM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MON_MOVEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMON_MOVED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LAKE_LEVEL_NOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAKE_LEVEL_NOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property STRATCLASSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRATCLASS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TURBIDITY_FIELDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTURBIDITY_FIELD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property EMERGENT_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMERGENT_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SUBMERGENT_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUBMERGENT_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LOONSPRESENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOONSPRESENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RUSTYBBIRDSPRESENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRUSTYBBIRDSPRESENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SDIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSDI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LAKEVOLUME_GIS_M3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAKEVOLUME_GIS_M3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LAKEAREA_GIS_M2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAKEAREA_GIS_M2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblEventsRow
            Get
                Return CType(Me.Rows(index),tblEventsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblEventsRowChanging As tblEventsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblEventsRowChanged As tblEventsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblEventsRowDeleting As tblEventsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblEventsRowDeleted As tblEventsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblEventsRow(ByVal row As tblEventsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblEventsRow( _
                    ByVal parenttblPondsRowByFK_tblEvents_tblPonds As tblPondsRow,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal START_TIME As Date,  _
                    ByVal YEAR As Integer,  _
                    ByVal CONTMONVISIT As Boolean,  _
                    ByVal SAMPLEMETHOD As String,  _
                    ByVal OBSERVERS As String,  _
                    ByVal SECCHIDEPTH As Double,  _
                    ByVal SECCHINOTES As String,  _
                    ByVal SECCHIONBOTTOM As Boolean,  _
                    ByVal ISSHOREBURNED As Boolean,  _
                    ByVal BURNNOTES As String,  _
                    ByVal BURNDATE As Date,  _
                    ByVal THERMOKARSTEVIDENCE As Boolean,  _
                    ByVal THERMOKARSTLOCATION As String,  _
                    ByVal THERMOKARSTEXTENT As String,  _
                    ByVal THERMOKARSTACTIVE As String,  _
                    ByVal THERMOKARSTMATERIAL As String,  _
                    ByVal WOODFROGPRESENT As Boolean,  _
                    ByVal PERCENTCLOUDS As String,  _
                    ByVal WIND As String,  _
                    ByVal PRECIPITATION As String,  _
                    ByVal PRECIPITATIONINTENSITY As String,  _
                    ByVal WEATHERCOMMENTS As String,  _
                    ByVal SITECONDITIONSCOMMENTS As String,  _
                    ByVal BIRD_ANIMAL_ACTIVITY As String,  _
                    ByVal UPLAND_VIERECK_CLASS As String,  _
                    ByVal EMERGENT_VIERECK_CLASS As String,  _
                    ByVal SUBMERGENT_VIERECK_CLASS As String,  _
                    ByVal SUBMERGENT_COVER As String,  _
                    ByVal ELODEA_SURVEYED As String,  _
                    ByVal ELODEA_PRESENT As String,  _
                    ByVal ELODEA_NOTES As String,  _
                    ByVal FISHPRESENT As Boolean,  _
                    ByVal WL_L_TO_S As Double,  _
                    ByVal WL_L_TO_G As Double,  _
                    ByVal WATERLEVEL_CM As Double,  _
                    ByVal MON_MOVED As Boolean,  _
                    ByVal LAKE_LEVEL_NOTES As String,  _
                    ByVal STRATCLASS As String,  _
                    ByVal TURBIDITY_FIELD As Double,  _
                    ByVal EMERGENT_WIDTH As Double,  _
                    ByVal SUBMERGENT_WIDTH As Double,  _
                    ByVal LOONSPRESENT As Boolean,  _
                    ByVal RUSTYBBIRDSPRESENT As Boolean,  _
                    ByVal SDI As Double,  _
                    ByVal LAKEVOLUME_GIS_M3 As Double,  _
                    ByVal LAKEAREA_GIS_M2 As Double,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte) As tblEventsRow
            Dim rowtblEventsRow As tblEventsRow = CType(Me.NewRow,tblEventsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SAMPLEDATE, START_TIME, YEAR, CONTMONVISIT, SAMPLEMETHOD, OBSERVERS, SECCHIDEPTH, SECCHINOTES, SECCHIONBOTTOM, ISSHOREBURNED, BURNNOTES, BURNDATE, THERMOKARSTEVIDENCE, THERMOKARSTLOCATION, THERMOKARSTEXTENT, THERMOKARSTACTIVE, THERMOKARSTMATERIAL, WOODFROGPRESENT, PERCENTCLOUDS, WIND, PRECIPITATION, PRECIPITATIONINTENSITY, WEATHERCOMMENTS, SITECONDITIONSCOMMENTS, BIRD_ANIMAL_ACTIVITY, UPLAND_VIERECK_CLASS, EMERGENT_VIERECK_CLASS, SUBMERGENT_VIERECK_CLASS, SUBMERGENT_COVER, ELODEA_SURVEYED, ELODEA_PRESENT, ELODEA_NOTES, FISHPRESENT, WL_L_TO_S, WL_L_TO_G, WATERLEVEL_CM, MON_MOVED, LAKE_LEVEL_NOTES, STRATCLASS, TURBIDITY_FIELD, EMERGENT_WIDTH, SUBMERGENT_WIDTH, LOONSPRESENT, RUSTYBBIRDSPRESENT, SDI, LAKEVOLUME_GIS_M3, LAKEAREA_GIS_M2, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp}
            If (Not (parenttblPondsRowByFK_tblEvents_tblPonds) Is Nothing) Then
                columnValuesArray(0) = parenttblPondsRowByFK_tblEvents_tblPonds(0)
            End If
            rowtblEventsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblEventsRow)
            Return rowtblEventsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByPONDNAMESAMPLEDATE(ByVal PONDNAME As String, ByVal SAMPLEDATE As Date) As tblEventsRow
            Return CType(Me.Rows.Find(New Object() {PONDNAME, SAMPLEDATE}),tblEventsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblEventsDataTable = CType(MyBase.Clone,tblEventsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblEventsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnSAMPLEDATE = MyBase.Columns("SAMPLEDATE")
            Me.columnSTART_TIME = MyBase.Columns("START_TIME")
            Me.columnYEAR = MyBase.Columns("YEAR")
            Me.columnCONTMONVISIT = MyBase.Columns("CONTMONVISIT")
            Me.columnSAMPLEMETHOD = MyBase.Columns("SAMPLEMETHOD")
            Me.columnOBSERVERS = MyBase.Columns("OBSERVERS")
            Me.columnSECCHIDEPTH = MyBase.Columns("SECCHIDEPTH")
            Me.columnSECCHINOTES = MyBase.Columns("SECCHINOTES")
            Me.columnSECCHIONBOTTOM = MyBase.Columns("SECCHIONBOTTOM")
            Me.columnISSHOREBURNED = MyBase.Columns("ISSHOREBURNED")
            Me.columnBURNNOTES = MyBase.Columns("BURNNOTES")
            Me.columnBURNDATE = MyBase.Columns("BURNDATE")
            Me.columnTHERMOKARSTEVIDENCE = MyBase.Columns("THERMOKARSTEVIDENCE")
            Me.columnTHERMOKARSTLOCATION = MyBase.Columns("THERMOKARSTLOCATION")
            Me.columnTHERMOKARSTEXTENT = MyBase.Columns("THERMOKARSTEXTENT")
            Me.columnTHERMOKARSTACTIVE = MyBase.Columns("THERMOKARSTACTIVE")
            Me.columnTHERMOKARSTMATERIAL = MyBase.Columns("THERMOKARSTMATERIAL")
            Me.columnWOODFROGPRESENT = MyBase.Columns("WOODFROGPRESENT")
            Me.columnPERCENTCLOUDS = MyBase.Columns("PERCENTCLOUDS")
            Me.columnWIND = MyBase.Columns("WIND")
            Me.columnPRECIPITATION = MyBase.Columns("PRECIPITATION")
            Me.columnPRECIPITATIONINTENSITY = MyBase.Columns("PRECIPITATIONINTENSITY")
            Me.columnWEATHERCOMMENTS = MyBase.Columns("WEATHERCOMMENTS")
            Me.columnSITECONDITIONSCOMMENTS = MyBase.Columns("SITECONDITIONSCOMMENTS")
            Me.columnBIRD_ANIMAL_ACTIVITY = MyBase.Columns("BIRD_ANIMAL_ACTIVITY")
            Me.columnUPLAND_VIERECK_CLASS = MyBase.Columns("UPLAND_VIERECK_CLASS")
            Me.columnEMERGENT_VIERECK_CLASS = MyBase.Columns("EMERGENT_VIERECK_CLASS")
            Me.columnSUBMERGENT_VIERECK_CLASS = MyBase.Columns("SUBMERGENT_VIERECK_CLASS")
            Me.columnSUBMERGENT_COVER = MyBase.Columns("SUBMERGENT_COVER")
            Me.columnELODEA_SURVEYED = MyBase.Columns("ELODEA_SURVEYED")
            Me.columnELODEA_PRESENT = MyBase.Columns("ELODEA_PRESENT")
            Me.columnELODEA_NOTES = MyBase.Columns("ELODEA_NOTES")
            Me.columnFISHPRESENT = MyBase.Columns("FISHPRESENT")
            Me.columnWL_L_TO_S = MyBase.Columns("WL_L_TO_S")
            Me.columnWL_L_TO_G = MyBase.Columns("WL_L_TO_G")
            Me.columnWATERLEVEL_CM = MyBase.Columns("WATERLEVEL_CM")
            Me.columnMON_MOVED = MyBase.Columns("MON_MOVED")
            Me.columnLAKE_LEVEL_NOTES = MyBase.Columns("LAKE_LEVEL_NOTES")
            Me.columnSTRATCLASS = MyBase.Columns("STRATCLASS")
            Me.columnTURBIDITY_FIELD = MyBase.Columns("TURBIDITY_FIELD")
            Me.columnEMERGENT_WIDTH = MyBase.Columns("EMERGENT_WIDTH")
            Me.columnSUBMERGENT_WIDTH = MyBase.Columns("SUBMERGENT_WIDTH")
            Me.columnLOONSPRESENT = MyBase.Columns("LOONSPRESENT")
            Me.columnRUSTYBBIRDSPRESENT = MyBase.Columns("RUSTYBBIRDSPRESENT")
            Me.columnSDI = MyBase.Columns("SDI")
            Me.columnLAKEVOLUME_GIS_M3 = MyBase.Columns("LAKEVOLUME_GIS_M3")
            Me.columnLAKEAREA_GIS_M2 = MyBase.Columns("LAKEAREA_GIS_M2")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnSAMPLEDATE = New Global.System.Data.DataColumn("SAMPLEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEDATE)
            Me.columnSTART_TIME = New Global.System.Data.DataColumn("START_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTART_TIME)
            Me.columnYEAR = New Global.System.Data.DataColumn("YEAR", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEAR)
            Me.columnCONTMONVISIT = New Global.System.Data.DataColumn("CONTMONVISIT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTMONVISIT)
            Me.columnSAMPLEMETHOD = New Global.System.Data.DataColumn("SAMPLEMETHOD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEMETHOD)
            Me.columnOBSERVERS = New Global.System.Data.DataColumn("OBSERVERS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOBSERVERS)
            Me.columnSECCHIDEPTH = New Global.System.Data.DataColumn("SECCHIDEPTH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSECCHIDEPTH)
            Me.columnSECCHINOTES = New Global.System.Data.DataColumn("SECCHINOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSECCHINOTES)
            Me.columnSECCHIONBOTTOM = New Global.System.Data.DataColumn("SECCHIONBOTTOM", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSECCHIONBOTTOM)
            Me.columnISSHOREBURNED = New Global.System.Data.DataColumn("ISSHOREBURNED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISSHOREBURNED)
            Me.columnBURNNOTES = New Global.System.Data.DataColumn("BURNNOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBURNNOTES)
            Me.columnBURNDATE = New Global.System.Data.DataColumn("BURNDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBURNDATE)
            Me.columnTHERMOKARSTEVIDENCE = New Global.System.Data.DataColumn("THERMOKARSTEVIDENCE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHERMOKARSTEVIDENCE)
            Me.columnTHERMOKARSTLOCATION = New Global.System.Data.DataColumn("THERMOKARSTLOCATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHERMOKARSTLOCATION)
            Me.columnTHERMOKARSTEXTENT = New Global.System.Data.DataColumn("THERMOKARSTEXTENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHERMOKARSTEXTENT)
            Me.columnTHERMOKARSTACTIVE = New Global.System.Data.DataColumn("THERMOKARSTACTIVE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHERMOKARSTACTIVE)
            Me.columnTHERMOKARSTMATERIAL = New Global.System.Data.DataColumn("THERMOKARSTMATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHERMOKARSTMATERIAL)
            Me.columnWOODFROGPRESENT = New Global.System.Data.DataColumn("WOODFROGPRESENT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWOODFROGPRESENT)
            Me.columnPERCENTCLOUDS = New Global.System.Data.DataColumn("PERCENTCLOUDS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERCENTCLOUDS)
            Me.columnWIND = New Global.System.Data.DataColumn("WIND", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIND)
            Me.columnPRECIPITATION = New Global.System.Data.DataColumn("PRECIPITATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECIPITATION)
            Me.columnPRECIPITATIONINTENSITY = New Global.System.Data.DataColumn("PRECIPITATIONINTENSITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECIPITATIONINTENSITY)
            Me.columnWEATHERCOMMENTS = New Global.System.Data.DataColumn("WEATHERCOMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWEATHERCOMMENTS)
            Me.columnSITECONDITIONSCOMMENTS = New Global.System.Data.DataColumn("SITECONDITIONSCOMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSITECONDITIONSCOMMENTS)
            Me.columnBIRD_ANIMAL_ACTIVITY = New Global.System.Data.DataColumn("BIRD_ANIMAL_ACTIVITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIRD_ANIMAL_ACTIVITY)
            Me.columnUPLAND_VIERECK_CLASS = New Global.System.Data.DataColumn("UPLAND_VIERECK_CLASS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPLAND_VIERECK_CLASS)
            Me.columnEMERGENT_VIERECK_CLASS = New Global.System.Data.DataColumn("EMERGENT_VIERECK_CLASS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMERGENT_VIERECK_CLASS)
            Me.columnSUBMERGENT_VIERECK_CLASS = New Global.System.Data.DataColumn("SUBMERGENT_VIERECK_CLASS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUBMERGENT_VIERECK_CLASS)
            Me.columnSUBMERGENT_COVER = New Global.System.Data.DataColumn("SUBMERGENT_COVER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUBMERGENT_COVER)
            Me.columnELODEA_SURVEYED = New Global.System.Data.DataColumn("ELODEA_SURVEYED", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELODEA_SURVEYED)
            Me.columnELODEA_PRESENT = New Global.System.Data.DataColumn("ELODEA_PRESENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELODEA_PRESENT)
            Me.columnELODEA_NOTES = New Global.System.Data.DataColumn("ELODEA_NOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELODEA_NOTES)
            Me.columnFISHPRESENT = New Global.System.Data.DataColumn("FISHPRESENT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFISHPRESENT)
            Me.columnWL_L_TO_S = New Global.System.Data.DataColumn("WL_L_TO_S", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWL_L_TO_S)
            Me.columnWL_L_TO_G = New Global.System.Data.DataColumn("WL_L_TO_G", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWL_L_TO_G)
            Me.columnWATERLEVEL_CM = New Global.System.Data.DataColumn("WATERLEVEL_CM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWATERLEVEL_CM)
            Me.columnMON_MOVED = New Global.System.Data.DataColumn("MON_MOVED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMON_MOVED)
            Me.columnLAKE_LEVEL_NOTES = New Global.System.Data.DataColumn("LAKE_LEVEL_NOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAKE_LEVEL_NOTES)
            Me.columnSTRATCLASS = New Global.System.Data.DataColumn("STRATCLASS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRATCLASS)
            Me.columnTURBIDITY_FIELD = New Global.System.Data.DataColumn("TURBIDITY_FIELD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTURBIDITY_FIELD)
            Me.columnEMERGENT_WIDTH = New Global.System.Data.DataColumn("EMERGENT_WIDTH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMERGENT_WIDTH)
            Me.columnSUBMERGENT_WIDTH = New Global.System.Data.DataColumn("SUBMERGENT_WIDTH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUBMERGENT_WIDTH)
            Me.columnLOONSPRESENT = New Global.System.Data.DataColumn("LOONSPRESENT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOONSPRESENT)
            Me.columnRUSTYBBIRDSPRESENT = New Global.System.Data.DataColumn("RUSTYBBIRDSPRESENT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUSTYBBIRDSPRESENT)
            Me.columnSDI = New Global.System.Data.DataColumn("SDI", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSDI)
            Me.columnLAKEVOLUME_GIS_M3 = New Global.System.Data.DataColumn("LAKEVOLUME_GIS_M3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAKEVOLUME_GIS_M3)
            Me.columnLAKEAREA_GIS_M2 = New Global.System.Data.DataColumn("LAKEAREA_GIS_M2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAKEAREA_GIS_M2)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPONDNAME, Me.columnSAMPLEDATE}, true))
            Me.columnPONDNAME.AllowDBNull = false
            Me.columnPONDNAME.MaxLength = 50
            Me.columnSAMPLEDATE.AllowDBNull = false
            Me.columnSAMPLEMETHOD.MaxLength = 10
            Me.columnOBSERVERS.MaxLength = 50
            Me.columnSECCHINOTES.MaxLength = 4000
            Me.columnBURNNOTES.MaxLength = 4000
            Me.columnTHERMOKARSTLOCATION.MaxLength = 4000
            Me.columnTHERMOKARSTEXTENT.MaxLength = 50
            Me.columnTHERMOKARSTACTIVE.MaxLength = 50
            Me.columnTHERMOKARSTMATERIAL.MaxLength = 50
            Me.columnPERCENTCLOUDS.MaxLength = 50
            Me.columnWIND.MaxLength = 50
            Me.columnPRECIPITATION.MaxLength = 50
            Me.columnPRECIPITATIONINTENSITY.MaxLength = 50
            Me.columnWEATHERCOMMENTS.MaxLength = 4000
            Me.columnSITECONDITIONSCOMMENTS.MaxLength = 4000
            Me.columnBIRD_ANIMAL_ACTIVITY.MaxLength = 4000
            Me.columnUPLAND_VIERECK_CLASS.MaxLength = 10
            Me.columnEMERGENT_VIERECK_CLASS.MaxLength = 10
            Me.columnSUBMERGENT_VIERECK_CLASS.MaxLength = 10
            Me.columnSUBMERGENT_COVER.MaxLength = 50
            Me.columnELODEA_SURVEYED.MaxLength = 10
            Me.columnELODEA_PRESENT.MaxLength = 10
            Me.columnELODEA_NOTES.MaxLength = 4000
            Me.columnLAKE_LEVEL_NOTES.MaxLength = 4000
            Me.columnSTRATCLASS.MaxLength = 50
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblEventsRow() As tblEventsRow
            Return CType(Me.NewRow,tblEventsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblEventsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblEventsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblEventsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblEventsRowChanged(Me, New tblEventsRowChangeEvent(CType(e.Row,tblEventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblEventsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblEventsRowChanging(Me, New tblEventsRowChangeEvent(CType(e.Row,tblEventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblEventsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblEventsRowDeleted(Me, New tblEventsRowChangeEvent(CType(e.Row,tblEventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblEventsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblEventsRowDeleting(Me, New tblEventsRowChangeEvent(CType(e.Row,tblEventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblEventsRow(ByVal row As tblEventsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblEventsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblFrogMonitorsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblFrogMonitorsRow)
        
        Private columnFM_Site As Global.System.Data.DataColumn
        
        Private columnFM_Sampledate As Global.System.Data.DataColumn
        
        Private columnFM_Sampletime As Global.System.Data.DataColumn
        
        Private columnFM_Observers As Global.System.Data.DataColumn
        
        Private columnFM_Deployment As Global.System.Data.DataColumn
        
        Private columnFM_Retrieval As Global.System.Data.DataColumn
        
        Private columnFM_BatteryChange As Global.System.Data.DataColumn
        
        Private columnFM_SDChange As Global.System.Data.DataColumn
        
        Private columnNotes As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblFrogMonitors"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FM_SiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFM_Site
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FM_SampledateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFM_Sampledate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FM_SampletimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFM_Sampletime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FM_ObserversColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFM_Observers
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FM_DeploymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFM_Deployment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FM_RetrievalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFM_Retrieval
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FM_BatteryChangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFM_BatteryChange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FM_SDChangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFM_SDChange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblFrogMonitorsRow
            Get
                Return CType(Me.Rows(index),tblFrogMonitorsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblFrogMonitorsRowChanging As tblFrogMonitorsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblFrogMonitorsRowChanged As tblFrogMonitorsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblFrogMonitorsRowDeleting As tblFrogMonitorsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblFrogMonitorsRowDeleted As tblFrogMonitorsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblFrogMonitorsRow(ByVal row As tblFrogMonitorsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblFrogMonitorsRow(ByVal FM_Site As String, ByVal FM_Sampledate As Date, ByVal FM_Sampletime As System.TimeSpan, ByVal FM_Observers As String, ByVal FM_Deployment As Boolean, ByVal FM_Retrieval As Boolean, ByVal FM_BatteryChange As Boolean, ByVal FM_SDChange As Boolean, ByVal Notes As String, ByVal row_timestamp() As Byte) As tblFrogMonitorsRow
            Dim rowtblFrogMonitorsRow As tblFrogMonitorsRow = CType(Me.NewRow,tblFrogMonitorsRow)
            Dim columnValuesArray() As Object = New Object() {FM_Site, FM_Sampledate, FM_Sampletime, FM_Observers, FM_Deployment, FM_Retrieval, FM_BatteryChange, FM_SDChange, Notes, row_timestamp}
            rowtblFrogMonitorsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblFrogMonitorsRow)
            Return rowtblFrogMonitorsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblFrogMonitorsDataTable = CType(MyBase.Clone,tblFrogMonitorsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblFrogMonitorsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFM_Site = MyBase.Columns("FM_Site")
            Me.columnFM_Sampledate = MyBase.Columns("FM_Sampledate")
            Me.columnFM_Sampletime = MyBase.Columns("FM_Sampletime")
            Me.columnFM_Observers = MyBase.Columns("FM_Observers")
            Me.columnFM_Deployment = MyBase.Columns("FM_Deployment")
            Me.columnFM_Retrieval = MyBase.Columns("FM_Retrieval")
            Me.columnFM_BatteryChange = MyBase.Columns("FM_BatteryChange")
            Me.columnFM_SDChange = MyBase.Columns("FM_SDChange")
            Me.columnNotes = MyBase.Columns("Notes")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFM_Site = New Global.System.Data.DataColumn("FM_Site", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFM_Site)
            Me.columnFM_Sampledate = New Global.System.Data.DataColumn("FM_Sampledate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFM_Sampledate)
            Me.columnFM_Sampletime = New Global.System.Data.DataColumn("FM_Sampletime", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFM_Sampletime)
            Me.columnFM_Observers = New Global.System.Data.DataColumn("FM_Observers", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFM_Observers)
            Me.columnFM_Deployment = New Global.System.Data.DataColumn("FM_Deployment", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFM_Deployment)
            Me.columnFM_Retrieval = New Global.System.Data.DataColumn("FM_Retrieval", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFM_Retrieval)
            Me.columnFM_BatteryChange = New Global.System.Data.DataColumn("FM_BatteryChange", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFM_BatteryChange)
            Me.columnFM_SDChange = New Global.System.Data.DataColumn("FM_SDChange", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFM_SDChange)
            Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotes)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.columnFM_Site.AllowDBNull = false
            Me.columnFM_Site.MaxLength = 50
            Me.columnFM_Sampledate.AllowDBNull = false
            Me.columnFM_Observers.MaxLength = 100
            Me.columnNotes.MaxLength = 2147483647
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblFrogMonitorsRow() As tblFrogMonitorsRow
            Return CType(Me.NewRow,tblFrogMonitorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblFrogMonitorsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblFrogMonitorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblFrogMonitorsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblFrogMonitorsRowChanged(Me, New tblFrogMonitorsRowChangeEvent(CType(e.Row,tblFrogMonitorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblFrogMonitorsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblFrogMonitorsRowChanging(Me, New tblFrogMonitorsRowChangeEvent(CType(e.Row,tblFrogMonitorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblFrogMonitorsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblFrogMonitorsRowDeleted(Me, New tblFrogMonitorsRowChangeEvent(CType(e.Row,tblFrogMonitorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblFrogMonitorsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblFrogMonitorsRowDeleting(Me, New tblFrogMonitorsRowChangeEvent(CType(e.Row,tblFrogMonitorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblFrogMonitorsRow(ByVal row As tblFrogMonitorsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblFrogMonitorsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblInvertebratesDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblInvertebratesRow)
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnSAMPLEDATE As Global.System.Data.DataColumn
        
        Private columnSAMPLENUMBER As Global.System.Data.DataColumn
        
        Private columnINVERTID As Global.System.Data.DataColumn
        
        Private columnLABSAMPLEID As Global.System.Data.DataColumn
        
        Private columnLABCOUNT As Global.System.Data.DataColumn
        
        Private columnTAXONSHORT As Global.System.Data.DataColumn
        
        Private columnLIFESTAGE As Global.System.Data.DataColumn
        
        Private columnLIFESTAGE2 As Global.System.Data.DataColumn
        
        Private columnVOUCHER As Global.System.Data.DataColumn
        
        Private columnCOMMENTS As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        Private columnTAXA_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblInvertebrates"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property INVERTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVERTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LABSAMPLEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLABSAMPLEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LABCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLABCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TAXONSHORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXONSHORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LIFESTAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIFESTAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LIFESTAGE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIFESTAGE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VOUCHERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVOUCHER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TAXA_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAXA_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblInvertebratesRow
            Get
                Return CType(Me.Rows(index),tblInvertebratesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblInvertebratesRowChanging As tblInvertebratesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblInvertebratesRowChanged As tblInvertebratesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblInvertebratesRowDeleting As tblInvertebratesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblInvertebratesRowDeleted As tblInvertebratesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblInvertebratesRow(ByVal row As tblInvertebratesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblInvertebratesRow( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal INVERTID As System.Guid,  _
                    ByVal LABSAMPLEID As String,  _
                    ByVal LABCOUNT As Integer,  _
                    ByVal TAXONSHORT As String,  _
                    ByVal LIFESTAGE As String,  _
                    ByVal LIFESTAGE2 As String,  _
                    ByVal VOUCHER As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte,  _
                    ByVal TAXA_ID As Double) As tblInvertebratesRow
            Dim rowtblInvertebratesRow As tblInvertebratesRow = CType(Me.NewRow,tblInvertebratesRow)
            Dim columnValuesArray() As Object = New Object() {PONDNAME, SAMPLEDATE, SAMPLENUMBER, INVERTID, LABSAMPLEID, LABCOUNT, TAXONSHORT, LIFESTAGE, LIFESTAGE2, VOUCHER, COMMENTS, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp, TAXA_ID}
            rowtblInvertebratesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblInvertebratesRow)
            Return rowtblInvertebratesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByPONDNAMESAMPLEDATESAMPLENUMBERINVERTID(ByVal PONDNAME As String, ByVal SAMPLEDATE As Date, ByVal SAMPLENUMBER As String, ByVal INVERTID As System.Guid) As tblInvertebratesRow
            Return CType(Me.Rows.Find(New Object() {PONDNAME, SAMPLEDATE, SAMPLENUMBER, INVERTID}),tblInvertebratesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblInvertebratesDataTable = CType(MyBase.Clone,tblInvertebratesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblInvertebratesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnSAMPLEDATE = MyBase.Columns("SAMPLEDATE")
            Me.columnSAMPLENUMBER = MyBase.Columns("SAMPLENUMBER")
            Me.columnINVERTID = MyBase.Columns("INVERTID")
            Me.columnLABSAMPLEID = MyBase.Columns("LABSAMPLEID")
            Me.columnLABCOUNT = MyBase.Columns("LABCOUNT")
            Me.columnTAXONSHORT = MyBase.Columns("TAXONSHORT")
            Me.columnLIFESTAGE = MyBase.Columns("LIFESTAGE")
            Me.columnLIFESTAGE2 = MyBase.Columns("LIFESTAGE2")
            Me.columnVOUCHER = MyBase.Columns("VOUCHER")
            Me.columnCOMMENTS = MyBase.Columns("COMMENTS")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
            Me.columnTAXA_ID = MyBase.Columns("TAXA_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnSAMPLEDATE = New Global.System.Data.DataColumn("SAMPLEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEDATE)
            Me.columnSAMPLENUMBER = New Global.System.Data.DataColumn("SAMPLENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLENUMBER)
            Me.columnINVERTID = New Global.System.Data.DataColumn("INVERTID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVERTID)
            Me.columnLABSAMPLEID = New Global.System.Data.DataColumn("LABSAMPLEID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLABSAMPLEID)
            Me.columnLABCOUNT = New Global.System.Data.DataColumn("LABCOUNT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLABCOUNT)
            Me.columnTAXONSHORT = New Global.System.Data.DataColumn("TAXONSHORT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXONSHORT)
            Me.columnLIFESTAGE = New Global.System.Data.DataColumn("LIFESTAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIFESTAGE)
            Me.columnLIFESTAGE2 = New Global.System.Data.DataColumn("LIFESTAGE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIFESTAGE2)
            Me.columnVOUCHER = New Global.System.Data.DataColumn("VOUCHER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVOUCHER)
            Me.columnCOMMENTS = New Global.System.Data.DataColumn("COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.columnTAXA_ID = New Global.System.Data.DataColumn("TAXA_ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAXA_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPONDNAME, Me.columnSAMPLEDATE, Me.columnSAMPLENUMBER, Me.columnINVERTID}, true))
            Me.columnPONDNAME.AllowDBNull = false
            Me.columnPONDNAME.MaxLength = 50
            Me.columnSAMPLEDATE.AllowDBNull = false
            Me.columnSAMPLENUMBER.AllowDBNull = false
            Me.columnSAMPLENUMBER.MaxLength = 50
            Me.columnINVERTID.AllowDBNull = false
            Me.columnLABSAMPLEID.MaxLength = 50
            Me.columnTAXONSHORT.MaxLength = 50
            Me.columnLIFESTAGE.MaxLength = 50
            Me.columnLIFESTAGE2.MaxLength = 50
            Me.columnVOUCHER.MaxLength = 50
            Me.columnCOMMENTS.MaxLength = 2147483647
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblInvertebratesRow() As tblInvertebratesRow
            Return CType(Me.NewRow,tblInvertebratesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblInvertebratesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblInvertebratesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblInvertebratesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblInvertebratesRowChanged(Me, New tblInvertebratesRowChangeEvent(CType(e.Row,tblInvertebratesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblInvertebratesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblInvertebratesRowChanging(Me, New tblInvertebratesRowChangeEvent(CType(e.Row,tblInvertebratesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblInvertebratesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblInvertebratesRowDeleted(Me, New tblInvertebratesRowChangeEvent(CType(e.Row,tblInvertebratesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblInvertebratesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblInvertebratesRowDeleting(Me, New tblInvertebratesRowChangeEvent(CType(e.Row,tblInvertebratesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblInvertebratesRow(ByVal row As tblInvertebratesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblInvertebratesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblInvertebrateSamplesDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblInvertebrateSamplesRow)
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnSAMPLEDATE As Global.System.Data.DataColumn
        
        Private columnSAMPLENUMBER As Global.System.Data.DataColumn
        
        Private columnLABSAMPLEID As Global.System.Data.DataColumn
        
        Private columnTRANSECTNUMBER As Global.System.Data.DataColumn
        
        Private columnSAMPLECOLLECTORS As Global.System.Data.DataColumn
        
        Private columnSTANDARDIZEDSWEEP As Global.System.Data.DataColumn
        
        Private columnQUALITATIVESURVEY As Global.System.Data.DataColumn
        
        Private columnDOMINANTHABITAT As Global.System.Data.DataColumn
        
        Private columnWATERDEPTH As Global.System.Data.DataColumn
        
        Private columnDISTANCETOSHORE As Global.System.Data.DataColumn
        
        Private columnNUM_OF_BOTTLES As Global.System.Data.DataColumn
        
        Private columnFRACTIONANALYZED As Global.System.Data.DataColumn
        
        Private columnCOMMENTS As Global.System.Data.DataColumn
        
        Private columnQUALITATIVESAMPLEHABITATDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnHABITATDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnSOURCEDB As Global.System.Data.DataColumn
        
        Private columnSHIPPING_DATE As Global.System.Data.DataColumn
        
        Private columnSHIPPING_INFO As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblInvertebrateSamples"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LABSAMPLEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLABSAMPLEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSECTNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSECTNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLECOLLECTORSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLECOLLECTORS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property STANDARDIZEDSWEEPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTANDARDIZEDSWEEP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property QUALITATIVESURVEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQUALITATIVESURVEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DOMINANTHABITATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOMINANTHABITAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WATERDEPTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWATERDEPTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DISTANCETOSHOREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISTANCETOSHORE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NUM_OF_BOTTLESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_OF_BOTTLES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FRACTIONANALYZEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFRACTIONANALYZED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property QUALITATIVESAMPLEHABITATDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQUALITATIVESAMPLEHABITATDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property HABITATDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHABITATDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SOURCEDBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOURCEDB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SHIPPING_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHIPPING_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SHIPPING_INFOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHIPPING_INFO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblInvertebrateSamplesRow
            Get
                Return CType(Me.Rows(index),tblInvertebrateSamplesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblInvertebrateSamplesRowChanging As tblInvertebrateSamplesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblInvertebrateSamplesRowChanged As tblInvertebrateSamplesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblInvertebrateSamplesRowDeleting As tblInvertebrateSamplesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblInvertebrateSamplesRowDeleted As tblInvertebrateSamplesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblInvertebrateSamplesRow(ByVal row As tblInvertebrateSamplesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblInvertebrateSamplesRow( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal LABSAMPLEID As String,  _
                    ByVal TRANSECTNUMBER As Integer,  _
                    ByVal SAMPLECOLLECTORS As String,  _
                    ByVal STANDARDIZEDSWEEP As Boolean,  _
                    ByVal QUALITATIVESURVEY As Boolean,  _
                    ByVal DOMINANTHABITAT As String,  _
                    ByVal WATERDEPTH As Double,  _
                    ByVal DISTANCETOSHORE As Double,  _
                    ByVal NUM_OF_BOTTLES As Decimal,  _
                    ByVal FRACTIONANALYZED As Double,  _
                    ByVal COMMENTS As String,  _
                    ByVal QUALITATIVESAMPLEHABITATDESCRIPTION As String,  _
                    ByVal HABITATDESCRIPTION As String,  _
                    ByVal SOURCEDB As String,  _
                    ByVal SHIPPING_DATE As Date,  _
                    ByVal SHIPPING_INFO As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte) As tblInvertebrateSamplesRow
            Dim rowtblInvertebrateSamplesRow As tblInvertebrateSamplesRow = CType(Me.NewRow,tblInvertebrateSamplesRow)
            Dim columnValuesArray() As Object = New Object() {PONDNAME, SAMPLEDATE, SAMPLENUMBER, LABSAMPLEID, TRANSECTNUMBER, SAMPLECOLLECTORS, STANDARDIZEDSWEEP, QUALITATIVESURVEY, DOMINANTHABITAT, WATERDEPTH, DISTANCETOSHORE, NUM_OF_BOTTLES, FRACTIONANALYZED, COMMENTS, QUALITATIVESAMPLEHABITATDESCRIPTION, HABITATDESCRIPTION, SOURCEDB, SHIPPING_DATE, SHIPPING_INFO, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp}
            rowtblInvertebrateSamplesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblInvertebrateSamplesRow)
            Return rowtblInvertebrateSamplesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByPONDNAMESAMPLEDATESAMPLENUMBER(ByVal PONDNAME As String, ByVal SAMPLEDATE As Date, ByVal SAMPLENUMBER As String) As tblInvertebrateSamplesRow
            Return CType(Me.Rows.Find(New Object() {PONDNAME, SAMPLEDATE, SAMPLENUMBER}),tblInvertebrateSamplesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblInvertebrateSamplesDataTable = CType(MyBase.Clone,tblInvertebrateSamplesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblInvertebrateSamplesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnSAMPLEDATE = MyBase.Columns("SAMPLEDATE")
            Me.columnSAMPLENUMBER = MyBase.Columns("SAMPLENUMBER")
            Me.columnLABSAMPLEID = MyBase.Columns("LABSAMPLEID")
            Me.columnTRANSECTNUMBER = MyBase.Columns("TRANSECTNUMBER")
            Me.columnSAMPLECOLLECTORS = MyBase.Columns("SAMPLECOLLECTORS")
            Me.columnSTANDARDIZEDSWEEP = MyBase.Columns("STANDARDIZEDSWEEP")
            Me.columnQUALITATIVESURVEY = MyBase.Columns("QUALITATIVESURVEY")
            Me.columnDOMINANTHABITAT = MyBase.Columns("DOMINANTHABITAT")
            Me.columnWATERDEPTH = MyBase.Columns("WATERDEPTH")
            Me.columnDISTANCETOSHORE = MyBase.Columns("DISTANCETOSHORE")
            Me.columnNUM_OF_BOTTLES = MyBase.Columns("NUM_OF_BOTTLES")
            Me.columnFRACTIONANALYZED = MyBase.Columns("FRACTIONANALYZED")
            Me.columnCOMMENTS = MyBase.Columns("COMMENTS")
            Me.columnQUALITATIVESAMPLEHABITATDESCRIPTION = MyBase.Columns("QUALITATIVESAMPLEHABITATDESCRIPTION")
            Me.columnHABITATDESCRIPTION = MyBase.Columns("HABITATDESCRIPTION")
            Me.columnSOURCEDB = MyBase.Columns("SOURCEDB")
            Me.columnSHIPPING_DATE = MyBase.Columns("SHIPPING_DATE")
            Me.columnSHIPPING_INFO = MyBase.Columns("SHIPPING_INFO")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnSAMPLEDATE = New Global.System.Data.DataColumn("SAMPLEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEDATE)
            Me.columnSAMPLENUMBER = New Global.System.Data.DataColumn("SAMPLENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLENUMBER)
            Me.columnLABSAMPLEID = New Global.System.Data.DataColumn("LABSAMPLEID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLABSAMPLEID)
            Me.columnTRANSECTNUMBER = New Global.System.Data.DataColumn("TRANSECTNUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSECTNUMBER)
            Me.columnSAMPLECOLLECTORS = New Global.System.Data.DataColumn("SAMPLECOLLECTORS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLECOLLECTORS)
            Me.columnSTANDARDIZEDSWEEP = New Global.System.Data.DataColumn("STANDARDIZEDSWEEP", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTANDARDIZEDSWEEP)
            Me.columnQUALITATIVESURVEY = New Global.System.Data.DataColumn("QUALITATIVESURVEY", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQUALITATIVESURVEY)
            Me.columnDOMINANTHABITAT = New Global.System.Data.DataColumn("DOMINANTHABITAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOMINANTHABITAT)
            Me.columnWATERDEPTH = New Global.System.Data.DataColumn("WATERDEPTH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWATERDEPTH)
            Me.columnDISTANCETOSHORE = New Global.System.Data.DataColumn("DISTANCETOSHORE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISTANCETOSHORE)
            Me.columnNUM_OF_BOTTLES = New Global.System.Data.DataColumn("NUM_OF_BOTTLES", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_OF_BOTTLES)
            Me.columnFRACTIONANALYZED = New Global.System.Data.DataColumn("FRACTIONANALYZED", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRACTIONANALYZED)
            Me.columnCOMMENTS = New Global.System.Data.DataColumn("COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS)
            Me.columnQUALITATIVESAMPLEHABITATDESCRIPTION = New Global.System.Data.DataColumn("QUALITATIVESAMPLEHABITATDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQUALITATIVESAMPLEHABITATDESCRIPTION)
            Me.columnHABITATDESCRIPTION = New Global.System.Data.DataColumn("HABITATDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHABITATDESCRIPTION)
            Me.columnSOURCEDB = New Global.System.Data.DataColumn("SOURCEDB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOURCEDB)
            Me.columnSHIPPING_DATE = New Global.System.Data.DataColumn("SHIPPING_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHIPPING_DATE)
            Me.columnSHIPPING_INFO = New Global.System.Data.DataColumn("SHIPPING_INFO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHIPPING_INFO)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPONDNAME, Me.columnSAMPLEDATE, Me.columnSAMPLENUMBER}, true))
            Me.columnPONDNAME.AllowDBNull = false
            Me.columnPONDNAME.MaxLength = 50
            Me.columnSAMPLEDATE.AllowDBNull = false
            Me.columnSAMPLENUMBER.AllowDBNull = false
            Me.columnSAMPLENUMBER.MaxLength = 50
            Me.columnLABSAMPLEID.MaxLength = 50
            Me.columnSAMPLECOLLECTORS.MaxLength = 50
            Me.columnDOMINANTHABITAT.MaxLength = 50
            Me.columnCOMMENTS.MaxLength = 2147483647
            Me.columnQUALITATIVESAMPLEHABITATDESCRIPTION.MaxLength = 2147483647
            Me.columnHABITATDESCRIPTION.MaxLength = 2147483647
            Me.columnSOURCEDB.MaxLength = 50
            Me.columnSHIPPING_INFO.MaxLength = 255
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblInvertebrateSamplesRow() As tblInvertebrateSamplesRow
            Return CType(Me.NewRow,tblInvertebrateSamplesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblInvertebrateSamplesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblInvertebrateSamplesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblInvertebrateSamplesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblInvertebrateSamplesRowChanged(Me, New tblInvertebrateSamplesRowChangeEvent(CType(e.Row,tblInvertebrateSamplesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblInvertebrateSamplesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblInvertebrateSamplesRowChanging(Me, New tblInvertebrateSamplesRowChangeEvent(CType(e.Row,tblInvertebrateSamplesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblInvertebrateSamplesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblInvertebrateSamplesRowDeleted(Me, New tblInvertebrateSamplesRowChangeEvent(CType(e.Row,tblInvertebrateSamplesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblInvertebrateSamplesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblInvertebrateSamplesRowDeleting(Me, New tblInvertebrateSamplesRowChangeEvent(CType(e.Row,tblInvertebrateSamplesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblInvertebrateSamplesRow(ByVal row As tblInvertebrateSamplesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblInvertebrateSamplesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblLoonsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblLoonsRow)
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnSAMPLEDATE As Global.System.Data.DataColumn
        
        Private columnLOONID As Global.System.Data.DataColumn
        
        Private columnOBSERVER As Global.System.Data.DataColumn
        
        Private columnSPECIES As Global.System.Data.DataColumn
        
        Private columnNUM_ADULTS As Global.System.Data.DataColumn
        
        Private columnNUM_YOUNG As Global.System.Data.DataColumn
        
        Private columnDETECTION_TYPE As Global.System.Data.DataColumn
        
        Private columnVEG_TYPE As Global.System.Data.DataColumn
        
        Private columnLATITUDE As Global.System.Data.DataColumn
        
        Private columnLONGITUDE As Global.System.Data.DataColumn
        
        Private columnCOMMENTS As Global.System.Data.DataColumn
        
        Private columnSOURCE As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnLoonsID As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblLoons"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LOONIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOONID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property OBSERVERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOBSERVER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SPECIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NUM_ADULTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_ADULTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NUM_YOUNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUM_YOUNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DETECTION_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDETECTION_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VEG_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVEG_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LATITUDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLATITUDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LONGITUDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLONGITUDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SOURCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOURCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LoonsIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoonsID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblLoonsRow
            Get
                Return CType(Me.Rows(index),tblLoonsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblLoonsRowChanging As tblLoonsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblLoonsRowChanged As tblLoonsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblLoonsRowDeleting As tblLoonsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblLoonsRowDeleted As tblLoonsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblLoonsRow(ByVal row As tblLoonsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblLoonsRow( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal LOONID As Long,  _
                    ByVal OBSERVER As String,  _
                    ByVal SPECIES As String,  _
                    ByVal NUM_ADULTS As Integer,  _
                    ByVal NUM_YOUNG As Integer,  _
                    ByVal DETECTION_TYPE As String,  _
                    ByVal VEG_TYPE As String,  _
                    ByVal LATITUDE As Double,  _
                    ByVal LONGITUDE As Double,  _
                    ByVal COMMENTS As String,  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte) As tblLoonsRow
            Dim rowtblLoonsRow As tblLoonsRow = CType(Me.NewRow,tblLoonsRow)
            Dim columnValuesArray() As Object = New Object() {PONDNAME, SAMPLEDATE, LOONID, OBSERVER, SPECIES, NUM_ADULTS, NUM_YOUNG, DETECTION_TYPE, VEG_TYPE, LATITUDE, LONGITUDE, COMMENTS, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Nothing, row_timestamp}
            rowtblLoonsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblLoonsRow)
            Return rowtblLoonsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByLoonsID(ByVal LoonsID As Integer) As tblLoonsRow
            Return CType(Me.Rows.Find(New Object() {LoonsID}),tblLoonsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblLoonsDataTable = CType(MyBase.Clone,tblLoonsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblLoonsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnSAMPLEDATE = MyBase.Columns("SAMPLEDATE")
            Me.columnLOONID = MyBase.Columns("LOONID")
            Me.columnOBSERVER = MyBase.Columns("OBSERVER")
            Me.columnSPECIES = MyBase.Columns("SPECIES")
            Me.columnNUM_ADULTS = MyBase.Columns("NUM_ADULTS")
            Me.columnNUM_YOUNG = MyBase.Columns("NUM_YOUNG")
            Me.columnDETECTION_TYPE = MyBase.Columns("DETECTION_TYPE")
            Me.columnVEG_TYPE = MyBase.Columns("VEG_TYPE")
            Me.columnLATITUDE = MyBase.Columns("LATITUDE")
            Me.columnLONGITUDE = MyBase.Columns("LONGITUDE")
            Me.columnCOMMENTS = MyBase.Columns("COMMENTS")
            Me.columnSOURCE = MyBase.Columns("SOURCE")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnLoonsID = MyBase.Columns("LoonsID")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnSAMPLEDATE = New Global.System.Data.DataColumn("SAMPLEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEDATE)
            Me.columnLOONID = New Global.System.Data.DataColumn("LOONID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOONID)
            Me.columnOBSERVER = New Global.System.Data.DataColumn("OBSERVER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOBSERVER)
            Me.columnSPECIES = New Global.System.Data.DataColumn("SPECIES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIES)
            Me.columnNUM_ADULTS = New Global.System.Data.DataColumn("NUM_ADULTS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_ADULTS)
            Me.columnNUM_YOUNG = New Global.System.Data.DataColumn("NUM_YOUNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUM_YOUNG)
            Me.columnDETECTION_TYPE = New Global.System.Data.DataColumn("DETECTION_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDETECTION_TYPE)
            Me.columnVEG_TYPE = New Global.System.Data.DataColumn("VEG_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVEG_TYPE)
            Me.columnLATITUDE = New Global.System.Data.DataColumn("LATITUDE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLATITUDE)
            Me.columnLONGITUDE = New Global.System.Data.DataColumn("LONGITUDE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLONGITUDE)
            Me.columnCOMMENTS = New Global.System.Data.DataColumn("COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS)
            Me.columnSOURCE = New Global.System.Data.DataColumn("SOURCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOURCE)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnLoonsID = New Global.System.Data.DataColumn("LoonsID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoonsID)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLoonsID}, true))
            Me.columnPONDNAME.AllowDBNull = false
            Me.columnPONDNAME.MaxLength = 50
            Me.columnSAMPLEDATE.AllowDBNull = false
            Me.columnLOONID.AllowDBNull = false
            Me.columnOBSERVER.MaxLength = 50
            Me.columnSPECIES.MaxLength = 50
            Me.columnDETECTION_TYPE.MaxLength = 50
            Me.columnVEG_TYPE.MaxLength = 50
            Me.columnCOMMENTS.MaxLength = 2147483647
            Me.columnSOURCE.MaxLength = 100
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnLoonsID.AutoIncrement = true
            Me.columnLoonsID.AutoIncrementSeed = -1
            Me.columnLoonsID.AutoIncrementStep = -1
            Me.columnLoonsID.AllowDBNull = false
            Me.columnLoonsID.ReadOnly = true
            Me.columnLoonsID.Unique = true
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblLoonsRow() As tblLoonsRow
            Return CType(Me.NewRow,tblLoonsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblLoonsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblLoonsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblLoonsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblLoonsRowChanged(Me, New tblLoonsRowChangeEvent(CType(e.Row,tblLoonsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblLoonsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblLoonsRowChanging(Me, New tblLoonsRowChangeEvent(CType(e.Row,tblLoonsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblLoonsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblLoonsRowDeleted(Me, New tblLoonsRowChangeEvent(CType(e.Row,tblLoonsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblLoonsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblLoonsRowDeleting(Me, New tblLoonsRowChangeEvent(CType(e.Row,tblLoonsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblLoonsRow(ByVal row As tblLoonsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblLoonsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblMonumentsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblMonumentsRow)
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnM_DATE As Global.System.Data.DataColumn
        
        Private columnM_LAT_NAD83 As Global.System.Data.DataColumn
        
        Private columnM_LON_NAD83 As Global.System.Data.DataColumn
        
        Private columnM_LAT_WGS84 As Global.System.Data.DataColumn
        
        Private columnM_LON_WGS84 As Global.System.Data.DataColumn
        
        Private columnM_ELEVATION As Global.System.Data.DataColumn
        
        Private columnM_LOC_TYPE As Global.System.Data.DataColumn
        
        Private columnM_LOC_MATERIAL As Global.System.Data.DataColumn
        
        Private columnM_LOC_NOTES As Global.System.Data.DataColumn
        
        Private columnM_LOC_COMMENTS As Global.System.Data.DataColumn
        
        Private columnM_ACCESSTYPE As Global.System.Data.DataColumn
        
        Private columnM_GRTS_NUM As Global.System.Data.DataColumn
        
        Private columnM_GPSTYPE As Global.System.Data.DataColumn
        
        Private columnM_GPSTIME As Global.System.Data.DataColumn
        
        Private columnM_CORR_TYPE As Global.System.Data.DataColumn
        
        Private columnM_EST_H_ERROR As Global.System.Data.DataColumn
        
        Private columnM_EST_V_ERROR As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblMonuments"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_LAT_NAD83Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_LAT_NAD83
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_LON_NAD83Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_LON_NAD83
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_LAT_WGS84Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_LAT_WGS84
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_LON_WGS84Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_LON_WGS84
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_ELEVATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_ELEVATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_LOC_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_LOC_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_LOC_MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_LOC_MATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_LOC_NOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_LOC_NOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_LOC_COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_LOC_COMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_ACCESSTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_ACCESSTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_GRTS_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_GRTS_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_GPSTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_GPSTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_GPSTIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_GPSTIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_CORR_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_CORR_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_EST_H_ERRORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_EST_H_ERROR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property M_EST_V_ERRORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnM_EST_V_ERROR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblMonumentsRow
            Get
                Return CType(Me.Rows(index),tblMonumentsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMonumentsRowChanging As tblMonumentsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMonumentsRowChanged As tblMonumentsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMonumentsRowDeleting As tblMonumentsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblMonumentsRowDeleted As tblMonumentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblMonumentsRow(ByVal row As tblMonumentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblMonumentsRow( _
                    ByVal parenttblPondsRowByFK_tblMonuments_tblPonds As tblPondsRow,  _
                    ByVal M_DATE As Date,  _
                    ByVal M_LAT_NAD83 As Double,  _
                    ByVal M_LON_NAD83 As Double,  _
                    ByVal M_LAT_WGS84 As Double,  _
                    ByVal M_LON_WGS84 As Double,  _
                    ByVal M_ELEVATION As Double,  _
                    ByVal M_LOC_TYPE As String,  _
                    ByVal M_LOC_MATERIAL As String,  _
                    ByVal M_LOC_NOTES As String,  _
                    ByVal M_LOC_COMMENTS As String,  _
                    ByVal M_ACCESSTYPE As String,  _
                    ByVal M_GRTS_NUM As String,  _
                    ByVal M_GPSTYPE As String,  _
                    ByVal M_GPSTIME As Date,  _
                    ByVal M_CORR_TYPE As String,  _
                    ByVal M_EST_H_ERROR As Double,  _
                    ByVal M_EST_V_ERROR As Double,  _
                    ByVal row_timestamp() As Byte) As tblMonumentsRow
            Dim rowtblMonumentsRow As tblMonumentsRow = CType(Me.NewRow,tblMonumentsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, M_DATE, M_LAT_NAD83, M_LON_NAD83, M_LAT_WGS84, M_LON_WGS84, M_ELEVATION, M_LOC_TYPE, M_LOC_MATERIAL, M_LOC_NOTES, M_LOC_COMMENTS, M_ACCESSTYPE, M_GRTS_NUM, M_GPSTYPE, M_GPSTIME, M_CORR_TYPE, M_EST_H_ERROR, M_EST_V_ERROR, row_timestamp}
            If (Not (parenttblPondsRowByFK_tblMonuments_tblPonds) Is Nothing) Then
                columnValuesArray(0) = parenttblPondsRowByFK_tblMonuments_tblPonds(0)
            End If
            rowtblMonumentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblMonumentsRow)
            Return rowtblMonumentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByPONDNAMEM_DATE(ByVal PONDNAME As String, ByVal M_DATE As Date) As tblMonumentsRow
            Return CType(Me.Rows.Find(New Object() {PONDNAME, M_DATE}),tblMonumentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblMonumentsDataTable = CType(MyBase.Clone,tblMonumentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblMonumentsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnM_DATE = MyBase.Columns("M_DATE")
            Me.columnM_LAT_NAD83 = MyBase.Columns("M_LAT_NAD83")
            Me.columnM_LON_NAD83 = MyBase.Columns("M_LON_NAD83")
            Me.columnM_LAT_WGS84 = MyBase.Columns("M_LAT_WGS84")
            Me.columnM_LON_WGS84 = MyBase.Columns("M_LON_WGS84")
            Me.columnM_ELEVATION = MyBase.Columns("M_ELEVATION")
            Me.columnM_LOC_TYPE = MyBase.Columns("M_LOC_TYPE")
            Me.columnM_LOC_MATERIAL = MyBase.Columns("M_LOC_MATERIAL")
            Me.columnM_LOC_NOTES = MyBase.Columns("M_LOC_NOTES")
            Me.columnM_LOC_COMMENTS = MyBase.Columns("M_LOC_COMMENTS")
            Me.columnM_ACCESSTYPE = MyBase.Columns("M_ACCESSTYPE")
            Me.columnM_GRTS_NUM = MyBase.Columns("M_GRTS_NUM")
            Me.columnM_GPSTYPE = MyBase.Columns("M_GPSTYPE")
            Me.columnM_GPSTIME = MyBase.Columns("M_GPSTIME")
            Me.columnM_CORR_TYPE = MyBase.Columns("M_CORR_TYPE")
            Me.columnM_EST_H_ERROR = MyBase.Columns("M_EST_H_ERROR")
            Me.columnM_EST_V_ERROR = MyBase.Columns("M_EST_V_ERROR")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnM_DATE = New Global.System.Data.DataColumn("M_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_DATE)
            Me.columnM_LAT_NAD83 = New Global.System.Data.DataColumn("M_LAT_NAD83", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_LAT_NAD83)
            Me.columnM_LON_NAD83 = New Global.System.Data.DataColumn("M_LON_NAD83", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_LON_NAD83)
            Me.columnM_LAT_WGS84 = New Global.System.Data.DataColumn("M_LAT_WGS84", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_LAT_WGS84)
            Me.columnM_LON_WGS84 = New Global.System.Data.DataColumn("M_LON_WGS84", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_LON_WGS84)
            Me.columnM_ELEVATION = New Global.System.Data.DataColumn("M_ELEVATION", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_ELEVATION)
            Me.columnM_LOC_TYPE = New Global.System.Data.DataColumn("M_LOC_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_LOC_TYPE)
            Me.columnM_LOC_MATERIAL = New Global.System.Data.DataColumn("M_LOC_MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_LOC_MATERIAL)
            Me.columnM_LOC_NOTES = New Global.System.Data.DataColumn("M_LOC_NOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_LOC_NOTES)
            Me.columnM_LOC_COMMENTS = New Global.System.Data.DataColumn("M_LOC_COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_LOC_COMMENTS)
            Me.columnM_ACCESSTYPE = New Global.System.Data.DataColumn("M_ACCESSTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_ACCESSTYPE)
            Me.columnM_GRTS_NUM = New Global.System.Data.DataColumn("M_GRTS_NUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_GRTS_NUM)
            Me.columnM_GPSTYPE = New Global.System.Data.DataColumn("M_GPSTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_GPSTYPE)
            Me.columnM_GPSTIME = New Global.System.Data.DataColumn("M_GPSTIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_GPSTIME)
            Me.columnM_CORR_TYPE = New Global.System.Data.DataColumn("M_CORR_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_CORR_TYPE)
            Me.columnM_EST_H_ERROR = New Global.System.Data.DataColumn("M_EST_H_ERROR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_EST_H_ERROR)
            Me.columnM_EST_V_ERROR = New Global.System.Data.DataColumn("M_EST_V_ERROR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM_EST_V_ERROR)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPONDNAME, Me.columnM_DATE}, true))
            Me.columnPONDNAME.AllowDBNull = false
            Me.columnPONDNAME.MaxLength = 50
            Me.columnM_DATE.AllowDBNull = false
            Me.columnM_LOC_TYPE.MaxLength = 50
            Me.columnM_LOC_MATERIAL.MaxLength = 50
            Me.columnM_LOC_NOTES.MaxLength = 2147483647
            Me.columnM_LOC_COMMENTS.MaxLength = 2147483647
            Me.columnM_ACCESSTYPE.MaxLength = 50
            Me.columnM_GRTS_NUM.MaxLength = 50
            Me.columnM_GPSTYPE.MaxLength = 50
            Me.columnM_CORR_TYPE.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblMonumentsRow() As tblMonumentsRow
            Return CType(Me.NewRow,tblMonumentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblMonumentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblMonumentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblMonumentsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblMonumentsRowChanged(Me, New tblMonumentsRowChangeEvent(CType(e.Row,tblMonumentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblMonumentsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblMonumentsRowChanging(Me, New tblMonumentsRowChangeEvent(CType(e.Row,tblMonumentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblMonumentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblMonumentsRowDeleted(Me, New tblMonumentsRowChangeEvent(CType(e.Row,tblMonumentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblMonumentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblMonumentsRowDeleting(Me, New tblMonumentsRowChangeEvent(CType(e.Row,tblMonumentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblMonumentsRow(ByVal row As tblMonumentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblMonumentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblPhotosDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblPhotosRow)
        
        Private columnPHOTO_ID As Global.System.Data.DataColumn
        
        Private columnEVENT_ID As Global.System.Data.DataColumn
        
        Private columnDATA_LOCATION_ID As Global.System.Data.DataColumn
        
        Private columnEVENT_GROUP_ID As Global.System.Data.DataColumn
        
        Private columnSITE_ID As Global.System.Data.DataColumn
        
        Private columnSITE_NAME As Global.System.Data.DataColumn
        
        Private columnUNIT_CODE As Global.System.Data.DataColumn
        
        Private columnWAYPOINT As Global.System.Data.DataColumn
        
        Private columnLOCATION As Global.System.Data.DataColumn
        
        Private columnDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnDATE As Global.System.Data.DataColumn
        
        Private columnTIME As Global.System.Data.DataColumn
        
        Private columnPHOTO_PATH As Global.System.Data.DataColumn
        
        Private columnSOURCE_FILE As Global.System.Data.DataColumn
        
        Private columnPHOTOGRAPHER As Global.System.Data.DataColumn
        
        Private columnTYPE As Global.System.Data.DataColumn
        
        Private columnCOLLECTION As Global.System.Data.DataColumn
        
        Private columnPUBLISHER As Global.System.Data.DataColumn
        
        Private columnFORMAT As Global.System.Data.DataColumn
        
        Private columnCREDITS As Global.System.Data.DataColumn
        
        Private columnDISTRIBUTION_RESTRICTIONS As Global.System.Data.DataColumn
        
        Private columnKEYWORDS As Global.System.Data.DataColumn
        
        Private columnDRAWING As Global.System.Data.DataColumn
        
        Private columnFLAGGED As Global.System.Data.DataColumn
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnSOURCEDB As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblPhotos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PHOTO_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHOTO_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property EVENT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEVENT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DATA_LOCATION_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATA_LOCATION_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property EVENT_GROUP_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEVENT_GROUP_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SITE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSITE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SITE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSITE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property UNIT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WAYPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAYPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LOCATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOCATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PHOTO_PATHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHOTO_PATH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SOURCE_FILEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOURCE_FILE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PHOTOGRAPHERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHOTOGRAPHER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property COLLECTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLLECTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PUBLISHERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPUBLISHER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FORMATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORMAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CREDITSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREDITS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DISTRIBUTION_RESTRICTIONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISTRIBUTION_RESTRICTIONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property KEYWORDSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKEYWORDS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DRAWINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDRAWING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FLAGGEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFLAGGED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SOURCEDBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOURCEDB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblPhotosRow
            Get
                Return CType(Me.Rows(index),tblPhotosRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblPhotosRowChanging As tblPhotosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblPhotosRowChanged As tblPhotosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblPhotosRowDeleting As tblPhotosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblPhotosRowDeleted As tblPhotosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblPhotosRow(ByVal row As tblPhotosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblPhotosRow( _
                    ByVal PHOTO_ID As Integer,  _
                    ByVal EVENT_ID As String,  _
                    ByVal DATA_LOCATION_ID As Integer,  _
                    ByVal EVENT_GROUP_ID As Integer,  _
                    ByVal SITE_ID As String,  _
                    ByVal SITE_NAME As String,  _
                    ByVal UNIT_CODE As String,  _
                    ByVal WAYPOINT As Integer,  _
                    ByVal LOCATION As String,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal _DATE As Date,  _
                    ByVal TIME As Date,  _
                    ByVal PHOTO_PATH As String,  _
                    ByVal SOURCE_FILE As String,  _
                    ByVal PHOTOGRAPHER As String,  _
                    ByVal TYPE As String,  _
                    ByVal COLLECTION As String,  _
                    ByVal PUBLISHER As String,  _
                    ByVal FORMAT As String,  _
                    ByVal CREDITS As String,  _
                    ByVal DISTRIBUTION_RESTRICTIONS As String,  _
                    ByVal KEYWORDS As String,  _
                    ByVal DRAWING() As Byte,  _
                    ByVal FLAGGED As Boolean,  _
                    ByVal PONDNAME As String,  _
                    ByVal SOURCEDB As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte) As tblPhotosRow
            Dim rowtblPhotosRow As tblPhotosRow = CType(Me.NewRow,tblPhotosRow)
            Dim columnValuesArray() As Object = New Object() {PHOTO_ID, EVENT_ID, DATA_LOCATION_ID, EVENT_GROUP_ID, SITE_ID, SITE_NAME, UNIT_CODE, WAYPOINT, LOCATION, DESCRIPTION, _DATE, TIME, PHOTO_PATH, SOURCE_FILE, PHOTOGRAPHER, TYPE, COLLECTION, PUBLISHER, FORMAT, CREDITS, DISTRIBUTION_RESTRICTIONS, KEYWORDS, DRAWING, FLAGGED, PONDNAME, SOURCEDB, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp}
            rowtblPhotosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblPhotosRow)
            Return rowtblPhotosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByPHOTO_ID(ByVal PHOTO_ID As Integer) As tblPhotosRow
            Return CType(Me.Rows.Find(New Object() {PHOTO_ID}),tblPhotosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblPhotosDataTable = CType(MyBase.Clone,tblPhotosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblPhotosDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPHOTO_ID = MyBase.Columns("PHOTO_ID")
            Me.columnEVENT_ID = MyBase.Columns("EVENT_ID")
            Me.columnDATA_LOCATION_ID = MyBase.Columns("DATA_LOCATION_ID")
            Me.columnEVENT_GROUP_ID = MyBase.Columns("EVENT_GROUP_ID")
            Me.columnSITE_ID = MyBase.Columns("SITE_ID")
            Me.columnSITE_NAME = MyBase.Columns("SITE_NAME")
            Me.columnUNIT_CODE = MyBase.Columns("UNIT_CODE")
            Me.columnWAYPOINT = MyBase.Columns("WAYPOINT")
            Me.columnLOCATION = MyBase.Columns("LOCATION")
            Me.columnDESCRIPTION = MyBase.Columns("DESCRIPTION")
            Me.columnDATE = MyBase.Columns("DATE")
            Me.columnTIME = MyBase.Columns("TIME")
            Me.columnPHOTO_PATH = MyBase.Columns("PHOTO_PATH")
            Me.columnSOURCE_FILE = MyBase.Columns("SOURCE_FILE")
            Me.columnPHOTOGRAPHER = MyBase.Columns("PHOTOGRAPHER")
            Me.columnTYPE = MyBase.Columns("TYPE")
            Me.columnCOLLECTION = MyBase.Columns("COLLECTION")
            Me.columnPUBLISHER = MyBase.Columns("PUBLISHER")
            Me.columnFORMAT = MyBase.Columns("FORMAT")
            Me.columnCREDITS = MyBase.Columns("CREDITS")
            Me.columnDISTRIBUTION_RESTRICTIONS = MyBase.Columns("DISTRIBUTION_RESTRICTIONS")
            Me.columnKEYWORDS = MyBase.Columns("KEYWORDS")
            Me.columnDRAWING = MyBase.Columns("DRAWING")
            Me.columnFLAGGED = MyBase.Columns("FLAGGED")
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnSOURCEDB = MyBase.Columns("SOURCEDB")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPHOTO_ID = New Global.System.Data.DataColumn("PHOTO_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHOTO_ID)
            Me.columnEVENT_ID = New Global.System.Data.DataColumn("EVENT_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEVENT_ID)
            Me.columnDATA_LOCATION_ID = New Global.System.Data.DataColumn("DATA_LOCATION_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATA_LOCATION_ID)
            Me.columnEVENT_GROUP_ID = New Global.System.Data.DataColumn("EVENT_GROUP_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEVENT_GROUP_ID)
            Me.columnSITE_ID = New Global.System.Data.DataColumn("SITE_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSITE_ID)
            Me.columnSITE_NAME = New Global.System.Data.DataColumn("SITE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSITE_NAME)
            Me.columnUNIT_CODE = New Global.System.Data.DataColumn("UNIT_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_CODE)
            Me.columnWAYPOINT = New Global.System.Data.DataColumn("WAYPOINT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAYPOINT)
            Me.columnLOCATION = New Global.System.Data.DataColumn("LOCATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOCATION)
            Me.columnDESCRIPTION = New Global.System.Data.DataColumn("DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTION)
            Me.columnDATE = New Global.System.Data.DataColumn("DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDATE.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DATEColumn")
            Me.columnDATE.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDATE")
            Me.columnDATE.ExtendedProperties.Add("Generator_UserColumnName", "DATE")
            MyBase.Columns.Add(Me.columnDATE)
            Me.columnTIME = New Global.System.Data.DataColumn("TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIME)
            Me.columnPHOTO_PATH = New Global.System.Data.DataColumn("PHOTO_PATH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHOTO_PATH)
            Me.columnSOURCE_FILE = New Global.System.Data.DataColumn("SOURCE_FILE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOURCE_FILE)
            Me.columnPHOTOGRAPHER = New Global.System.Data.DataColumn("PHOTOGRAPHER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHOTOGRAPHER)
            Me.columnTYPE = New Global.System.Data.DataColumn("TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTYPE)
            Me.columnCOLLECTION = New Global.System.Data.DataColumn("COLLECTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLLECTION)
            Me.columnPUBLISHER = New Global.System.Data.DataColumn("PUBLISHER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPUBLISHER)
            Me.columnFORMAT = New Global.System.Data.DataColumn("FORMAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORMAT)
            Me.columnCREDITS = New Global.System.Data.DataColumn("CREDITS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREDITS)
            Me.columnDISTRIBUTION_RESTRICTIONS = New Global.System.Data.DataColumn("DISTRIBUTION_RESTRICTIONS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISTRIBUTION_RESTRICTIONS)
            Me.columnKEYWORDS = New Global.System.Data.DataColumn("KEYWORDS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKEYWORDS)
            Me.columnDRAWING = New Global.System.Data.DataColumn("DRAWING", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDRAWING)
            Me.columnFLAGGED = New Global.System.Data.DataColumn("FLAGGED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFLAGGED)
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnSOURCEDB = New Global.System.Data.DataColumn("SOURCEDB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOURCEDB)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPHOTO_ID}, true))
            Me.columnPHOTO_ID.AllowDBNull = false
            Me.columnPHOTO_ID.Unique = true
            Me.columnEVENT_ID.MaxLength = 50
            Me.columnSITE_ID.AllowDBNull = false
            Me.columnSITE_ID.MaxLength = 50
            Me.columnSITE_NAME.MaxLength = 255
            Me.columnUNIT_CODE.MaxLength = 12
            Me.columnLOCATION.MaxLength = 255
            Me.columnDESCRIPTION.MaxLength = 2147483647
            Me.columnPHOTO_PATH.AllowDBNull = false
            Me.columnPHOTO_PATH.MaxLength = 255
            Me.columnSOURCE_FILE.MaxLength = 255
            Me.columnPHOTOGRAPHER.MaxLength = 50
            Me.columnTYPE.MaxLength = 50
            Me.columnCOLLECTION.MaxLength = 255
            Me.columnPUBLISHER.MaxLength = 255
            Me.columnFORMAT.MaxLength = 255
            Me.columnCREDITS.MaxLength = 255
            Me.columnDISTRIBUTION_RESTRICTIONS.MaxLength = 255
            Me.columnKEYWORDS.MaxLength = 255
            Me.columnPONDNAME.MaxLength = 50
            Me.columnSOURCEDB.MaxLength = 50
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblPhotosRow() As tblPhotosRow
            Return CType(Me.NewRow,tblPhotosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblPhotosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblPhotosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblPhotosRowChangedEvent) Is Nothing) Then
                RaiseEvent tblPhotosRowChanged(Me, New tblPhotosRowChangeEvent(CType(e.Row,tblPhotosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblPhotosRowChangingEvent) Is Nothing) Then
                RaiseEvent tblPhotosRowChanging(Me, New tblPhotosRowChangeEvent(CType(e.Row,tblPhotosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblPhotosRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblPhotosRowDeleted(Me, New tblPhotosRowChangeEvent(CType(e.Row,tblPhotosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblPhotosRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblPhotosRowDeleting(Me, New tblPhotosRowChangeEvent(CType(e.Row,tblPhotosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblPhotosRow(ByVal row As tblPhotosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblPhotosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblPondDepthsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblPondDepthsRow)
        
        Private columnLAKEDEPTHID As Global.System.Data.DataColumn
        
        Private columnSAMPLEDATE As Global.System.Data.DataColumn
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnGPS_DATE As Global.System.Data.DataColumn
        
        Private columnGPS_TIME As Global.System.Data.DataColumn
        
        Private columnDEPTH As Global.System.Data.DataColumn
        
        Private columnLONGITUDE As Global.System.Data.DataColumn
        
        Private columnLATITUDE As Global.System.Data.DataColumn
        
        Private columnCOMMENTS_DEPTHS As Global.System.Data.DataColumn
        
        Private columnHEIGHT As Global.System.Data.DataColumn
        
        Private columnFEAT_NAME As Global.System.Data.DataColumn
        
        Private columnDATAFILE As Global.System.Data.DataColumn
        
        Private columnGPS_HEIGHT As Global.System.Data.DataColumn
        
        Private columnVERT_PREC As Global.System.Data.DataColumn
        
        Private columnHORZ_PREC As Global.System.Data.DataColumn
        
        Private columnPOINT_ID As Global.System.Data.DataColumn
        
        Private columnSOURCE As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnPondDepthsID As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblPondDepths"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LAKEDEPTHIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAKEDEPTHID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property GPS_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGPS_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property GPS_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGPS_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DEPTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEPTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LONGITUDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLONGITUDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LATITUDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLATITUDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property COMMENTS_DEPTHSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS_DEPTHS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property HEIGHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEIGHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FEAT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEAT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DATAFILEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATAFILE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property GPS_HEIGHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGPS_HEIGHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VERT_PRECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVERT_PREC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property HORZ_PRECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHORZ_PREC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property POINT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOINT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SOURCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOURCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PondDepthsIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPondDepthsID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblPondDepthsRow
            Get
                Return CType(Me.Rows(index),tblPondDepthsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblPondDepthsRowChanging As tblPondDepthsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblPondDepthsRowChanged As tblPondDepthsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblPondDepthsRowDeleting As tblPondDepthsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblPondDepthsRowDeleted As tblPondDepthsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblPondDepthsRow(ByVal row As tblPondDepthsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblPondDepthsRow( _
                    ByVal LAKEDEPTHID As Long,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal PONDNAME As String,  _
                    ByVal GPS_DATE As Date,  _
                    ByVal GPS_TIME As Date,  _
                    ByVal DEPTH As Double,  _
                    ByVal LONGITUDE As Double,  _
                    ByVal LATITUDE As Double,  _
                    ByVal COMMENTS_DEPTHS As String,  _
                    ByVal HEIGHT As Double,  _
                    ByVal FEAT_NAME As String,  _
                    ByVal DATAFILE As String,  _
                    ByVal GPS_HEIGHT As Double,  _
                    ByVal VERT_PREC As Double,  _
                    ByVal HORZ_PREC As Double,  _
                    ByVal POINT_ID As Integer,  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte) As tblPondDepthsRow
            Dim rowtblPondDepthsRow As tblPondDepthsRow = CType(Me.NewRow,tblPondDepthsRow)
            Dim columnValuesArray() As Object = New Object() {LAKEDEPTHID, SAMPLEDATE, PONDNAME, GPS_DATE, GPS_TIME, DEPTH, LONGITUDE, LATITUDE, COMMENTS_DEPTHS, HEIGHT, FEAT_NAME, DATAFILE, GPS_HEIGHT, VERT_PREC, HORZ_PREC, POINT_ID, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Nothing, row_timestamp}
            rowtblPondDepthsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblPondDepthsRow)
            Return rowtblPondDepthsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByPondDepthsID(ByVal PondDepthsID As Integer) As tblPondDepthsRow
            Return CType(Me.Rows.Find(New Object() {PondDepthsID}),tblPondDepthsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblPondDepthsDataTable = CType(MyBase.Clone,tblPondDepthsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblPondDepthsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnLAKEDEPTHID = MyBase.Columns("LAKEDEPTHID")
            Me.columnSAMPLEDATE = MyBase.Columns("SAMPLEDATE")
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnGPS_DATE = MyBase.Columns("GPS_DATE")
            Me.columnGPS_TIME = MyBase.Columns("GPS_TIME")
            Me.columnDEPTH = MyBase.Columns("DEPTH")
            Me.columnLONGITUDE = MyBase.Columns("LONGITUDE")
            Me.columnLATITUDE = MyBase.Columns("LATITUDE")
            Me.columnCOMMENTS_DEPTHS = MyBase.Columns("COMMENTS_DEPTHS")
            Me.columnHEIGHT = MyBase.Columns("HEIGHT")
            Me.columnFEAT_NAME = MyBase.Columns("FEAT_NAME")
            Me.columnDATAFILE = MyBase.Columns("DATAFILE")
            Me.columnGPS_HEIGHT = MyBase.Columns("GPS_HEIGHT")
            Me.columnVERT_PREC = MyBase.Columns("VERT_PREC")
            Me.columnHORZ_PREC = MyBase.Columns("HORZ_PREC")
            Me.columnPOINT_ID = MyBase.Columns("POINT_ID")
            Me.columnSOURCE = MyBase.Columns("SOURCE")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnPondDepthsID = MyBase.Columns("PondDepthsID")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnLAKEDEPTHID = New Global.System.Data.DataColumn("LAKEDEPTHID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAKEDEPTHID)
            Me.columnSAMPLEDATE = New Global.System.Data.DataColumn("SAMPLEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEDATE)
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnGPS_DATE = New Global.System.Data.DataColumn("GPS_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGPS_DATE)
            Me.columnGPS_TIME = New Global.System.Data.DataColumn("GPS_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGPS_TIME)
            Me.columnDEPTH = New Global.System.Data.DataColumn("DEPTH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEPTH)
            Me.columnLONGITUDE = New Global.System.Data.DataColumn("LONGITUDE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLONGITUDE)
            Me.columnLATITUDE = New Global.System.Data.DataColumn("LATITUDE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLATITUDE)
            Me.columnCOMMENTS_DEPTHS = New Global.System.Data.DataColumn("COMMENTS_DEPTHS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS_DEPTHS)
            Me.columnHEIGHT = New Global.System.Data.DataColumn("HEIGHT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEIGHT)
            Me.columnFEAT_NAME = New Global.System.Data.DataColumn("FEAT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEAT_NAME)
            Me.columnDATAFILE = New Global.System.Data.DataColumn("DATAFILE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATAFILE)
            Me.columnGPS_HEIGHT = New Global.System.Data.DataColumn("GPS_HEIGHT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGPS_HEIGHT)
            Me.columnVERT_PREC = New Global.System.Data.DataColumn("VERT_PREC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVERT_PREC)
            Me.columnHORZ_PREC = New Global.System.Data.DataColumn("HORZ_PREC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHORZ_PREC)
            Me.columnPOINT_ID = New Global.System.Data.DataColumn("POINT_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOINT_ID)
            Me.columnSOURCE = New Global.System.Data.DataColumn("SOURCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOURCE)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnPondDepthsID = New Global.System.Data.DataColumn("PondDepthsID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPondDepthsID)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPondDepthsID}, true))
            Me.columnLAKEDEPTHID.AllowDBNull = false
            Me.columnSAMPLEDATE.AllowDBNull = false
            Me.columnPONDNAME.AllowDBNull = false
            Me.columnPONDNAME.MaxLength = 50
            Me.columnDEPTH.AllowDBNull = false
            Me.columnCOMMENTS_DEPTHS.MaxLength = 2147483647
            Me.columnFEAT_NAME.MaxLength = 50
            Me.columnDATAFILE.MaxLength = 50
            Me.columnSOURCE.MaxLength = 50
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnPondDepthsID.AutoIncrement = true
            Me.columnPondDepthsID.AutoIncrementSeed = -1
            Me.columnPondDepthsID.AutoIncrementStep = -1
            Me.columnPondDepthsID.AllowDBNull = false
            Me.columnPondDepthsID.ReadOnly = true
            Me.columnPondDepthsID.Unique = true
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblPondDepthsRow() As tblPondDepthsRow
            Return CType(Me.NewRow,tblPondDepthsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblPondDepthsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblPondDepthsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblPondDepthsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblPondDepthsRowChanged(Me, New tblPondDepthsRowChangeEvent(CType(e.Row,tblPondDepthsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblPondDepthsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblPondDepthsRowChanging(Me, New tblPondDepthsRowChangeEvent(CType(e.Row,tblPondDepthsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblPondDepthsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblPondDepthsRowDeleted(Me, New tblPondDepthsRowChangeEvent(CType(e.Row,tblPondDepthsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblPondDepthsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblPondDepthsRowDeleting(Me, New tblPondDepthsRowChangeEvent(CType(e.Row,tblPondDepthsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblPondDepthsRow(ByVal row As tblPondDepthsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblPondDepthsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblPondsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblPondsRow)
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnPARK As Global.System.Data.DataColumn
        
        Private columnLATITUDE_NAD83 As Global.System.Data.DataColumn
        
        Private columnLONGITUDE_NAD83 As Global.System.Data.DataColumn
        
        Private columnLATITUDE_WGS84 As Global.System.Data.DataColumn
        
        Private columnLONGITUDE_WGS84 As Global.System.Data.DataColumn
        
        Private columnACCESSTYPE As Global.System.Data.DataColumn
        
        Private columnGPSTYPE As Global.System.Data.DataColumn
        
        Private columnGPSDATUM As Global.System.Data.DataColumn
        
        Private columnGPSDATE As Global.System.Data.DataColumn
        
        Private columnQUAD As Global.System.Data.DataColumn
        
        Private columnQUADNUMBER As Global.System.Data.DataColumn
        
        Private columnELEVATION As Global.System.Data.DataColumn
        
        Private columnELEVATION_NUM As Global.System.Data.DataColumn
        
        Private columnELEVATIONSOURCE As Global.System.Data.DataColumn
        
        Private columnHYDROLOGIC_REGIME As Global.System.Data.DataColumn
        
        Private columnHYDROLOGIC_CLASS As Global.System.Data.DataColumn
        
        Private columnFIRST_SAMPLED_DATE As Global.System.Data.DataColumn
        
        Private columnUPDATED_DATE As Global.System.Data.DataColumn
        
        Private columnEST_H_ERROR As Global.System.Data.DataColumn
        
        Private columnEST_V_ERROR As Global.System.Data.DataColumn
        
        Private columnLOC_NOTES As Global.System.Data.DataColumn
        
        Private columnLOC_TYPE As Global.System.Data.DataColumn
        
        Private columnLOC_MATERIAL As Global.System.Data.DataColumn
        
        Private columnGRTS_NUM As Global.System.Data.DataColumn
        
        Private columnMAPLAKENUM As Global.System.Data.DataColumn
        
        Private columnSITESELECTIONNOTES As Global.System.Data.DataColumn
        
        Private columnCONTINUOUS_DATA As Global.System.Data.DataColumn
        
        Private columnSALINITY As Global.System.Data.DataColumn
        
        Private columnEMERGENTS As Global.System.Data.DataColumn
        
        Private columnGENESIS As Global.System.Data.DataColumn
        
        Private columnISLANDS As Global.System.Data.DataColumn
        
        Private columnSHORELINE As Global.System.Data.DataColumn
        
        Private columnSUBSTRATE_TEXTURE As Global.System.Data.DataColumn
        
        Private columnCOMMENTS As Global.System.Data.DataColumn
        
        Private columnECOREGION As Global.System.Data.DataColumn
        
        Private columnSUBSECTION As Global.System.Data.DataColumn
        
        Private columnDETSUBCODE As Global.System.Data.DataColumn
        
        Private columnLAKEGEOLOGY As Global.System.Data.DataColumn
        
        Private columnLAKEGEOLOGYNOTES As Global.System.Data.DataColumn
        
        Private columnLAKETYPE As Global.System.Data.DataColumn
        
        Private columnLAKTYPE_CONFIRM As Global.System.Data.DataColumn
        
        Private columnLAKETYPE_FIELDNOTES As Global.System.Data.DataColumn
        
        Private columnDENA_LAKETYPE As Global.System.Data.DataColumn
        
        Private columnFIREHISTORY As Global.System.Data.DataColumn
        
        Private columnPERMAFROST As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnzECOREGION As Global.System.Data.DataColumn
        
        Private columnzSUBSECTION As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblPonds"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PARKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LATITUDE_NAD83Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLATITUDE_NAD83
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LONGITUDE_NAD83Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLONGITUDE_NAD83
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LATITUDE_WGS84Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLATITUDE_WGS84
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LONGITUDE_WGS84Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLONGITUDE_WGS84
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ACCESSTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCESSTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property GPSTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGPSTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property GPSDATUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGPSDATUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property GPSDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGPSDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property QUADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQUAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property QUADNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQUADNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ELEVATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELEVATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ELEVATION_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELEVATION_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ELEVATIONSOURCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELEVATIONSOURCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property HYDROLOGIC_REGIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHYDROLOGIC_REGIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property HYDROLOGIC_CLASSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHYDROLOGIC_CLASS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FIRST_SAMPLED_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIRST_SAMPLED_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property UPDATED_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property EST_H_ERRORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEST_H_ERROR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property EST_V_ERRORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEST_V_ERROR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LOC_NOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOC_NOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LOC_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOC_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LOC_MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOC_MATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property GRTS_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRTS_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MAPLAKENUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAPLAKENUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SITESELECTIONNOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSITESELECTIONNOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CONTINUOUS_DATAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTINUOUS_DATA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SALINITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALINITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property EMERGENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMERGENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property GENESISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGENESIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ISLANDSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISLANDS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SHORELINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHORELINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SUBSTRATE_TEXTUREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUBSTRATE_TEXTURE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ECOREGIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnECOREGION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SUBSECTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUBSECTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DETSUBCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDETSUBCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LAKEGEOLOGYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAKEGEOLOGY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LAKEGEOLOGYNOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAKEGEOLOGYNOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LAKETYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAKETYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LAKTYPE_CONFIRMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAKTYPE_CONFIRM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LAKETYPE_FIELDNOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAKETYPE_FIELDNOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DENA_LAKETYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDENA_LAKETYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FIREHISTORYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIREHISTORY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PERMAFROSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERMAFROST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property zECOREGIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnzECOREGION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property zSUBSECTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnzSUBSECTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblPondsRow
            Get
                Return CType(Me.Rows(index),tblPondsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblPondsRowChanging As tblPondsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblPondsRowChanged As tblPondsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblPondsRowDeleting As tblPondsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblPondsRowDeleted As tblPondsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblPondsRow(ByVal row As tblPondsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblPondsRow( _
                    ByVal PONDNAME As String,  _
                    ByVal PARK As String,  _
                    ByVal LATITUDE_NAD83 As Double,  _
                    ByVal LONGITUDE_NAD83 As Double,  _
                    ByVal LATITUDE_WGS84 As Double,  _
                    ByVal LONGITUDE_WGS84 As Double,  _
                    ByVal ACCESSTYPE As String,  _
                    ByVal GPSTYPE As String,  _
                    ByVal GPSDATUM As String,  _
                    ByVal GPSDATE As Date,  _
                    ByVal QUAD As String,  _
                    ByVal QUADNUMBER As String,  _
                    ByVal ELEVATION As String,  _
                    ByVal ELEVATION_NUM As Decimal,  _
                    ByVal ELEVATIONSOURCE As String,  _
                    ByVal HYDROLOGIC_REGIME As Integer,  _
                    ByVal HYDROLOGIC_CLASS As String,  _
                    ByVal FIRST_SAMPLED_DATE As Date,  _
                    ByVal UPDATED_DATE As Date,  _
                    ByVal EST_H_ERROR As Single,  _
                    ByVal EST_V_ERROR As Single,  _
                    ByVal LOC_NOTES As String,  _
                    ByVal LOC_TYPE As String,  _
                    ByVal LOC_MATERIAL As String,  _
                    ByVal GRTS_NUM As Integer,  _
                    ByVal MAPLAKENUM As Integer,  _
                    ByVal SITESELECTIONNOTES As String,  _
                    ByVal CONTINUOUS_DATA As Boolean,  _
                    ByVal SALINITY As String,  _
                    ByVal EMERGENTS As Boolean,  _
                    ByVal GENESIS As String,  _
                    ByVal ISLANDS As Boolean,  _
                    ByVal SHORELINE As String,  _
                    ByVal SUBSTRATE_TEXTURE As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal ECOREGION As String,  _
                    ByVal SUBSECTION As String,  _
                    ByVal DETSUBCODE As String,  _
                    ByVal LAKEGEOLOGY As String,  _
                    ByVal LAKEGEOLOGYNOTES As String,  _
                    ByVal LAKETYPE As String,  _
                    ByVal LAKTYPE_CONFIRM As String,  _
                    ByVal LAKETYPE_FIELDNOTES As String,  _
                    ByVal DENA_LAKETYPE As String,  _
                    ByVal FIREHISTORY As String,  _
                    ByVal PERMAFROST As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal zECOREGION As String,  _
                    ByVal zSUBSECTION As String,  _
                    ByVal row_timestamp() As Byte) As tblPondsRow
            Dim rowtblPondsRow As tblPondsRow = CType(Me.NewRow,tblPondsRow)
            Dim columnValuesArray() As Object = New Object() {PONDNAME, PARK, LATITUDE_NAD83, LONGITUDE_NAD83, LATITUDE_WGS84, LONGITUDE_WGS84, ACCESSTYPE, GPSTYPE, GPSDATUM, GPSDATE, QUAD, QUADNUMBER, ELEVATION, ELEVATION_NUM, ELEVATIONSOURCE, HYDROLOGIC_REGIME, HYDROLOGIC_CLASS, FIRST_SAMPLED_DATE, UPDATED_DATE, EST_H_ERROR, EST_V_ERROR, LOC_NOTES, LOC_TYPE, LOC_MATERIAL, GRTS_NUM, MAPLAKENUM, SITESELECTIONNOTES, CONTINUOUS_DATA, SALINITY, EMERGENTS, GENESIS, ISLANDS, SHORELINE, SUBSTRATE_TEXTURE, COMMENTS, ECOREGION, SUBSECTION, DETSUBCODE, LAKEGEOLOGY, LAKEGEOLOGYNOTES, LAKETYPE, LAKTYPE_CONFIRM, LAKETYPE_FIELDNOTES, DENA_LAKETYPE, FIREHISTORY, PERMAFROST, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, zECOREGION, zSUBSECTION, row_timestamp}
            rowtblPondsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblPondsRow)
            Return rowtblPondsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByPONDNAME(ByVal PONDNAME As String) As tblPondsRow
            Return CType(Me.Rows.Find(New Object() {PONDNAME}),tblPondsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblPondsDataTable = CType(MyBase.Clone,tblPondsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblPondsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnPARK = MyBase.Columns("PARK")
            Me.columnLATITUDE_NAD83 = MyBase.Columns("LATITUDE_NAD83")
            Me.columnLONGITUDE_NAD83 = MyBase.Columns("LONGITUDE_NAD83")
            Me.columnLATITUDE_WGS84 = MyBase.Columns("LATITUDE_WGS84")
            Me.columnLONGITUDE_WGS84 = MyBase.Columns("LONGITUDE_WGS84")
            Me.columnACCESSTYPE = MyBase.Columns("ACCESSTYPE")
            Me.columnGPSTYPE = MyBase.Columns("GPSTYPE")
            Me.columnGPSDATUM = MyBase.Columns("GPSDATUM")
            Me.columnGPSDATE = MyBase.Columns("GPSDATE")
            Me.columnQUAD = MyBase.Columns("QUAD")
            Me.columnQUADNUMBER = MyBase.Columns("QUADNUMBER")
            Me.columnELEVATION = MyBase.Columns("ELEVATION")
            Me.columnELEVATION_NUM = MyBase.Columns("ELEVATION_NUM")
            Me.columnELEVATIONSOURCE = MyBase.Columns("ELEVATIONSOURCE")
            Me.columnHYDROLOGIC_REGIME = MyBase.Columns("HYDROLOGIC_REGIME")
            Me.columnHYDROLOGIC_CLASS = MyBase.Columns("HYDROLOGIC_CLASS")
            Me.columnFIRST_SAMPLED_DATE = MyBase.Columns("FIRST_SAMPLED_DATE")
            Me.columnUPDATED_DATE = MyBase.Columns("UPDATED_DATE")
            Me.columnEST_H_ERROR = MyBase.Columns("EST_H_ERROR")
            Me.columnEST_V_ERROR = MyBase.Columns("EST_V_ERROR")
            Me.columnLOC_NOTES = MyBase.Columns("LOC_NOTES")
            Me.columnLOC_TYPE = MyBase.Columns("LOC_TYPE")
            Me.columnLOC_MATERIAL = MyBase.Columns("LOC_MATERIAL")
            Me.columnGRTS_NUM = MyBase.Columns("GRTS_NUM")
            Me.columnMAPLAKENUM = MyBase.Columns("MAPLAKENUM")
            Me.columnSITESELECTIONNOTES = MyBase.Columns("SITESELECTIONNOTES")
            Me.columnCONTINUOUS_DATA = MyBase.Columns("CONTINUOUS_DATA")
            Me.columnSALINITY = MyBase.Columns("SALINITY")
            Me.columnEMERGENTS = MyBase.Columns("EMERGENTS")
            Me.columnGENESIS = MyBase.Columns("GENESIS")
            Me.columnISLANDS = MyBase.Columns("ISLANDS")
            Me.columnSHORELINE = MyBase.Columns("SHORELINE")
            Me.columnSUBSTRATE_TEXTURE = MyBase.Columns("SUBSTRATE_TEXTURE")
            Me.columnCOMMENTS = MyBase.Columns("COMMENTS")
            Me.columnECOREGION = MyBase.Columns("ECOREGION")
            Me.columnSUBSECTION = MyBase.Columns("SUBSECTION")
            Me.columnDETSUBCODE = MyBase.Columns("DETSUBCODE")
            Me.columnLAKEGEOLOGY = MyBase.Columns("LAKEGEOLOGY")
            Me.columnLAKEGEOLOGYNOTES = MyBase.Columns("LAKEGEOLOGYNOTES")
            Me.columnLAKETYPE = MyBase.Columns("LAKETYPE")
            Me.columnLAKTYPE_CONFIRM = MyBase.Columns("LAKTYPE_CONFIRM")
            Me.columnLAKETYPE_FIELDNOTES = MyBase.Columns("LAKETYPE_FIELDNOTES")
            Me.columnDENA_LAKETYPE = MyBase.Columns("DENA_LAKETYPE")
            Me.columnFIREHISTORY = MyBase.Columns("FIREHISTORY")
            Me.columnPERMAFROST = MyBase.Columns("PERMAFROST")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnzECOREGION = MyBase.Columns("zECOREGION")
            Me.columnzSUBSECTION = MyBase.Columns("zSUBSECTION")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnPARK = New Global.System.Data.DataColumn("PARK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARK)
            Me.columnLATITUDE_NAD83 = New Global.System.Data.DataColumn("LATITUDE_NAD83", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLATITUDE_NAD83)
            Me.columnLONGITUDE_NAD83 = New Global.System.Data.DataColumn("LONGITUDE_NAD83", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLONGITUDE_NAD83)
            Me.columnLATITUDE_WGS84 = New Global.System.Data.DataColumn("LATITUDE_WGS84", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLATITUDE_WGS84)
            Me.columnLONGITUDE_WGS84 = New Global.System.Data.DataColumn("LONGITUDE_WGS84", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLONGITUDE_WGS84)
            Me.columnACCESSTYPE = New Global.System.Data.DataColumn("ACCESSTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCESSTYPE)
            Me.columnGPSTYPE = New Global.System.Data.DataColumn("GPSTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGPSTYPE)
            Me.columnGPSDATUM = New Global.System.Data.DataColumn("GPSDATUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGPSDATUM)
            Me.columnGPSDATE = New Global.System.Data.DataColumn("GPSDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGPSDATE)
            Me.columnQUAD = New Global.System.Data.DataColumn("QUAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQUAD)
            Me.columnQUADNUMBER = New Global.System.Data.DataColumn("QUADNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQUADNUMBER)
            Me.columnELEVATION = New Global.System.Data.DataColumn("ELEVATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELEVATION)
            Me.columnELEVATION_NUM = New Global.System.Data.DataColumn("ELEVATION_NUM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELEVATION_NUM)
            Me.columnELEVATIONSOURCE = New Global.System.Data.DataColumn("ELEVATIONSOURCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELEVATIONSOURCE)
            Me.columnHYDROLOGIC_REGIME = New Global.System.Data.DataColumn("HYDROLOGIC_REGIME", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHYDROLOGIC_REGIME)
            Me.columnHYDROLOGIC_CLASS = New Global.System.Data.DataColumn("HYDROLOGIC_CLASS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHYDROLOGIC_CLASS)
            Me.columnFIRST_SAMPLED_DATE = New Global.System.Data.DataColumn("FIRST_SAMPLED_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIRST_SAMPLED_DATE)
            Me.columnUPDATED_DATE = New Global.System.Data.DataColumn("UPDATED_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_DATE)
            Me.columnEST_H_ERROR = New Global.System.Data.DataColumn("EST_H_ERROR", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEST_H_ERROR)
            Me.columnEST_V_ERROR = New Global.System.Data.DataColumn("EST_V_ERROR", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEST_V_ERROR)
            Me.columnLOC_NOTES = New Global.System.Data.DataColumn("LOC_NOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOC_NOTES)
            Me.columnLOC_TYPE = New Global.System.Data.DataColumn("LOC_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOC_TYPE)
            Me.columnLOC_MATERIAL = New Global.System.Data.DataColumn("LOC_MATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOC_MATERIAL)
            Me.columnGRTS_NUM = New Global.System.Data.DataColumn("GRTS_NUM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRTS_NUM)
            Me.columnMAPLAKENUM = New Global.System.Data.DataColumn("MAPLAKENUM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAPLAKENUM)
            Me.columnSITESELECTIONNOTES = New Global.System.Data.DataColumn("SITESELECTIONNOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSITESELECTIONNOTES)
            Me.columnCONTINUOUS_DATA = New Global.System.Data.DataColumn("CONTINUOUS_DATA", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTINUOUS_DATA)
            Me.columnSALINITY = New Global.System.Data.DataColumn("SALINITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALINITY)
            Me.columnEMERGENTS = New Global.System.Data.DataColumn("EMERGENTS", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMERGENTS)
            Me.columnGENESIS = New Global.System.Data.DataColumn("GENESIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGENESIS)
            Me.columnISLANDS = New Global.System.Data.DataColumn("ISLANDS", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISLANDS)
            Me.columnSHORELINE = New Global.System.Data.DataColumn("SHORELINE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHORELINE)
            Me.columnSUBSTRATE_TEXTURE = New Global.System.Data.DataColumn("SUBSTRATE_TEXTURE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUBSTRATE_TEXTURE)
            Me.columnCOMMENTS = New Global.System.Data.DataColumn("COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS)
            Me.columnECOREGION = New Global.System.Data.DataColumn("ECOREGION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnECOREGION)
            Me.columnSUBSECTION = New Global.System.Data.DataColumn("SUBSECTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUBSECTION)
            Me.columnDETSUBCODE = New Global.System.Data.DataColumn("DETSUBCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDETSUBCODE)
            Me.columnLAKEGEOLOGY = New Global.System.Data.DataColumn("LAKEGEOLOGY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAKEGEOLOGY)
            Me.columnLAKEGEOLOGYNOTES = New Global.System.Data.DataColumn("LAKEGEOLOGYNOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAKEGEOLOGYNOTES)
            Me.columnLAKETYPE = New Global.System.Data.DataColumn("LAKETYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAKETYPE)
            Me.columnLAKTYPE_CONFIRM = New Global.System.Data.DataColumn("LAKTYPE_CONFIRM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAKTYPE_CONFIRM)
            Me.columnLAKETYPE_FIELDNOTES = New Global.System.Data.DataColumn("LAKETYPE_FIELDNOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAKETYPE_FIELDNOTES)
            Me.columnDENA_LAKETYPE = New Global.System.Data.DataColumn("DENA_LAKETYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDENA_LAKETYPE)
            Me.columnFIREHISTORY = New Global.System.Data.DataColumn("FIREHISTORY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIREHISTORY)
            Me.columnPERMAFROST = New Global.System.Data.DataColumn("PERMAFROST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERMAFROST)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnzECOREGION = New Global.System.Data.DataColumn("zECOREGION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnzECOREGION)
            Me.columnzSUBSECTION = New Global.System.Data.DataColumn("zSUBSECTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnzSUBSECTION)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPONDNAME}, true))
            Me.columnPONDNAME.AllowDBNull = false
            Me.columnPONDNAME.Unique = true
            Me.columnPONDNAME.MaxLength = 50
            Me.columnPARK.MaxLength = 50
            Me.columnACCESSTYPE.MaxLength = 50
            Me.columnGPSTYPE.MaxLength = 50
            Me.columnGPSDATUM.MaxLength = 50
            Me.columnQUAD.MaxLength = 50
            Me.columnQUADNUMBER.MaxLength = 50
            Me.columnELEVATION.MaxLength = 50
            Me.columnELEVATIONSOURCE.MaxLength = 50
            Me.columnHYDROLOGIC_CLASS.MaxLength = 50
            Me.columnLOC_NOTES.MaxLength = 4000
            Me.columnLOC_TYPE.MaxLength = 50
            Me.columnLOC_MATERIAL.MaxLength = 50
            Me.columnSITESELECTIONNOTES.MaxLength = 1073741823
            Me.columnSALINITY.MaxLength = 255
            Me.columnGENESIS.MaxLength = 255
            Me.columnSHORELINE.MaxLength = 255
            Me.columnSUBSTRATE_TEXTURE.MaxLength = 255
            Me.columnCOMMENTS.MaxLength = 4000
            Me.columnECOREGION.MaxLength = 80
            Me.columnSUBSECTION.MaxLength = 80
            Me.columnDETSUBCODE.MaxLength = 20
            Me.columnLAKEGEOLOGY.MaxLength = 50
            Me.columnLAKEGEOLOGYNOTES.MaxLength = 500
            Me.columnLAKETYPE.MaxLength = 50
            Me.columnLAKTYPE_CONFIRM.MaxLength = 10
            Me.columnLAKETYPE_FIELDNOTES.MaxLength = 4000
            Me.columnDENA_LAKETYPE.MaxLength = 50
            Me.columnFIREHISTORY.MaxLength = 50
            Me.columnPERMAFROST.MaxLength = 50
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnzECOREGION.MaxLength = 50
            Me.columnzSUBSECTION.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblPondsRow() As tblPondsRow
            Return CType(Me.NewRow,tblPondsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblPondsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblPondsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblPondsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblPondsRowChanged(Me, New tblPondsRowChangeEvent(CType(e.Row,tblPondsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblPondsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblPondsRowChanging(Me, New tblPondsRowChangeEvent(CType(e.Row,tblPondsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblPondsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblPondsRowDeleted(Me, New tblPondsRowChangeEvent(CType(e.Row,tblPondsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblPondsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblPondsRowDeleting(Me, New tblPondsRowChangeEvent(CType(e.Row,tblPondsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblPondsRow(ByVal row As tblPondsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblPondsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblTransQuadratsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblTransQuadratsRow)
        
        Private columnPONDTRANSID As Global.System.Data.DataColumn
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnSAMPLEDATE As Global.System.Data.DataColumn
        
        Private columnTRANSECTNUM As Global.System.Data.DataColumn
        
        Private columnTRANSECT As Global.System.Data.DataColumn
        
        Private columnOBSERVERS As Global.System.Data.DataColumn
        
        Private columnSPECIES As Global.System.Data.DataColumn
        
        Private columnSPECIESOTHER As Global.System.Data.DataColumn
        
        Private columnANALYSIS_CODE As Global.System.Data.DataColumn
        
        Private columnEXCLUDE As Global.System.Data.DataColumn
        
        Private columnNUMQUADRATSPRESENT As Global.System.Data.DataColumn
        
        Private columnTRANS_1A As Global.System.Data.DataColumn
        
        Private columnTRANS_1B As Global.System.Data.DataColumn
        
        Private columnTRANS_1C As Global.System.Data.DataColumn
        
        Private columnTRANS_2A As Global.System.Data.DataColumn
        
        Private columnTRANS_2B As Global.System.Data.DataColumn
        
        Private columnTRANS_2C As Global.System.Data.DataColumn
        
        Private columnTRANS_3A As Global.System.Data.DataColumn
        
        Private columnTRANS_3B As Global.System.Data.DataColumn
        
        Private columnTRANS_3C As Global.System.Data.DataColumn
        
        Private columnTRANS_4A As Global.System.Data.DataColumn
        
        Private columnTRANS_4B As Global.System.Data.DataColumn
        
        Private columnTRANS_4C As Global.System.Data.DataColumn
        
        Private columnTRANS_5A As Global.System.Data.DataColumn
        
        Private columnTRANS_5B As Global.System.Data.DataColumn
        
        Private columnTRANS_5C As Global.System.Data.DataColumn
        
        Private columnTRANS_6A As Global.System.Data.DataColumn
        
        Private columnTRANS_6B As Global.System.Data.DataColumn
        
        Private columnTRANS_6C As Global.System.Data.DataColumn
        
        Private columnTRANS_7A As Global.System.Data.DataColumn
        
        Private columnTRANS_7B As Global.System.Data.DataColumn
        
        Private columnTRANS_7C As Global.System.Data.DataColumn
        
        Private columnTRANS_8A As Global.System.Data.DataColumn
        
        Private columnTRANS_8B As Global.System.Data.DataColumn
        
        Private columnTRANS_8C As Global.System.Data.DataColumn
        
        Private columnTRANS_9A As Global.System.Data.DataColumn
        
        Private columnTRANS_9B As Global.System.Data.DataColumn
        
        Private columnTRANS_9C As Global.System.Data.DataColumn
        
        Private columnTRANS_10A As Global.System.Data.DataColumn
        
        Private columnTRANS_10B As Global.System.Data.DataColumn
        
        Private columnTRANS_10C As Global.System.Data.DataColumn
        
        Private columnTRANS_11A As Global.System.Data.DataColumn
        
        Private columnTRANS_11B As Global.System.Data.DataColumn
        
        Private columnTRANS_11C As Global.System.Data.DataColumn
        
        Private columnTRANS_12A As Global.System.Data.DataColumn
        
        Private columnTRANS_12B As Global.System.Data.DataColumn
        
        Private columnTRANS_12C As Global.System.Data.DataColumn
        
        Private columnTRANS_13A As Global.System.Data.DataColumn
        
        Private columnTRANS_13B As Global.System.Data.DataColumn
        
        Private columnTRANS_13C As Global.System.Data.DataColumn
        
        Private columnTRANS_14A As Global.System.Data.DataColumn
        
        Private columnTRANS_14B As Global.System.Data.DataColumn
        
        Private columnTRANS_14C As Global.System.Data.DataColumn
        
        Private columnQUADNOTES As Global.System.Data.DataColumn
        
        Private columnDEVICE_ID As Global.System.Data.DataColumn
        
        Private columnSAMPLETIME As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnTransTransectsID As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblTransQuadrats"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDTRANSIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDTRANSID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSECTNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSECTNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSECTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSECT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property OBSERVERSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOBSERVERS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SPECIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SPECIESOTHERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIESOTHER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ANALYSIS_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANALYSIS_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property EXCLUDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCLUDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NUMQUADRATSPRESENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMQUADRATSPRESENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_1AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_1A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_1BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_1B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_1CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_1C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_2AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_2A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_2BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_2B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_2CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_2C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_3AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_3A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_3BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_3B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_3CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_3C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_4AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_4A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_4BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_4B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_4CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_4C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_5AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_5A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_5BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_5B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_5CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_5C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_6AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_6A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_6BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_6B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_6CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_6C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_7AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_7A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_7BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_7B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_7CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_7C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_8AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_8A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_8BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_8B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_8CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_8C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_9AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_9A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_9BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_9B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_9CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_9C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_10AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_10A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_10BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_10B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_10CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_10C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_11AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_11A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_11BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_11B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_11CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_11C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_12AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_12A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_12BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_12B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_12CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_12C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_13AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_13A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_13BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_13B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_13CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_13C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_14AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_14A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_14BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_14B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANS_14CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANS_14C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property QUADNOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQUADNOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DEVICE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEVICE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLETIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLETIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TransTransectsIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransTransectsID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblTransQuadratsRow
            Get
                Return CType(Me.Rows(index),tblTransQuadratsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblTransQuadratsRowChanging As tblTransQuadratsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblTransQuadratsRowChanged As tblTransQuadratsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblTransQuadratsRowDeleting As tblTransQuadratsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblTransQuadratsRowDeleted As tblTransQuadratsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblTransQuadratsRow(ByVal row As tblTransQuadratsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblTransQuadratsRow( _
                    ByVal PONDTRANSID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal TRANSECTNUM As String,  _
                    ByVal TRANSECT As Integer,  _
                    ByVal OBSERVERS As String,  _
                    ByVal SPECIES As String,  _
                    ByVal SPECIESOTHER As String,  _
                    ByVal ANALYSIS_CODE As String,  _
                    ByVal EXCLUDE As Boolean,  _
                    ByVal NUMQUADRATSPRESENT As Integer,  _
                    ByVal TRANS_1A As Boolean,  _
                    ByVal TRANS_1B As Boolean,  _
                    ByVal TRANS_1C As Boolean,  _
                    ByVal TRANS_2A As Boolean,  _
                    ByVal TRANS_2B As Boolean,  _
                    ByVal TRANS_2C As Boolean,  _
                    ByVal TRANS_3A As Boolean,  _
                    ByVal TRANS_3B As Boolean,  _
                    ByVal TRANS_3C As Boolean,  _
                    ByVal TRANS_4A As Boolean,  _
                    ByVal TRANS_4B As Boolean,  _
                    ByVal TRANS_4C As Boolean,  _
                    ByVal TRANS_5A As Boolean,  _
                    ByVal TRANS_5B As Boolean,  _
                    ByVal TRANS_5C As Boolean,  _
                    ByVal TRANS_6A As Boolean,  _
                    ByVal TRANS_6B As Boolean,  _
                    ByVal TRANS_6C As Boolean,  _
                    ByVal TRANS_7A As Boolean,  _
                    ByVal TRANS_7B As Boolean,  _
                    ByVal TRANS_7C As Boolean,  _
                    ByVal TRANS_8A As Boolean,  _
                    ByVal TRANS_8B As Boolean,  _
                    ByVal TRANS_8C As Boolean,  _
                    ByVal TRANS_9A As Boolean,  _
                    ByVal TRANS_9B As Boolean,  _
                    ByVal TRANS_9C As Boolean,  _
                    ByVal TRANS_10A As Boolean,  _
                    ByVal TRANS_10B As Boolean,  _
                    ByVal TRANS_10C As Boolean,  _
                    ByVal TRANS_11A As Boolean,  _
                    ByVal TRANS_11B As Boolean,  _
                    ByVal TRANS_11C As Boolean,  _
                    ByVal TRANS_12A As Boolean,  _
                    ByVal TRANS_12B As Boolean,  _
                    ByVal TRANS_12C As Boolean,  _
                    ByVal TRANS_13A As Boolean,  _
                    ByVal TRANS_13B As Boolean,  _
                    ByVal TRANS_13C As Boolean,  _
                    ByVal TRANS_14A As Boolean,  _
                    ByVal TRANS_14B As Boolean,  _
                    ByVal TRANS_14C As Boolean,  _
                    ByVal QUADNOTES As String,  _
                    ByVal DEVICE_ID As String,  _
                    ByVal SAMPLETIME As System.TimeSpan,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte) As tblTransQuadratsRow
            Dim rowtblTransQuadratsRow As tblTransQuadratsRow = CType(Me.NewRow,tblTransQuadratsRow)
            Dim columnValuesArray() As Object = New Object() {PONDTRANSID, PONDNAME, SAMPLEDATE, TRANSECTNUM, TRANSECT, OBSERVERS, SPECIES, SPECIESOTHER, ANALYSIS_CODE, EXCLUDE, NUMQUADRATSPRESENT, TRANS_1A, TRANS_1B, TRANS_1C, TRANS_2A, TRANS_2B, TRANS_2C, TRANS_3A, TRANS_3B, TRANS_3C, TRANS_4A, TRANS_4B, TRANS_4C, TRANS_5A, TRANS_5B, TRANS_5C, TRANS_6A, TRANS_6B, TRANS_6C, TRANS_7A, TRANS_7B, TRANS_7C, TRANS_8A, TRANS_8B, TRANS_8C, TRANS_9A, TRANS_9B, TRANS_9C, TRANS_10A, TRANS_10B, TRANS_10C, TRANS_11A, TRANS_11B, TRANS_11C, TRANS_12A, TRANS_12B, TRANS_12C, TRANS_13A, TRANS_13B, TRANS_13C, TRANS_14A, TRANS_14B, TRANS_14C, QUADNOTES, DEVICE_ID, SAMPLETIME, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Nothing, row_timestamp}
            rowtblTransQuadratsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblTransQuadratsRow)
            Return rowtblTransQuadratsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByTransTransectsID(ByVal TransTransectsID As Integer) As tblTransQuadratsRow
            Return CType(Me.Rows.Find(New Object() {TransTransectsID}),tblTransQuadratsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblTransQuadratsDataTable = CType(MyBase.Clone,tblTransQuadratsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblTransQuadratsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPONDTRANSID = MyBase.Columns("PONDTRANSID")
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnSAMPLEDATE = MyBase.Columns("SAMPLEDATE")
            Me.columnTRANSECTNUM = MyBase.Columns("TRANSECTNUM")
            Me.columnTRANSECT = MyBase.Columns("TRANSECT")
            Me.columnOBSERVERS = MyBase.Columns("OBSERVERS")
            Me.columnSPECIES = MyBase.Columns("SPECIES")
            Me.columnSPECIESOTHER = MyBase.Columns("SPECIESOTHER")
            Me.columnANALYSIS_CODE = MyBase.Columns("ANALYSIS_CODE")
            Me.columnEXCLUDE = MyBase.Columns("EXCLUDE")
            Me.columnNUMQUADRATSPRESENT = MyBase.Columns("NUMQUADRATSPRESENT")
            Me.columnTRANS_1A = MyBase.Columns("TRANS_1A")
            Me.columnTRANS_1B = MyBase.Columns("TRANS_1B")
            Me.columnTRANS_1C = MyBase.Columns("TRANS_1C")
            Me.columnTRANS_2A = MyBase.Columns("TRANS_2A")
            Me.columnTRANS_2B = MyBase.Columns("TRANS_2B")
            Me.columnTRANS_2C = MyBase.Columns("TRANS_2C")
            Me.columnTRANS_3A = MyBase.Columns("TRANS_3A")
            Me.columnTRANS_3B = MyBase.Columns("TRANS_3B")
            Me.columnTRANS_3C = MyBase.Columns("TRANS_3C")
            Me.columnTRANS_4A = MyBase.Columns("TRANS_4A")
            Me.columnTRANS_4B = MyBase.Columns("TRANS_4B")
            Me.columnTRANS_4C = MyBase.Columns("TRANS_4C")
            Me.columnTRANS_5A = MyBase.Columns("TRANS_5A")
            Me.columnTRANS_5B = MyBase.Columns("TRANS_5B")
            Me.columnTRANS_5C = MyBase.Columns("TRANS_5C")
            Me.columnTRANS_6A = MyBase.Columns("TRANS_6A")
            Me.columnTRANS_6B = MyBase.Columns("TRANS_6B")
            Me.columnTRANS_6C = MyBase.Columns("TRANS_6C")
            Me.columnTRANS_7A = MyBase.Columns("TRANS_7A")
            Me.columnTRANS_7B = MyBase.Columns("TRANS_7B")
            Me.columnTRANS_7C = MyBase.Columns("TRANS_7C")
            Me.columnTRANS_8A = MyBase.Columns("TRANS_8A")
            Me.columnTRANS_8B = MyBase.Columns("TRANS_8B")
            Me.columnTRANS_8C = MyBase.Columns("TRANS_8C")
            Me.columnTRANS_9A = MyBase.Columns("TRANS_9A")
            Me.columnTRANS_9B = MyBase.Columns("TRANS_9B")
            Me.columnTRANS_9C = MyBase.Columns("TRANS_9C")
            Me.columnTRANS_10A = MyBase.Columns("TRANS_10A")
            Me.columnTRANS_10B = MyBase.Columns("TRANS_10B")
            Me.columnTRANS_10C = MyBase.Columns("TRANS_10C")
            Me.columnTRANS_11A = MyBase.Columns("TRANS_11A")
            Me.columnTRANS_11B = MyBase.Columns("TRANS_11B")
            Me.columnTRANS_11C = MyBase.Columns("TRANS_11C")
            Me.columnTRANS_12A = MyBase.Columns("TRANS_12A")
            Me.columnTRANS_12B = MyBase.Columns("TRANS_12B")
            Me.columnTRANS_12C = MyBase.Columns("TRANS_12C")
            Me.columnTRANS_13A = MyBase.Columns("TRANS_13A")
            Me.columnTRANS_13B = MyBase.Columns("TRANS_13B")
            Me.columnTRANS_13C = MyBase.Columns("TRANS_13C")
            Me.columnTRANS_14A = MyBase.Columns("TRANS_14A")
            Me.columnTRANS_14B = MyBase.Columns("TRANS_14B")
            Me.columnTRANS_14C = MyBase.Columns("TRANS_14C")
            Me.columnQUADNOTES = MyBase.Columns("QUADNOTES")
            Me.columnDEVICE_ID = MyBase.Columns("DEVICE_ID")
            Me.columnSAMPLETIME = MyBase.Columns("SAMPLETIME")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnTransTransectsID = MyBase.Columns("TransTransectsID")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPONDTRANSID = New Global.System.Data.DataColumn("PONDTRANSID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDTRANSID)
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnSAMPLEDATE = New Global.System.Data.DataColumn("SAMPLEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEDATE)
            Me.columnTRANSECTNUM = New Global.System.Data.DataColumn("TRANSECTNUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSECTNUM)
            Me.columnTRANSECT = New Global.System.Data.DataColumn("TRANSECT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSECT)
            Me.columnOBSERVERS = New Global.System.Data.DataColumn("OBSERVERS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOBSERVERS)
            Me.columnSPECIES = New Global.System.Data.DataColumn("SPECIES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIES)
            Me.columnSPECIESOTHER = New Global.System.Data.DataColumn("SPECIESOTHER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIESOTHER)
            Me.columnANALYSIS_CODE = New Global.System.Data.DataColumn("ANALYSIS_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANALYSIS_CODE)
            Me.columnEXCLUDE = New Global.System.Data.DataColumn("EXCLUDE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCLUDE)
            Me.columnNUMQUADRATSPRESENT = New Global.System.Data.DataColumn("NUMQUADRATSPRESENT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMQUADRATSPRESENT)
            Me.columnTRANS_1A = New Global.System.Data.DataColumn("TRANS_1A", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_1A)
            Me.columnTRANS_1B = New Global.System.Data.DataColumn("TRANS_1B", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_1B)
            Me.columnTRANS_1C = New Global.System.Data.DataColumn("TRANS_1C", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_1C)
            Me.columnTRANS_2A = New Global.System.Data.DataColumn("TRANS_2A", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_2A)
            Me.columnTRANS_2B = New Global.System.Data.DataColumn("TRANS_2B", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_2B)
            Me.columnTRANS_2C = New Global.System.Data.DataColumn("TRANS_2C", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_2C)
            Me.columnTRANS_3A = New Global.System.Data.DataColumn("TRANS_3A", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_3A)
            Me.columnTRANS_3B = New Global.System.Data.DataColumn("TRANS_3B", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_3B)
            Me.columnTRANS_3C = New Global.System.Data.DataColumn("TRANS_3C", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_3C)
            Me.columnTRANS_4A = New Global.System.Data.DataColumn("TRANS_4A", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_4A)
            Me.columnTRANS_4B = New Global.System.Data.DataColumn("TRANS_4B", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_4B)
            Me.columnTRANS_4C = New Global.System.Data.DataColumn("TRANS_4C", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_4C)
            Me.columnTRANS_5A = New Global.System.Data.DataColumn("TRANS_5A", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_5A)
            Me.columnTRANS_5B = New Global.System.Data.DataColumn("TRANS_5B", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_5B)
            Me.columnTRANS_5C = New Global.System.Data.DataColumn("TRANS_5C", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_5C)
            Me.columnTRANS_6A = New Global.System.Data.DataColumn("TRANS_6A", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_6A)
            Me.columnTRANS_6B = New Global.System.Data.DataColumn("TRANS_6B", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_6B)
            Me.columnTRANS_6C = New Global.System.Data.DataColumn("TRANS_6C", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_6C)
            Me.columnTRANS_7A = New Global.System.Data.DataColumn("TRANS_7A", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_7A)
            Me.columnTRANS_7B = New Global.System.Data.DataColumn("TRANS_7B", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_7B)
            Me.columnTRANS_7C = New Global.System.Data.DataColumn("TRANS_7C", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_7C)
            Me.columnTRANS_8A = New Global.System.Data.DataColumn("TRANS_8A", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_8A)
            Me.columnTRANS_8B = New Global.System.Data.DataColumn("TRANS_8B", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_8B)
            Me.columnTRANS_8C = New Global.System.Data.DataColumn("TRANS_8C", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_8C)
            Me.columnTRANS_9A = New Global.System.Data.DataColumn("TRANS_9A", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_9A)
            Me.columnTRANS_9B = New Global.System.Data.DataColumn("TRANS_9B", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_9B)
            Me.columnTRANS_9C = New Global.System.Data.DataColumn("TRANS_9C", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_9C)
            Me.columnTRANS_10A = New Global.System.Data.DataColumn("TRANS_10A", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_10A)
            Me.columnTRANS_10B = New Global.System.Data.DataColumn("TRANS_10B", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_10B)
            Me.columnTRANS_10C = New Global.System.Data.DataColumn("TRANS_10C", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_10C)
            Me.columnTRANS_11A = New Global.System.Data.DataColumn("TRANS_11A", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_11A)
            Me.columnTRANS_11B = New Global.System.Data.DataColumn("TRANS_11B", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_11B)
            Me.columnTRANS_11C = New Global.System.Data.DataColumn("TRANS_11C", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_11C)
            Me.columnTRANS_12A = New Global.System.Data.DataColumn("TRANS_12A", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_12A)
            Me.columnTRANS_12B = New Global.System.Data.DataColumn("TRANS_12B", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_12B)
            Me.columnTRANS_12C = New Global.System.Data.DataColumn("TRANS_12C", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_12C)
            Me.columnTRANS_13A = New Global.System.Data.DataColumn("TRANS_13A", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_13A)
            Me.columnTRANS_13B = New Global.System.Data.DataColumn("TRANS_13B", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_13B)
            Me.columnTRANS_13C = New Global.System.Data.DataColumn("TRANS_13C", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_13C)
            Me.columnTRANS_14A = New Global.System.Data.DataColumn("TRANS_14A", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_14A)
            Me.columnTRANS_14B = New Global.System.Data.DataColumn("TRANS_14B", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_14B)
            Me.columnTRANS_14C = New Global.System.Data.DataColumn("TRANS_14C", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANS_14C)
            Me.columnQUADNOTES = New Global.System.Data.DataColumn("QUADNOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQUADNOTES)
            Me.columnDEVICE_ID = New Global.System.Data.DataColumn("DEVICE_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEVICE_ID)
            Me.columnSAMPLETIME = New Global.System.Data.DataColumn("SAMPLETIME", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLETIME)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnTransTransectsID = New Global.System.Data.DataColumn("TransTransectsID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransTransectsID)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTransTransectsID}, true))
            Me.columnPONDTRANSID.AllowDBNull = false
            Me.columnPONDNAME.AllowDBNull = false
            Me.columnPONDNAME.MaxLength = 50
            Me.columnSAMPLEDATE.AllowDBNull = false
            Me.columnTRANSECTNUM.MaxLength = 50
            Me.columnTRANSECT.AllowDBNull = false
            Me.columnOBSERVERS.MaxLength = 50
            Me.columnSPECIES.AllowDBNull = false
            Me.columnSPECIES.MaxLength = 50
            Me.columnSPECIESOTHER.MaxLength = 200
            Me.columnANALYSIS_CODE.MaxLength = 50
            Me.columnNUMQUADRATSPRESENT.ReadOnly = true
            Me.columnQUADNOTES.MaxLength = 2000
            Me.columnDEVICE_ID.MaxLength = 50
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnTransTransectsID.AutoIncrement = true
            Me.columnTransTransectsID.AutoIncrementSeed = -1
            Me.columnTransTransectsID.AutoIncrementStep = -1
            Me.columnTransTransectsID.AllowDBNull = false
            Me.columnTransTransectsID.ReadOnly = true
            Me.columnTransTransectsID.Unique = true
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblTransQuadratsRow() As tblTransQuadratsRow
            Return CType(Me.NewRow,tblTransQuadratsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblTransQuadratsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblTransQuadratsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblTransQuadratsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblTransQuadratsRowChanged(Me, New tblTransQuadratsRowChangeEvent(CType(e.Row,tblTransQuadratsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblTransQuadratsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblTransQuadratsRowChanging(Me, New tblTransQuadratsRowChangeEvent(CType(e.Row,tblTransQuadratsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblTransQuadratsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblTransQuadratsRowDeleted(Me, New tblTransQuadratsRowChangeEvent(CType(e.Row,tblTransQuadratsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblTransQuadratsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblTransQuadratsRowDeleting(Me, New tblTransQuadratsRowChangeEvent(CType(e.Row,tblTransQuadratsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblTransQuadratsRow(ByVal row As tblTransQuadratsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblTransQuadratsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblTransSpeciesPointInterceptsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblTransSpeciesPointInterceptsRow)
        
        Private columnSPPNTINTID As Global.System.Data.DataColumn
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnSAMPLEDATE As Global.System.Data.DataColumn
        
        Private columnTRANSECTNUM As Global.System.Data.DataColumn
        
        Private columnDISTANCE_CM As Global.System.Data.DataColumn
        
        Private columnDEPTH_CM As Global.System.Data.DataColumn
        
        Private columnSPECIES_1 As Global.System.Data.DataColumn
        
        Private columnSPECIES_2 As Global.System.Data.DataColumn
        
        Private columnSPECIES_3 As Global.System.Data.DataColumn
        
        Private columnSPECIES_4 As Global.System.Data.DataColumn
        
        Private columnSPECIES_5 As Global.System.Data.DataColumn
        
        Private columnCOMMENTS As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnTransSpeciesPointInterceptsID As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblTransSpeciesPointIntercepts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SPPNTINTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPPNTINTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSECTNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSECTNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DISTANCE_CMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISTANCE_CM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DEPTH_CMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEPTH_CM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SPECIES_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIES_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SPECIES_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIES_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SPECIES_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIES_3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SPECIES_4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIES_4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SPECIES_5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIES_5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TransSpeciesPointInterceptsIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransSpeciesPointInterceptsID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblTransSpeciesPointInterceptsRow
            Get
                Return CType(Me.Rows(index),tblTransSpeciesPointInterceptsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblTransSpeciesPointInterceptsRowChanging As tblTransSpeciesPointInterceptsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblTransSpeciesPointInterceptsRowChanged As tblTransSpeciesPointInterceptsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblTransSpeciesPointInterceptsRowDeleting As tblTransSpeciesPointInterceptsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblTransSpeciesPointInterceptsRowDeleted As tblTransSpeciesPointInterceptsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblTransSpeciesPointInterceptsRow(ByVal row As tblTransSpeciesPointInterceptsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblTransSpeciesPointInterceptsRow( _
                    ByVal SPPNTINTID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal TRANSECTNUM As String,  _
                    ByVal DISTANCE_CM As Integer,  _
                    ByVal DEPTH_CM As Integer,  _
                    ByVal SPECIES_1 As String,  _
                    ByVal SPECIES_2 As String,  _
                    ByVal SPECIES_3 As String,  _
                    ByVal SPECIES_4 As String,  _
                    ByVal SPECIES_5 As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte) As tblTransSpeciesPointInterceptsRow
            Dim rowtblTransSpeciesPointInterceptsRow As tblTransSpeciesPointInterceptsRow = CType(Me.NewRow,tblTransSpeciesPointInterceptsRow)
            Dim columnValuesArray() As Object = New Object() {SPPNTINTID, PONDNAME, SAMPLEDATE, TRANSECTNUM, DISTANCE_CM, DEPTH_CM, SPECIES_1, SPECIES_2, SPECIES_3, SPECIES_4, SPECIES_5, COMMENTS, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Nothing, row_timestamp}
            rowtblTransSpeciesPointInterceptsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblTransSpeciesPointInterceptsRow)
            Return rowtblTransSpeciesPointInterceptsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByTransSpeciesPointInterceptsID(ByVal TransSpeciesPointInterceptsID As Integer) As tblTransSpeciesPointInterceptsRow
            Return CType(Me.Rows.Find(New Object() {TransSpeciesPointInterceptsID}),tblTransSpeciesPointInterceptsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblTransSpeciesPointInterceptsDataTable = CType(MyBase.Clone,tblTransSpeciesPointInterceptsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblTransSpeciesPointInterceptsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSPPNTINTID = MyBase.Columns("SPPNTINTID")
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnSAMPLEDATE = MyBase.Columns("SAMPLEDATE")
            Me.columnTRANSECTNUM = MyBase.Columns("TRANSECTNUM")
            Me.columnDISTANCE_CM = MyBase.Columns("DISTANCE_CM")
            Me.columnDEPTH_CM = MyBase.Columns("DEPTH_CM")
            Me.columnSPECIES_1 = MyBase.Columns("SPECIES_1")
            Me.columnSPECIES_2 = MyBase.Columns("SPECIES_2")
            Me.columnSPECIES_3 = MyBase.Columns("SPECIES_3")
            Me.columnSPECIES_4 = MyBase.Columns("SPECIES_4")
            Me.columnSPECIES_5 = MyBase.Columns("SPECIES_5")
            Me.columnCOMMENTS = MyBase.Columns("COMMENTS")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnTransSpeciesPointInterceptsID = MyBase.Columns("TransSpeciesPointInterceptsID")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSPPNTINTID = New Global.System.Data.DataColumn("SPPNTINTID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPPNTINTID)
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnSAMPLEDATE = New Global.System.Data.DataColumn("SAMPLEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEDATE)
            Me.columnTRANSECTNUM = New Global.System.Data.DataColumn("TRANSECTNUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSECTNUM)
            Me.columnDISTANCE_CM = New Global.System.Data.DataColumn("DISTANCE_CM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISTANCE_CM)
            Me.columnDEPTH_CM = New Global.System.Data.DataColumn("DEPTH_CM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEPTH_CM)
            Me.columnSPECIES_1 = New Global.System.Data.DataColumn("SPECIES_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIES_1)
            Me.columnSPECIES_2 = New Global.System.Data.DataColumn("SPECIES_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIES_2)
            Me.columnSPECIES_3 = New Global.System.Data.DataColumn("SPECIES_3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIES_3)
            Me.columnSPECIES_4 = New Global.System.Data.DataColumn("SPECIES_4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIES_4)
            Me.columnSPECIES_5 = New Global.System.Data.DataColumn("SPECIES_5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIES_5)
            Me.columnCOMMENTS = New Global.System.Data.DataColumn("COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnTransSpeciesPointInterceptsID = New Global.System.Data.DataColumn("TransSpeciesPointInterceptsID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransSpeciesPointInterceptsID)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTransSpeciesPointInterceptsID}, true))
            Me.columnSPPNTINTID.AllowDBNull = false
            Me.columnPONDNAME.AllowDBNull = false
            Me.columnPONDNAME.MaxLength = 50
            Me.columnSAMPLEDATE.AllowDBNull = false
            Me.columnTRANSECTNUM.AllowDBNull = false
            Me.columnTRANSECTNUM.MaxLength = 50
            Me.columnSPECIES_1.MaxLength = 50
            Me.columnSPECIES_2.MaxLength = 50
            Me.columnSPECIES_3.MaxLength = 50
            Me.columnSPECIES_4.MaxLength = 50
            Me.columnSPECIES_5.MaxLength = 50
            Me.columnCOMMENTS.MaxLength = 2147483647
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnTransSpeciesPointInterceptsID.AutoIncrement = true
            Me.columnTransSpeciesPointInterceptsID.AutoIncrementSeed = -1
            Me.columnTransSpeciesPointInterceptsID.AutoIncrementStep = -1
            Me.columnTransSpeciesPointInterceptsID.AllowDBNull = false
            Me.columnTransSpeciesPointInterceptsID.ReadOnly = true
            Me.columnTransSpeciesPointInterceptsID.Unique = true
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblTransSpeciesPointInterceptsRow() As tblTransSpeciesPointInterceptsRow
            Return CType(Me.NewRow,tblTransSpeciesPointInterceptsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblTransSpeciesPointInterceptsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblTransSpeciesPointInterceptsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblTransSpeciesPointInterceptsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblTransSpeciesPointInterceptsRowChanged(Me, New tblTransSpeciesPointInterceptsRowChangeEvent(CType(e.Row,tblTransSpeciesPointInterceptsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblTransSpeciesPointInterceptsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblTransSpeciesPointInterceptsRowChanging(Me, New tblTransSpeciesPointInterceptsRowChangeEvent(CType(e.Row,tblTransSpeciesPointInterceptsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblTransSpeciesPointInterceptsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblTransSpeciesPointInterceptsRowDeleted(Me, New tblTransSpeciesPointInterceptsRowChangeEvent(CType(e.Row,tblTransSpeciesPointInterceptsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblTransSpeciesPointInterceptsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblTransSpeciesPointInterceptsRowDeleting(Me, New tblTransSpeciesPointInterceptsRowChangeEvent(CType(e.Row,tblTransSpeciesPointInterceptsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblTransSpeciesPointInterceptsRow(ByVal row As tblTransSpeciesPointInterceptsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblTransSpeciesPointInterceptsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblUSGSLabDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblUSGSLabDataRow)
        
        Private columnMaster_Num As Global.System.Data.DataColumn
        
        Private columnSiteName As Global.System.Data.DataColumn
        
        Private columnSiteDate As Global.System.Data.DataColumn
        
        Private columnSampleNumber As Global.System.Data.DataColumn
        
        Private columnAnalysisLab As Global.System.Data.DataColumn
        
        Private columnDOC_WW As Global.System.Data.DataColumn
        
        Private columnUV_WW As Global.System.Data.DataColumn
        
        Private columnSUVA_WW As Global.System.Data.DataColumn
        
        Private columnDelta_H2 As Global.System.Data.DataColumn
        
        Private columnd2H_StdDev As Global.System.Data.DataColumn
        
        Private columnDelta_O18 As Global.System.Data.DataColumn
        
        Private columnd18O_StdDev As Global.System.Data.DataColumn
        
        Private columnNumReplicates As Global.System.Data.DataColumn
        
        Private columnCO2_ppm As Global.System.Data.DataColumn
        
        Private columnCH4_ppm As Global.System.Data.DataColumn
        
        Private columnDIC_umolesL As Global.System.Data.DataColumn
        
        Private columnDateAnalyzed As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnUSGSLabDataID As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblUSGSLabData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Master_NumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaster_Num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SiteNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SiteDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SampleNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property AnalysisLabColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnalysisLab
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DOC_WWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOC_WW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property UV_WWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUV_WW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SUVA_WWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUVA_WW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Delta_H2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelta_H2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property d2H_StdDevColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnd2H_StdDev
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Delta_O18Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelta_O18
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property d18O_StdDevColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnd18O_StdDev
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NumReplicatesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumReplicates
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CO2_ppmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCO2_ppm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CH4_ppmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCH4_ppm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DIC_umolesLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIC_umolesL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DateAnalyzedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateAnalyzed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property USGSLabDataIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSGSLabDataID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblUSGSLabDataRow
            Get
                Return CType(Me.Rows(index),tblUSGSLabDataRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblUSGSLabDataRowChanging As tblUSGSLabDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblUSGSLabDataRowChanged As tblUSGSLabDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblUSGSLabDataRowDeleting As tblUSGSLabDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblUSGSLabDataRowDeleted As tblUSGSLabDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblUSGSLabDataRow(ByVal row As tblUSGSLabDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblUSGSLabDataRow( _
                    ByVal Master_Num As Long,  _
                    ByVal SiteName As String,  _
                    ByVal SiteDate As Date,  _
                    ByVal SampleNumber As String,  _
                    ByVal AnalysisLab As String,  _
                    ByVal DOC_WW As Double,  _
                    ByVal UV_WW As Double,  _
                    ByVal SUVA_WW As Double,  _
                    ByVal Delta_H2 As Decimal,  _
                    ByVal d2H_StdDev As Decimal,  _
                    ByVal Delta_O18 As Decimal,  _
                    ByVal d18O_StdDev As Decimal,  _
                    ByVal NumReplicates As Integer,  _
                    ByVal CO2_ppm As Double,  _
                    ByVal CH4_ppm As Double,  _
                    ByVal DIC_umolesL As Double,  _
                    ByVal DateAnalyzed As Date,  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte) As tblUSGSLabDataRow
            Dim rowtblUSGSLabDataRow As tblUSGSLabDataRow = CType(Me.NewRow,tblUSGSLabDataRow)
            Dim columnValuesArray() As Object = New Object() {Master_Num, SiteName, SiteDate, SampleNumber, AnalysisLab, DOC_WW, UV_WW, SUVA_WW, Delta_H2, d2H_StdDev, Delta_O18, d18O_StdDev, NumReplicates, CO2_ppm, CH4_ppm, DIC_umolesL, DateAnalyzed, Comments, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Nothing, row_timestamp}
            rowtblUSGSLabDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblUSGSLabDataRow)
            Return rowtblUSGSLabDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByUSGSLabDataID(ByVal USGSLabDataID As Integer) As tblUSGSLabDataRow
            Return CType(Me.Rows.Find(New Object() {USGSLabDataID}),tblUSGSLabDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblUSGSLabDataDataTable = CType(MyBase.Clone,tblUSGSLabDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblUSGSLabDataDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMaster_Num = MyBase.Columns("Master_Num")
            Me.columnSiteName = MyBase.Columns("SiteName")
            Me.columnSiteDate = MyBase.Columns("SiteDate")
            Me.columnSampleNumber = MyBase.Columns("SampleNumber")
            Me.columnAnalysisLab = MyBase.Columns("AnalysisLab")
            Me.columnDOC_WW = MyBase.Columns("DOC_WW")
            Me.columnUV_WW = MyBase.Columns("UV_WW")
            Me.columnSUVA_WW = MyBase.Columns("SUVA_WW")
            Me.columnDelta_H2 = MyBase.Columns("Delta_H2")
            Me.columnd2H_StdDev = MyBase.Columns("d2H_StdDev")
            Me.columnDelta_O18 = MyBase.Columns("Delta_O18")
            Me.columnd18O_StdDev = MyBase.Columns("d18O_StdDev")
            Me.columnNumReplicates = MyBase.Columns("NumReplicates")
            Me.columnCO2_ppm = MyBase.Columns("CO2_ppm")
            Me.columnCH4_ppm = MyBase.Columns("CH4_ppm")
            Me.columnDIC_umolesL = MyBase.Columns("DIC_umolesL")
            Me.columnDateAnalyzed = MyBase.Columns("DateAnalyzed")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnUSGSLabDataID = MyBase.Columns("USGSLabDataID")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMaster_Num = New Global.System.Data.DataColumn("Master_Num", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaster_Num)
            Me.columnSiteName = New Global.System.Data.DataColumn("SiteName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteName)
            Me.columnSiteDate = New Global.System.Data.DataColumn("SiteDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteDate)
            Me.columnSampleNumber = New Global.System.Data.DataColumn("SampleNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleNumber)
            Me.columnAnalysisLab = New Global.System.Data.DataColumn("AnalysisLab", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnalysisLab)
            Me.columnDOC_WW = New Global.System.Data.DataColumn("DOC_WW", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOC_WW)
            Me.columnUV_WW = New Global.System.Data.DataColumn("UV_WW", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUV_WW)
            Me.columnSUVA_WW = New Global.System.Data.DataColumn("SUVA_WW", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUVA_WW)
            Me.columnDelta_H2 = New Global.System.Data.DataColumn("Delta_H2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelta_H2)
            Me.columnd2H_StdDev = New Global.System.Data.DataColumn("d2H_StdDev", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnd2H_StdDev)
            Me.columnDelta_O18 = New Global.System.Data.DataColumn("Delta_O18", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelta_O18)
            Me.columnd18O_StdDev = New Global.System.Data.DataColumn("d18O_StdDev", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnd18O_StdDev)
            Me.columnNumReplicates = New Global.System.Data.DataColumn("NumReplicates", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumReplicates)
            Me.columnCO2_ppm = New Global.System.Data.DataColumn("CO2_ppm", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCO2_ppm)
            Me.columnCH4_ppm = New Global.System.Data.DataColumn("CH4_ppm", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCH4_ppm)
            Me.columnDIC_umolesL = New Global.System.Data.DataColumn("DIC_umolesL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIC_umolesL)
            Me.columnDateAnalyzed = New Global.System.Data.DataColumn("DateAnalyzed", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateAnalyzed)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnUSGSLabDataID = New Global.System.Data.DataColumn("USGSLabDataID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSGSLabDataID)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUSGSLabDataID}, true))
            Me.columnMaster_Num.AllowDBNull = false
            Me.columnSiteName.AllowDBNull = false
            Me.columnSiteName.MaxLength = 50
            Me.columnSiteDate.AllowDBNull = false
            Me.columnSampleNumber.MaxLength = 50
            Me.columnAnalysisLab.MaxLength = 30
            Me.columnComments.MaxLength = 2147483647
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnUSGSLabDataID.AutoIncrement = true
            Me.columnUSGSLabDataID.AutoIncrementSeed = -1
            Me.columnUSGSLabDataID.AutoIncrementStep = -1
            Me.columnUSGSLabDataID.AllowDBNull = false
            Me.columnUSGSLabDataID.ReadOnly = true
            Me.columnUSGSLabDataID.Unique = true
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblUSGSLabDataRow() As tblUSGSLabDataRow
            Return CType(Me.NewRow,tblUSGSLabDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblUSGSLabDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblUSGSLabDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblUSGSLabDataRowChangedEvent) Is Nothing) Then
                RaiseEvent tblUSGSLabDataRowChanged(Me, New tblUSGSLabDataRowChangeEvent(CType(e.Row,tblUSGSLabDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblUSGSLabDataRowChangingEvent) Is Nothing) Then
                RaiseEvent tblUSGSLabDataRowChanging(Me, New tblUSGSLabDataRowChangeEvent(CType(e.Row,tblUSGSLabDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblUSGSLabDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblUSGSLabDataRowDeleted(Me, New tblUSGSLabDataRowChangeEvent(CType(e.Row,tblUSGSLabDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblUSGSLabDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblUSGSLabDataRowDeleting(Me, New tblUSGSLabDataRowChangeEvent(CType(e.Row,tblUSGSLabDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblUSGSLabDataRow(ByVal row As tblUSGSLabDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblUSGSLabDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblVegProfilesDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblVegProfilesRow)
        
        Private columnPROFILEID As Global.System.Data.DataColumn
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnSAMPLEDATE As Global.System.Data.DataColumn
        
        Private columnSAMPLE_TIME As Global.System.Data.DataColumn
        
        Private columnTRANSECT_POINT As Global.System.Data.DataColumn
        
        Private columnWATER_DEPTH As Global.System.Data.DataColumn
        
        Private columnMAT_DEPTH As Global.System.Data.DataColumn
        
        Private columnBOTTOM_DEPTH As Global.System.Data.DataColumn
        
        Private columnMAX_PENETRATION As Global.System.Data.DataColumn
        
        Private columnSUBSTRATE As Global.System.Data.DataColumn
        
        Private columnGPS_TIME As Global.System.Data.DataColumn
        
        Private columnLONGITUDE As Global.System.Data.DataColumn
        
        Private columnLATITUDE As Global.System.Data.DataColumn
        
        Private columnHEIGHT As Global.System.Data.DataColumn
        
        Private columnTRANSECT_NUM As Global.System.Data.DataColumn
        
        Private columnFEAT_NAME As Global.System.Data.DataColumn
        
        Private columnDATAFILE As Global.System.Data.DataColumn
        
        Private columnGPS_HEIGHT As Global.System.Data.DataColumn
        
        Private columnVERT_PREC As Global.System.Data.DataColumn
        
        Private columnHORZ_PREC As Global.System.Data.DataColumn
        
        Private columnPOINT_ID As Global.System.Data.DataColumn
        
        Private columnSOURCE As Global.System.Data.DataColumn
        
        Private columnCOMMENTS As Global.System.Data.DataColumn
        
        Private columnMANUAL_MM As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnRecordCertifiedDate As Global.System.Data.DataColumn
        
        Private columnRecordCertifiedBy As Global.System.Data.DataColumn
        
        Private columnVegProfilesID As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblVegProfiles"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PROFILEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROFILEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLE_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLE_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSECT_POINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSECT_POINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WATER_DEPTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWATER_DEPTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MAT_DEPTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_DEPTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property BOTTOM_DEPTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBOTTOM_DEPTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MAX_PENETRATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAX_PENETRATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SUBSTRATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUBSTRATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property GPS_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGPS_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LONGITUDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLONGITUDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LATITUDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLATITUDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property HEIGHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEIGHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSECT_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSECT_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property FEAT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEAT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DATAFILEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATAFILE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property GPS_HEIGHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGPS_HEIGHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VERT_PRECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVERT_PREC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property HORZ_PRECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHORZ_PREC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property POINT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOINT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SOURCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOURCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MANUAL_MMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMANUAL_MM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordCertifiedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordCertifiedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordCertifiedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordCertifiedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VegProfilesIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVegProfilesID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblVegProfilesRow
            Get
                Return CType(Me.Rows(index),tblVegProfilesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblVegProfilesRowChanging As tblVegProfilesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblVegProfilesRowChanged As tblVegProfilesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblVegProfilesRowDeleting As tblVegProfilesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblVegProfilesRowDeleted As tblVegProfilesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblVegProfilesRow(ByVal row As tblVegProfilesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblVegProfilesRow( _
                    ByVal PROFILEID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLE_TIME As Date,  _
                    ByVal TRANSECT_POINT As Integer,  _
                    ByVal WATER_DEPTH As Double,  _
                    ByVal MAT_DEPTH As Double,  _
                    ByVal BOTTOM_DEPTH As Double,  _
                    ByVal MAX_PENETRATION As Double,  _
                    ByVal SUBSTRATE As String,  _
                    ByVal GPS_TIME As Date,  _
                    ByVal LONGITUDE As Double,  _
                    ByVal LATITUDE As Double,  _
                    ByVal HEIGHT As Double,  _
                    ByVal TRANSECT_NUM As Double,  _
                    ByVal FEAT_NAME As String,  _
                    ByVal DATAFILE As String,  _
                    ByVal GPS_HEIGHT As Double,  _
                    ByVal VERT_PREC As Double,  _
                    ByVal HORZ_PREC As Double,  _
                    ByVal POINT_ID As Double,  _
                    ByVal SOURCE As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal MANUAL_MM As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal RecordCertifiedDate As Date,  _
                    ByVal RecordCertifiedBy As String,  _
                    ByVal row_timestamp() As Byte) As tblVegProfilesRow
            Dim rowtblVegProfilesRow As tblVegProfilesRow = CType(Me.NewRow,tblVegProfilesRow)
            Dim columnValuesArray() As Object = New Object() {PROFILEID, PONDNAME, SAMPLEDATE, SAMPLE_TIME, TRANSECT_POINT, WATER_DEPTH, MAT_DEPTH, BOTTOM_DEPTH, MAX_PENETRATION, SUBSTRATE, GPS_TIME, LONGITUDE, LATITUDE, HEIGHT, TRANSECT_NUM, FEAT_NAME, DATAFILE, GPS_HEIGHT, VERT_PREC, HORZ_PREC, POINT_ID, SOURCE, COMMENTS, MANUAL_MM, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, RecordCertifiedDate, RecordCertifiedBy, Nothing, row_timestamp}
            rowtblVegProfilesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblVegProfilesRow)
            Return rowtblVegProfilesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByVegProfilesID(ByVal VegProfilesID As Integer) As tblVegProfilesRow
            Return CType(Me.Rows.Find(New Object() {VegProfilesID}),tblVegProfilesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblVegProfilesDataTable = CType(MyBase.Clone,tblVegProfilesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblVegProfilesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROFILEID = MyBase.Columns("PROFILEID")
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnSAMPLEDATE = MyBase.Columns("SAMPLEDATE")
            Me.columnSAMPLE_TIME = MyBase.Columns("SAMPLE_TIME")
            Me.columnTRANSECT_POINT = MyBase.Columns("TRANSECT_POINT")
            Me.columnWATER_DEPTH = MyBase.Columns("WATER_DEPTH")
            Me.columnMAT_DEPTH = MyBase.Columns("MAT_DEPTH")
            Me.columnBOTTOM_DEPTH = MyBase.Columns("BOTTOM_DEPTH")
            Me.columnMAX_PENETRATION = MyBase.Columns("MAX_PENETRATION")
            Me.columnSUBSTRATE = MyBase.Columns("SUBSTRATE")
            Me.columnGPS_TIME = MyBase.Columns("GPS_TIME")
            Me.columnLONGITUDE = MyBase.Columns("LONGITUDE")
            Me.columnLATITUDE = MyBase.Columns("LATITUDE")
            Me.columnHEIGHT = MyBase.Columns("HEIGHT")
            Me.columnTRANSECT_NUM = MyBase.Columns("TRANSECT_NUM")
            Me.columnFEAT_NAME = MyBase.Columns("FEAT_NAME")
            Me.columnDATAFILE = MyBase.Columns("DATAFILE")
            Me.columnGPS_HEIGHT = MyBase.Columns("GPS_HEIGHT")
            Me.columnVERT_PREC = MyBase.Columns("VERT_PREC")
            Me.columnHORZ_PREC = MyBase.Columns("HORZ_PREC")
            Me.columnPOINT_ID = MyBase.Columns("POINT_ID")
            Me.columnSOURCE = MyBase.Columns("SOURCE")
            Me.columnCOMMENTS = MyBase.Columns("COMMENTS")
            Me.columnMANUAL_MM = MyBase.Columns("MANUAL_MM")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnRecordCertifiedDate = MyBase.Columns("RecordCertifiedDate")
            Me.columnRecordCertifiedBy = MyBase.Columns("RecordCertifiedBy")
            Me.columnVegProfilesID = MyBase.Columns("VegProfilesID")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROFILEID = New Global.System.Data.DataColumn("PROFILEID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROFILEID)
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnSAMPLEDATE = New Global.System.Data.DataColumn("SAMPLEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEDATE)
            Me.columnSAMPLE_TIME = New Global.System.Data.DataColumn("SAMPLE_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLE_TIME)
            Me.columnTRANSECT_POINT = New Global.System.Data.DataColumn("TRANSECT_POINT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSECT_POINT)
            Me.columnWATER_DEPTH = New Global.System.Data.DataColumn("WATER_DEPTH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWATER_DEPTH)
            Me.columnMAT_DEPTH = New Global.System.Data.DataColumn("MAT_DEPTH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_DEPTH)
            Me.columnBOTTOM_DEPTH = New Global.System.Data.DataColumn("BOTTOM_DEPTH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBOTTOM_DEPTH)
            Me.columnMAX_PENETRATION = New Global.System.Data.DataColumn("MAX_PENETRATION", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAX_PENETRATION)
            Me.columnSUBSTRATE = New Global.System.Data.DataColumn("SUBSTRATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUBSTRATE)
            Me.columnGPS_TIME = New Global.System.Data.DataColumn("GPS_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGPS_TIME)
            Me.columnLONGITUDE = New Global.System.Data.DataColumn("LONGITUDE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLONGITUDE)
            Me.columnLATITUDE = New Global.System.Data.DataColumn("LATITUDE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLATITUDE)
            Me.columnHEIGHT = New Global.System.Data.DataColumn("HEIGHT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEIGHT)
            Me.columnTRANSECT_NUM = New Global.System.Data.DataColumn("TRANSECT_NUM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSECT_NUM)
            Me.columnFEAT_NAME = New Global.System.Data.DataColumn("FEAT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEAT_NAME)
            Me.columnDATAFILE = New Global.System.Data.DataColumn("DATAFILE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATAFILE)
            Me.columnGPS_HEIGHT = New Global.System.Data.DataColumn("GPS_HEIGHT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGPS_HEIGHT)
            Me.columnVERT_PREC = New Global.System.Data.DataColumn("VERT_PREC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVERT_PREC)
            Me.columnHORZ_PREC = New Global.System.Data.DataColumn("HORZ_PREC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHORZ_PREC)
            Me.columnPOINT_ID = New Global.System.Data.DataColumn("POINT_ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOINT_ID)
            Me.columnSOURCE = New Global.System.Data.DataColumn("SOURCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOURCE)
            Me.columnCOMMENTS = New Global.System.Data.DataColumn("COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS)
            Me.columnMANUAL_MM = New Global.System.Data.DataColumn("MANUAL_MM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMANUAL_MM)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnRecordCertifiedDate = New Global.System.Data.DataColumn("RecordCertifiedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordCertifiedDate)
            Me.columnRecordCertifiedBy = New Global.System.Data.DataColumn("RecordCertifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordCertifiedBy)
            Me.columnVegProfilesID = New Global.System.Data.DataColumn("VegProfilesID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVegProfilesID)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnVegProfilesID}, true))
            Me.columnPROFILEID.AllowDBNull = false
            Me.columnPONDNAME.AllowDBNull = false
            Me.columnPONDNAME.MaxLength = 50
            Me.columnSAMPLEDATE.AllowDBNull = false
            Me.columnSUBSTRATE.MaxLength = 150
            Me.columnFEAT_NAME.MaxLength = 255
            Me.columnDATAFILE.MaxLength = 255
            Me.columnSOURCE.MaxLength = 255
            Me.columnCOMMENTS.MaxLength = 2147483647
            Me.columnMANUAL_MM.MaxLength = 20
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnRecordCertifiedBy.MaxLength = 50
            Me.columnVegProfilesID.AutoIncrement = true
            Me.columnVegProfilesID.AutoIncrementSeed = -1
            Me.columnVegProfilesID.AutoIncrementStep = -1
            Me.columnVegProfilesID.AllowDBNull = false
            Me.columnVegProfilesID.ReadOnly = true
            Me.columnVegProfilesID.Unique = true
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblVegProfilesRow() As tblVegProfilesRow
            Return CType(Me.NewRow,tblVegProfilesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblVegProfilesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblVegProfilesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblVegProfilesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblVegProfilesRowChanged(Me, New tblVegProfilesRowChangeEvent(CType(e.Row,tblVegProfilesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblVegProfilesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblVegProfilesRowChanging(Me, New tblVegProfilesRowChangeEvent(CType(e.Row,tblVegProfilesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblVegProfilesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblVegProfilesRowDeleted(Me, New tblVegProfilesRowChangeEvent(CType(e.Row,tblVegProfilesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblVegProfilesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblVegProfilesRowDeleting(Me, New tblVegProfilesRowChangeEvent(CType(e.Row,tblVegProfilesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblVegProfilesRow(ByVal row As tblVegProfilesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblVegProfilesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblVegTransectsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblVegTransectsRow)
        
        Private columnPONDVEGTRANSSPPID As Global.System.Data.DataColumn
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnSAMPLEDATE As Global.System.Data.DataColumn
        
        Private columnTRANSECT As Global.System.Data.DataColumn
        
        Private columnOBSERVERS As Global.System.Data.DataColumn
        
        Private columnSPECIES As Global.System.Data.DataColumn
        
        Private columnSPECIESOTHER As Global.System.Data.DataColumn
        
        Private columnSPECIESSTART As Global.System.Data.DataColumn
        
        Private columnSPECIESSTOP As Global.System.Data.DataColumn
        
        Private columnSPECIESDISTANCE As Global.System.Data.DataColumn
        
        Private columnVEGTRANSNOTES As Global.System.Data.DataColumn
        
        Private columnESTDISTANCE As Global.System.Data.DataColumn
        
        Private columnEXCLUDE As Global.System.Data.DataColumn
        
        Private columnANALYSIS_CODE As Global.System.Data.DataColumn
        
        Private columnSAMPLETIME As Global.System.Data.DataColumn
        
        Private columnDEVICE_ID As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnVegTransectsID As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        Private columnQC_Notes As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblVegTransects"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDVEGTRANSSPPIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDVEGTRANSSPPID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TRANSECTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSECT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property OBSERVERSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOBSERVERS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SPECIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SPECIESOTHERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIESOTHER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SPECIESSTARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIESSTART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SPECIESSTOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIESSTOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SPECIESDISTANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIESDISTANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VEGTRANSNOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVEGTRANSNOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ESTDISTANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTDISTANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property EXCLUDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCLUDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ANALYSIS_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANALYSIS_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLETIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLETIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DEVICE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEVICE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VegTransectsIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVegTransectsID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property QC_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQC_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblVegTransectsRow
            Get
                Return CType(Me.Rows(index),tblVegTransectsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblVegTransectsRowChanging As tblVegTransectsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblVegTransectsRowChanged As tblVegTransectsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblVegTransectsRowDeleting As tblVegTransectsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblVegTransectsRowDeleted As tblVegTransectsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblVegTransectsRow(ByVal row As tblVegTransectsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblVegTransectsRow( _
                    ByVal PONDVEGTRANSSPPID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal TRANSECT As Integer,  _
                    ByVal OBSERVERS As String,  _
                    ByVal SPECIES As String,  _
                    ByVal SPECIESOTHER As String,  _
                    ByVal SPECIESSTART As Integer,  _
                    ByVal SPECIESSTOP As Integer,  _
                    ByVal SPECIESDISTANCE As Integer,  _
                    ByVal VEGTRANSNOTES As String,  _
                    ByVal ESTDISTANCE As Boolean,  _
                    ByVal EXCLUDE As Boolean,  _
                    ByVal ANALYSIS_CODE As String,  _
                    ByVal SAMPLETIME As System.TimeSpan,  _
                    ByVal DEVICE_ID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte,  _
                    ByVal QC_Notes As String) As tblVegTransectsRow
            Dim rowtblVegTransectsRow As tblVegTransectsRow = CType(Me.NewRow,tblVegTransectsRow)
            Dim columnValuesArray() As Object = New Object() {PONDVEGTRANSSPPID, PONDNAME, SAMPLEDATE, TRANSECT, OBSERVERS, SPECIES, SPECIESOTHER, SPECIESSTART, SPECIESSTOP, SPECIESDISTANCE, VEGTRANSNOTES, ESTDISTANCE, EXCLUDE, ANALYSIS_CODE, SAMPLETIME, DEVICE_ID, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Nothing, row_timestamp, QC_Notes}
            rowtblVegTransectsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblVegTransectsRow)
            Return rowtblVegTransectsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByVegTransectsID(ByVal VegTransectsID As Integer) As tblVegTransectsRow
            Return CType(Me.Rows.Find(New Object() {VegTransectsID}),tblVegTransectsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblVegTransectsDataTable = CType(MyBase.Clone,tblVegTransectsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblVegTransectsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPONDVEGTRANSSPPID = MyBase.Columns("PONDVEGTRANSSPPID")
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnSAMPLEDATE = MyBase.Columns("SAMPLEDATE")
            Me.columnTRANSECT = MyBase.Columns("TRANSECT")
            Me.columnOBSERVERS = MyBase.Columns("OBSERVERS")
            Me.columnSPECIES = MyBase.Columns("SPECIES")
            Me.columnSPECIESOTHER = MyBase.Columns("SPECIESOTHER")
            Me.columnSPECIESSTART = MyBase.Columns("SPECIESSTART")
            Me.columnSPECIESSTOP = MyBase.Columns("SPECIESSTOP")
            Me.columnSPECIESDISTANCE = MyBase.Columns("SPECIESDISTANCE")
            Me.columnVEGTRANSNOTES = MyBase.Columns("VEGTRANSNOTES")
            Me.columnESTDISTANCE = MyBase.Columns("ESTDISTANCE")
            Me.columnEXCLUDE = MyBase.Columns("EXCLUDE")
            Me.columnANALYSIS_CODE = MyBase.Columns("ANALYSIS_CODE")
            Me.columnSAMPLETIME = MyBase.Columns("SAMPLETIME")
            Me.columnDEVICE_ID = MyBase.Columns("DEVICE_ID")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnVegTransectsID = MyBase.Columns("VegTransectsID")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
            Me.columnQC_Notes = MyBase.Columns("QC_Notes")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPONDVEGTRANSSPPID = New Global.System.Data.DataColumn("PONDVEGTRANSSPPID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDVEGTRANSSPPID)
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnSAMPLEDATE = New Global.System.Data.DataColumn("SAMPLEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEDATE)
            Me.columnTRANSECT = New Global.System.Data.DataColumn("TRANSECT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSECT)
            Me.columnOBSERVERS = New Global.System.Data.DataColumn("OBSERVERS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOBSERVERS)
            Me.columnSPECIES = New Global.System.Data.DataColumn("SPECIES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIES)
            Me.columnSPECIESOTHER = New Global.System.Data.DataColumn("SPECIESOTHER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIESOTHER)
            Me.columnSPECIESSTART = New Global.System.Data.DataColumn("SPECIESSTART", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIESSTART)
            Me.columnSPECIESSTOP = New Global.System.Data.DataColumn("SPECIESSTOP", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIESSTOP)
            Me.columnSPECIESDISTANCE = New Global.System.Data.DataColumn("SPECIESDISTANCE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIESDISTANCE)
            Me.columnVEGTRANSNOTES = New Global.System.Data.DataColumn("VEGTRANSNOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVEGTRANSNOTES)
            Me.columnESTDISTANCE = New Global.System.Data.DataColumn("ESTDISTANCE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTDISTANCE)
            Me.columnEXCLUDE = New Global.System.Data.DataColumn("EXCLUDE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCLUDE)
            Me.columnANALYSIS_CODE = New Global.System.Data.DataColumn("ANALYSIS_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANALYSIS_CODE)
            Me.columnSAMPLETIME = New Global.System.Data.DataColumn("SAMPLETIME", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLETIME)
            Me.columnDEVICE_ID = New Global.System.Data.DataColumn("DEVICE_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEVICE_ID)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnVegTransectsID = New Global.System.Data.DataColumn("VegTransectsID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVegTransectsID)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.columnQC_Notes = New Global.System.Data.DataColumn("QC_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQC_Notes)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnVegTransectsID}, true))
            Me.columnPONDVEGTRANSSPPID.AllowDBNull = false
            Me.columnPONDNAME.AllowDBNull = false
            Me.columnPONDNAME.MaxLength = 50
            Me.columnSAMPLEDATE.AllowDBNull = false
            Me.columnTRANSECT.AllowDBNull = false
            Me.columnOBSERVERS.MaxLength = 50
            Me.columnSPECIES.AllowDBNull = false
            Me.columnSPECIES.MaxLength = 50
            Me.columnSPECIESOTHER.MaxLength = 500
            Me.columnVEGTRANSNOTES.MaxLength = 4000
            Me.columnANALYSIS_CODE.MaxLength = 50
            Me.columnDEVICE_ID.MaxLength = 20
            Me.columnRecordInsertedDate.AllowDBNull = false
            Me.columnRecordInsertedBy.AllowDBNull = false
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedDate.AllowDBNull = false
            Me.columnRecordUpdatedBy.AllowDBNull = false
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnVegTransectsID.AutoIncrement = true
            Me.columnVegTransectsID.AutoIncrementSeed = -1
            Me.columnVegTransectsID.AutoIncrementStep = -1
            Me.columnVegTransectsID.AllowDBNull = false
            Me.columnVegTransectsID.ReadOnly = true
            Me.columnVegTransectsID.Unique = true
            Me.columnrow_timestamp.ReadOnly = true
            Me.columnQC_Notes.MaxLength = 1000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblVegTransectsRow() As tblVegTransectsRow
            Return CType(Me.NewRow,tblVegTransectsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblVegTransectsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblVegTransectsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblVegTransectsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblVegTransectsRowChanged(Me, New tblVegTransectsRowChangeEvent(CType(e.Row,tblVegTransectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblVegTransectsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblVegTransectsRowChanging(Me, New tblVegTransectsRowChangeEvent(CType(e.Row,tblVegTransectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblVegTransectsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblVegTransectsRowDeleted(Me, New tblVegTransectsRowChangeEvent(CType(e.Row,tblVegTransectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblVegTransectsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblVegTransectsRowDeleting(Me, New tblVegTransectsRowChangeEvent(CType(e.Row,tblVegTransectsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblVegTransectsRow(ByVal row As tblVegTransectsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblVegTransectsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblWaterChemistryDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblWaterChemistryRow)
        
        Private columnWaterChemistryID As Global.System.Data.DataColumn
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnSAMPLEDATE As Global.System.Data.DataColumn
        
        Private columnSAMPLENUMBER As Global.System.Data.DataColumn
        
        Private columnCHEM_LAB As Global.System.Data.DataColumn
        
        Private columnCHEM_METHOD As Global.System.Data.DataColumn
        
        Private columnLAB_SAMPLE_NUMBER As Global.System.Data.DataColumn
        
        Private columnLAB_DATE As Global.System.Data.DataColumn
        
        Private columnDELIVERY_DATE As Global.System.Data.DataColumn
        
        Private columnTHAW_DATE As Global.System.Data.DataColumn
        
        Private columnDUPLICATED_CHEM_ANALYSIS As Global.System.Data.DataColumn
        
        Private columnPH As Global.System.Data.DataColumn
        
        Private columnPH_Notes As Global.System.Data.DataColumn
        
        Private columnPH_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnPH_MDL_YN As Global.System.Data.DataColumn
        
        Private columnPH_LABDATE As Global.System.Data.DataColumn
        
        Private columnTOTAL_ALKALINITY As Global.System.Data.DataColumn
        
        Private columnTOTAL_ALKALINITY_Notes As Global.System.Data.DataColumn
        
        Private columnALKALINITY_MG_L As Global.System.Data.DataColumn
        
        Private columnALKALINITY_MG_L_Notes As Global.System.Data.DataColumn
        
        Private columnALK_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnALK_MDL_YN As Global.System.Data.DataColumn
        
        Private columnALK_LABDATE As Global.System.Data.DataColumn
        
        Private columnCONDUCTIVITY_AES As Global.System.Data.DataColumn
        
        Private columnCONDUCTIVITY_AES_Notes As Global.System.Data.DataColumn
        
        Private columnCOND_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnCOND_MDL_YN As Global.System.Data.DataColumn
        
        Private columnCOND_LABDATE As Global.System.Data.DataColumn
        
        Private columnTKN_MG_L As Global.System.Data.DataColumn
        
        Private columnTKN_Notes As Global.System.Data.DataColumn
        
        Private columnTKN_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnTKN_MDL_YN As Global.System.Data.DataColumn
        
        Private columnTN_MG_L As Global.System.Data.DataColumn
        
        Private columnTN_Notes As Global.System.Data.DataColumn
        
        Private columnTN_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnTN_MDL_YN As Global.System.Data.DataColumn
        
        Private columnTN_LABDATE As Global.System.Data.DataColumn
        
        Private columnTDN_MG_L As Global.System.Data.DataColumn
        
        Private columnTDN_Notes As Global.System.Data.DataColumn
        
        Private columnTDN_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnTDN_MDL_YN As Global.System.Data.DataColumn
        
        Private columnTDN_LABDATE As Global.System.Data.DataColumn
        
        Private columnTP_MG_L As Global.System.Data.DataColumn
        
        Private columnTP_Notes As Global.System.Data.DataColumn
        
        Private columnTP_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnTP_MDL_YN As Global.System.Data.DataColumn
        
        Private columnTP_LABDATE As Global.System.Data.DataColumn
        
        Private columnTDP_MG_L As Global.System.Data.DataColumn
        
        Private columnTDP_Notes As Global.System.Data.DataColumn
        
        Private columnTDP_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnTDP_MDL_YN As Global.System.Data.DataColumn
        
        Private columnTDP_LABDATE As Global.System.Data.DataColumn
        
        Private columnPO4_P_MG_L As Global.System.Data.DataColumn
        
        Private columnPO4_P_Notes As Global.System.Data.DataColumn
        
        Private columnPO4_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnPO4_MDL_YN As Global.System.Data.DataColumn
        
        Private columnPO4_LABDATE As Global.System.Data.DataColumn
        
        Private columnNO3_N_MG_L As Global.System.Data.DataColumn
        
        Private columnNO3_N_Notes As Global.System.Data.DataColumn
        
        Private columnNO3_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnNO3_MDL_YN As Global.System.Data.DataColumn
        
        Private columnNO3_LABDATE As Global.System.Data.DataColumn
        
        Private columnNH3_N_MG_L As Global.System.Data.DataColumn
        
        Private columnNH3_N_Notes As Global.System.Data.DataColumn
        
        Private columnNH3_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnNH3_MDL_YN As Global.System.Data.DataColumn
        
        Private columnNH3_LABDATE As Global.System.Data.DataColumn
        
        Private columnSI_MG_L As Global.System.Data.DataColumn
        
        Private columnSI_Notes As Global.System.Data.DataColumn
        
        Private columnSI_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnSI_MDL_YN As Global.System.Data.DataColumn
        
        Private columnSI_LABDATE As Global.System.Data.DataColumn
        
        Private columnNA_MG_L As Global.System.Data.DataColumn
        
        Private columnNA_Notes As Global.System.Data.DataColumn
        
        Private columnNA_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnNA_MDL_YN As Global.System.Data.DataColumn
        
        Private columnNA_LABDATE As Global.System.Data.DataColumn
        
        Private columnK_MG_L As Global.System.Data.DataColumn
        
        Private columnK_Notes As Global.System.Data.DataColumn
        
        Private columnK_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnK_MDL_YN As Global.System.Data.DataColumn
        
        Private columnK_LABDATE As Global.System.Data.DataColumn
        
        Private columnCA_MG_L As Global.System.Data.DataColumn
        
        Private columnCA_Notes As Global.System.Data.DataColumn
        
        Private columnCA_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnCA_MDL_YN As Global.System.Data.DataColumn
        
        Private columnCA_LABDATE As Global.System.Data.DataColumn
        
        Private columnMG_MG_L As Global.System.Data.DataColumn
        
        Private columnMG_Notes As Global.System.Data.DataColumn
        
        Private columnMG_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnMG_MDL_YN As Global.System.Data.DataColumn
        
        Private columnMG_LABDATE As Global.System.Data.DataColumn
        
        Private columnSO4_S_MG_L As Global.System.Data.DataColumn
        
        Private columnSO4_S_Notes As Global.System.Data.DataColumn
        
        Private columnSO4_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnSO4_MDL_YN As Global.System.Data.DataColumn
        
        Private columnSO4_LABDATE As Global.System.Data.DataColumn
        
        Private columnCL_MG_L As Global.System.Data.DataColumn
        
        Private columnCL_Notes As Global.System.Data.DataColumn
        
        Private columnCL_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnCL_MDL_YN As Global.System.Data.DataColumn
        
        Private columnCL_LABDATE As Global.System.Data.DataColumn
        
        Private columnDOC_MG_L As Global.System.Data.DataColumn
        
        Private columnDOC_Notes As Global.System.Data.DataColumn
        
        Private columnDOC_MDL_LEVEL As Global.System.Data.DataColumn
        
        Private columnDOC_MDL_YN As Global.System.Data.DataColumn
        
        Private columnDOC_LABDATE As Global.System.Data.DataColumn
        
        Private columnNOTES As Global.System.Data.DataColumn
        
        Private columnCOMMENTS As Global.System.Data.DataColumn
        
        Private columnSOURCE As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnRecordCertifiedDate As Global.System.Data.DataColumn
        
        Private columnRecordCertifiedBy As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblWaterChemistry"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WaterChemistryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWaterChemistryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CHEM_LABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHEM_LAB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CHEM_METHODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHEM_METHOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LAB_SAMPLE_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAB_SAMPLE_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property LAB_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAB_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DELIVERY_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELIVERY_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property THAW_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHAW_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DUPLICATED_CHEM_ANALYSISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUPLICATED_CHEM_ANALYSIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PH_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPH_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PH_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPH_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PH_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPH_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PH_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPH_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TOTAL_ALKALINITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_ALKALINITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TOTAL_ALKALINITY_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_ALKALINITY_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ALKALINITY_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALKALINITY_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ALKALINITY_MG_L_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALKALINITY_MG_L_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ALK_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALK_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ALK_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALK_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ALK_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALK_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CONDUCTIVITY_AESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONDUCTIVITY_AES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CONDUCTIVITY_AES_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONDUCTIVITY_AES_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property COND_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOND_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property COND_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOND_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property COND_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOND_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TKN_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTKN_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TKN_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTKN_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TKN_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTKN_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TKN_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTKN_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TN_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTN_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TN_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTN_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TN_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTN_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TN_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTN_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TN_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTN_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TDN_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDN_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TDN_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDN_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TDN_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDN_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TDN_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDN_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TDN_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDN_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TP_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTP_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TP_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTP_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TP_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTP_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TP_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTP_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TP_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTP_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TDP_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDP_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TDP_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDP_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TDP_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDP_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TDP_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDP_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TDP_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDP_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PO4_P_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO4_P_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PO4_P_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO4_P_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PO4_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO4_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PO4_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO4_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PO4_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO4_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NO3_N_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNO3_N_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NO3_N_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNO3_N_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NO3_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNO3_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NO3_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNO3_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NO3_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNO3_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NH3_N_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNH3_N_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NH3_N_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNH3_N_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NH3_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNH3_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NH3_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNH3_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NH3_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNH3_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SI_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSI_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SI_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSI_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SI_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSI_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SI_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSI_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SI_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSI_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NA_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNA_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NA_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNA_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NA_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNA_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NA_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNA_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NA_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNA_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property K_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnK_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property K_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnK_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property K_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnK_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property K_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnK_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property K_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnK_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CA_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCA_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CA_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCA_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CA_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCA_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CA_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCA_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CA_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCA_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MG_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMG_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MG_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMG_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MG_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMG_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MG_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMG_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MG_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMG_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SO4_S_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO4_S_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SO4_S_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO4_S_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SO4_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO4_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SO4_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO4_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SO4_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSO4_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CL_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCL_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CL_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCL_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CL_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCL_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CL_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCL_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CL_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCL_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DOC_MG_LColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOC_MG_L
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DOC_NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOC_Notes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DOC_MDL_LEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOC_MDL_LEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DOC_MDL_YNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOC_MDL_YN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DOC_LABDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOC_LABDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SOURCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOURCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordCertifiedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordCertifiedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordCertifiedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordCertifiedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblWaterChemistryRow
            Get
                Return CType(Me.Rows(index),tblWaterChemistryRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblWaterChemistryRowChanging As tblWaterChemistryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblWaterChemistryRowChanged As tblWaterChemistryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblWaterChemistryRowDeleting As tblWaterChemistryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblWaterChemistryRowDeleted As tblWaterChemistryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblWaterChemistryRow(ByVal row As tblWaterChemistryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblWaterChemistryRow( _
                    ByVal WaterChemistryID As System.Guid,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal CHEM_LAB As String,  _
                    ByVal CHEM_METHOD As String,  _
                    ByVal LAB_SAMPLE_NUMBER As Integer,  _
                    ByVal LAB_DATE As Date,  _
                    ByVal DELIVERY_DATE As Date,  _
                    ByVal THAW_DATE As Date,  _
                    ByVal DUPLICATED_CHEM_ANALYSIS As Boolean,  _
                    ByVal PH As Double,  _
                    ByVal PH_Notes As String,  _
                    ByVal PH_MDL_LEVEL As Double,  _
                    ByVal PH_MDL_YN As Boolean,  _
                    ByVal PH_LABDATE As Date,  _
                    ByVal TOTAL_ALKALINITY As Double,  _
                    ByVal TOTAL_ALKALINITY_Notes As String,  _
                    ByVal ALKALINITY_MG_L As Double,  _
                    ByVal ALKALINITY_MG_L_Notes As String,  _
                    ByVal ALK_MDL_LEVEL As Double,  _
                    ByVal ALK_MDL_YN As Boolean,  _
                    ByVal ALK_LABDATE As Date,  _
                    ByVal CONDUCTIVITY_AES As Double,  _
                    ByVal CONDUCTIVITY_AES_Notes As String,  _
                    ByVal COND_MDL_LEVEL As Double,  _
                    ByVal COND_MDL_YN As Boolean,  _
                    ByVal COND_LABDATE As Date,  _
                    ByVal TKN_MG_L As Double,  _
                    ByVal TKN_Notes As String,  _
                    ByVal TKN_MDL_LEVEL As Double,  _
                    ByVal TKN_MDL_YN As Boolean,  _
                    ByVal TN_MG_L As Double,  _
                    ByVal TN_Notes As String,  _
                    ByVal TN_MDL_LEVEL As Double,  _
                    ByVal TN_MDL_YN As Boolean,  _
                    ByVal TN_LABDATE As Date,  _
                    ByVal TDN_MG_L As Double,  _
                    ByVal TDN_Notes As String,  _
                    ByVal TDN_MDL_LEVEL As Double,  _
                    ByVal TDN_MDL_YN As Boolean,  _
                    ByVal TDN_LABDATE As Date,  _
                    ByVal TP_MG_L As Double,  _
                    ByVal TP_Notes As String,  _
                    ByVal TP_MDL_LEVEL As Double,  _
                    ByVal TP_MDL_YN As Boolean,  _
                    ByVal TP_LABDATE As Date,  _
                    ByVal TDP_MG_L As Double,  _
                    ByVal TDP_Notes As String,  _
                    ByVal TDP_MDL_LEVEL As Double,  _
                    ByVal TDP_MDL_YN As Boolean,  _
                    ByVal TDP_LABDATE As Date,  _
                    ByVal PO4_P_MG_L As Double,  _
                    ByVal PO4_P_Notes As String,  _
                    ByVal PO4_MDL_LEVEL As Double,  _
                    ByVal PO4_MDL_YN As Boolean,  _
                    ByVal PO4_LABDATE As Date,  _
                    ByVal NO3_N_MG_L As Double,  _
                    ByVal NO3_N_Notes As String,  _
                    ByVal NO3_MDL_LEVEL As Double,  _
                    ByVal NO3_MDL_YN As Boolean,  _
                    ByVal NO3_LABDATE As Date,  _
                    ByVal NH3_N_MG_L As Double,  _
                    ByVal NH3_N_Notes As String,  _
                    ByVal NH3_MDL_LEVEL As Double,  _
                    ByVal NH3_MDL_YN As Boolean,  _
                    ByVal NH3_LABDATE As Date,  _
                    ByVal SI_MG_L As Double,  _
                    ByVal SI_Notes As String,  _
                    ByVal SI_MDL_LEVEL As Double,  _
                    ByVal SI_MDL_YN As Boolean,  _
                    ByVal SI_LABDATE As Date,  _
                    ByVal NA_MG_L As Double,  _
                    ByVal NA_Notes As String,  _
                    ByVal NA_MDL_LEVEL As Double,  _
                    ByVal NA_MDL_YN As Boolean,  _
                    ByVal NA_LABDATE As Date,  _
                    ByVal K_MG_L As Double,  _
                    ByVal K_Notes As String,  _
                    ByVal K_MDL_LEVEL As Double,  _
                    ByVal K_MDL_YN As Boolean,  _
                    ByVal K_LABDATE As Date,  _
                    ByVal CA_MG_L As Double,  _
                    ByVal CA_Notes As String,  _
                    ByVal CA_MDL_LEVEL As Double,  _
                    ByVal CA_MDL_YN As Boolean,  _
                    ByVal CA_LABDATE As Date,  _
                    ByVal MG_MG_L As Double,  _
                    ByVal MG_Notes As String,  _
                    ByVal MG_MDL_LEVEL As Double,  _
                    ByVal MG_MDL_YN As Boolean,  _
                    ByVal MG_LABDATE As Date,  _
                    ByVal SO4_S_MG_L As Double,  _
                    ByVal SO4_S_Notes As String,  _
                    ByVal SO4_MDL_LEVEL As Double,  _
                    ByVal SO4_MDL_YN As Boolean,  _
                    ByVal SO4_LABDATE As Date,  _
                    ByVal CL_MG_L As Double,  _
                    ByVal CL_Notes As String,  _
                    ByVal CL_MDL_LEVEL As Double,  _
                    ByVal CL_MDL_YN As Boolean,  _
                    ByVal CL_LABDATE As Date,  _
                    ByVal DOC_MG_L As Double,  _
                    ByVal DOC_Notes As String,  _
                    ByVal DOC_MDL_LEVEL As Double,  _
                    ByVal DOC_MDL_YN As Boolean,  _
                    ByVal DOC_LABDATE As Date,  _
                    ByVal NOTES As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal RecordCertifiedDate As Date,  _
                    ByVal RecordCertifiedBy As String,  _
                    ByVal row_timestamp() As Byte) As tblWaterChemistryRow
            Dim rowtblWaterChemistryRow As tblWaterChemistryRow = CType(Me.NewRow,tblWaterChemistryRow)
            Dim columnValuesArray() As Object = New Object() {WaterChemistryID, PONDNAME, SAMPLEDATE, SAMPLENUMBER, CHEM_LAB, CHEM_METHOD, LAB_SAMPLE_NUMBER, LAB_DATE, DELIVERY_DATE, THAW_DATE, DUPLICATED_CHEM_ANALYSIS, PH, PH_Notes, PH_MDL_LEVEL, PH_MDL_YN, PH_LABDATE, TOTAL_ALKALINITY, TOTAL_ALKALINITY_Notes, ALKALINITY_MG_L, ALKALINITY_MG_L_Notes, ALK_MDL_LEVEL, ALK_MDL_YN, ALK_LABDATE, CONDUCTIVITY_AES, CONDUCTIVITY_AES_Notes, COND_MDL_LEVEL, COND_MDL_YN, COND_LABDATE, TKN_MG_L, TKN_Notes, TKN_MDL_LEVEL, TKN_MDL_YN, TN_MG_L, TN_Notes, TN_MDL_LEVEL, TN_MDL_YN, TN_LABDATE, TDN_MG_L, TDN_Notes, TDN_MDL_LEVEL, TDN_MDL_YN, TDN_LABDATE, TP_MG_L, TP_Notes, TP_MDL_LEVEL, TP_MDL_YN, TP_LABDATE, TDP_MG_L, TDP_Notes, TDP_MDL_LEVEL, TDP_MDL_YN, TDP_LABDATE, PO4_P_MG_L, PO4_P_Notes, PO4_MDL_LEVEL, PO4_MDL_YN, PO4_LABDATE, NO3_N_MG_L, NO3_N_Notes, NO3_MDL_LEVEL, NO3_MDL_YN, NO3_LABDATE, NH3_N_MG_L, NH3_N_Notes, NH3_MDL_LEVEL, NH3_MDL_YN, NH3_LABDATE, SI_MG_L, SI_Notes, SI_MDL_LEVEL, SI_MDL_YN, SI_LABDATE, NA_MG_L, NA_Notes, NA_MDL_LEVEL, NA_MDL_YN, NA_LABDATE, K_MG_L, K_Notes, K_MDL_LEVEL, K_MDL_YN, K_LABDATE, CA_MG_L, CA_Notes, CA_MDL_LEVEL, CA_MDL_YN, CA_LABDATE, MG_MG_L, MG_Notes, MG_MDL_LEVEL, MG_MDL_YN, MG_LABDATE, SO4_S_MG_L, SO4_S_Notes, SO4_MDL_LEVEL, SO4_MDL_YN, SO4_LABDATE, CL_MG_L, CL_Notes, CL_MDL_LEVEL, CL_MDL_YN, CL_LABDATE, DOC_MG_L, DOC_Notes, DOC_MDL_LEVEL, DOC_MDL_YN, DOC_LABDATE, NOTES, COMMENTS, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, RecordCertifiedDate, RecordCertifiedBy, row_timestamp}
            rowtblWaterChemistryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblWaterChemistryRow)
            Return rowtblWaterChemistryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByWaterChemistryIDPONDNAMESAMPLEDATESAMPLENUMBER(ByVal WaterChemistryID As System.Guid, ByVal PONDNAME As String, ByVal SAMPLEDATE As Date, ByVal SAMPLENUMBER As String) As tblWaterChemistryRow
            Return CType(Me.Rows.Find(New Object() {WaterChemistryID, PONDNAME, SAMPLEDATE, SAMPLENUMBER}),tblWaterChemistryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblWaterChemistryDataTable = CType(MyBase.Clone,tblWaterChemistryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblWaterChemistryDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnWaterChemistryID = MyBase.Columns("WaterChemistryID")
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnSAMPLEDATE = MyBase.Columns("SAMPLEDATE")
            Me.columnSAMPLENUMBER = MyBase.Columns("SAMPLENUMBER")
            Me.columnCHEM_LAB = MyBase.Columns("CHEM_LAB")
            Me.columnCHEM_METHOD = MyBase.Columns("CHEM_METHOD")
            Me.columnLAB_SAMPLE_NUMBER = MyBase.Columns("LAB_SAMPLE_NUMBER")
            Me.columnLAB_DATE = MyBase.Columns("LAB_DATE")
            Me.columnDELIVERY_DATE = MyBase.Columns("DELIVERY_DATE")
            Me.columnTHAW_DATE = MyBase.Columns("THAW_DATE")
            Me.columnDUPLICATED_CHEM_ANALYSIS = MyBase.Columns("DUPLICATED_CHEM_ANALYSIS")
            Me.columnPH = MyBase.Columns("PH")
            Me.columnPH_Notes = MyBase.Columns("PH_Notes")
            Me.columnPH_MDL_LEVEL = MyBase.Columns("PH_MDL_LEVEL")
            Me.columnPH_MDL_YN = MyBase.Columns("PH_MDL_YN")
            Me.columnPH_LABDATE = MyBase.Columns("PH_LABDATE")
            Me.columnTOTAL_ALKALINITY = MyBase.Columns("TOTAL_ALKALINITY")
            Me.columnTOTAL_ALKALINITY_Notes = MyBase.Columns("TOTAL_ALKALINITY_Notes")
            Me.columnALKALINITY_MG_L = MyBase.Columns("ALKALINITY_MG_L")
            Me.columnALKALINITY_MG_L_Notes = MyBase.Columns("ALKALINITY_MG_L_Notes")
            Me.columnALK_MDL_LEVEL = MyBase.Columns("ALK_MDL_LEVEL")
            Me.columnALK_MDL_YN = MyBase.Columns("ALK_MDL_YN")
            Me.columnALK_LABDATE = MyBase.Columns("ALK_LABDATE")
            Me.columnCONDUCTIVITY_AES = MyBase.Columns("CONDUCTIVITY_AES")
            Me.columnCONDUCTIVITY_AES_Notes = MyBase.Columns("CONDUCTIVITY_AES_Notes")
            Me.columnCOND_MDL_LEVEL = MyBase.Columns("COND_MDL_LEVEL")
            Me.columnCOND_MDL_YN = MyBase.Columns("COND_MDL_YN")
            Me.columnCOND_LABDATE = MyBase.Columns("COND_LABDATE")
            Me.columnTKN_MG_L = MyBase.Columns("TKN_MG_L")
            Me.columnTKN_Notes = MyBase.Columns("TKN_Notes")
            Me.columnTKN_MDL_LEVEL = MyBase.Columns("TKN_MDL_LEVEL")
            Me.columnTKN_MDL_YN = MyBase.Columns("TKN_MDL_YN")
            Me.columnTN_MG_L = MyBase.Columns("TN_MG_L")
            Me.columnTN_Notes = MyBase.Columns("TN_Notes")
            Me.columnTN_MDL_LEVEL = MyBase.Columns("TN_MDL_LEVEL")
            Me.columnTN_MDL_YN = MyBase.Columns("TN_MDL_YN")
            Me.columnTN_LABDATE = MyBase.Columns("TN_LABDATE")
            Me.columnTDN_MG_L = MyBase.Columns("TDN_MG_L")
            Me.columnTDN_Notes = MyBase.Columns("TDN_Notes")
            Me.columnTDN_MDL_LEVEL = MyBase.Columns("TDN_MDL_LEVEL")
            Me.columnTDN_MDL_YN = MyBase.Columns("TDN_MDL_YN")
            Me.columnTDN_LABDATE = MyBase.Columns("TDN_LABDATE")
            Me.columnTP_MG_L = MyBase.Columns("TP_MG_L")
            Me.columnTP_Notes = MyBase.Columns("TP_Notes")
            Me.columnTP_MDL_LEVEL = MyBase.Columns("TP_MDL_LEVEL")
            Me.columnTP_MDL_YN = MyBase.Columns("TP_MDL_YN")
            Me.columnTP_LABDATE = MyBase.Columns("TP_LABDATE")
            Me.columnTDP_MG_L = MyBase.Columns("TDP_MG_L")
            Me.columnTDP_Notes = MyBase.Columns("TDP_Notes")
            Me.columnTDP_MDL_LEVEL = MyBase.Columns("TDP_MDL_LEVEL")
            Me.columnTDP_MDL_YN = MyBase.Columns("TDP_MDL_YN")
            Me.columnTDP_LABDATE = MyBase.Columns("TDP_LABDATE")
            Me.columnPO4_P_MG_L = MyBase.Columns("PO4_P_MG_L")
            Me.columnPO4_P_Notes = MyBase.Columns("PO4_P_Notes")
            Me.columnPO4_MDL_LEVEL = MyBase.Columns("PO4_MDL_LEVEL")
            Me.columnPO4_MDL_YN = MyBase.Columns("PO4_MDL_YN")
            Me.columnPO4_LABDATE = MyBase.Columns("PO4_LABDATE")
            Me.columnNO3_N_MG_L = MyBase.Columns("NO3_N_MG_L")
            Me.columnNO3_N_Notes = MyBase.Columns("NO3_N_Notes")
            Me.columnNO3_MDL_LEVEL = MyBase.Columns("NO3_MDL_LEVEL")
            Me.columnNO3_MDL_YN = MyBase.Columns("NO3_MDL_YN")
            Me.columnNO3_LABDATE = MyBase.Columns("NO3_LABDATE")
            Me.columnNH3_N_MG_L = MyBase.Columns("NH3_N_MG_L")
            Me.columnNH3_N_Notes = MyBase.Columns("NH3_N_Notes")
            Me.columnNH3_MDL_LEVEL = MyBase.Columns("NH3_MDL_LEVEL")
            Me.columnNH3_MDL_YN = MyBase.Columns("NH3_MDL_YN")
            Me.columnNH3_LABDATE = MyBase.Columns("NH3_LABDATE")
            Me.columnSI_MG_L = MyBase.Columns("SI_MG_L")
            Me.columnSI_Notes = MyBase.Columns("SI_Notes")
            Me.columnSI_MDL_LEVEL = MyBase.Columns("SI_MDL_LEVEL")
            Me.columnSI_MDL_YN = MyBase.Columns("SI_MDL_YN")
            Me.columnSI_LABDATE = MyBase.Columns("SI_LABDATE")
            Me.columnNA_MG_L = MyBase.Columns("NA_MG_L")
            Me.columnNA_Notes = MyBase.Columns("NA_Notes")
            Me.columnNA_MDL_LEVEL = MyBase.Columns("NA_MDL_LEVEL")
            Me.columnNA_MDL_YN = MyBase.Columns("NA_MDL_YN")
            Me.columnNA_LABDATE = MyBase.Columns("NA_LABDATE")
            Me.columnK_MG_L = MyBase.Columns("K_MG_L")
            Me.columnK_Notes = MyBase.Columns("K_Notes")
            Me.columnK_MDL_LEVEL = MyBase.Columns("K_MDL_LEVEL")
            Me.columnK_MDL_YN = MyBase.Columns("K_MDL_YN")
            Me.columnK_LABDATE = MyBase.Columns("K_LABDATE")
            Me.columnCA_MG_L = MyBase.Columns("CA_MG_L")
            Me.columnCA_Notes = MyBase.Columns("CA_Notes")
            Me.columnCA_MDL_LEVEL = MyBase.Columns("CA_MDL_LEVEL")
            Me.columnCA_MDL_YN = MyBase.Columns("CA_MDL_YN")
            Me.columnCA_LABDATE = MyBase.Columns("CA_LABDATE")
            Me.columnMG_MG_L = MyBase.Columns("MG_MG_L")
            Me.columnMG_Notes = MyBase.Columns("MG_Notes")
            Me.columnMG_MDL_LEVEL = MyBase.Columns("MG_MDL_LEVEL")
            Me.columnMG_MDL_YN = MyBase.Columns("MG_MDL_YN")
            Me.columnMG_LABDATE = MyBase.Columns("MG_LABDATE")
            Me.columnSO4_S_MG_L = MyBase.Columns("SO4_S_MG_L")
            Me.columnSO4_S_Notes = MyBase.Columns("SO4_S_Notes")
            Me.columnSO4_MDL_LEVEL = MyBase.Columns("SO4_MDL_LEVEL")
            Me.columnSO4_MDL_YN = MyBase.Columns("SO4_MDL_YN")
            Me.columnSO4_LABDATE = MyBase.Columns("SO4_LABDATE")
            Me.columnCL_MG_L = MyBase.Columns("CL_MG_L")
            Me.columnCL_Notes = MyBase.Columns("CL_Notes")
            Me.columnCL_MDL_LEVEL = MyBase.Columns("CL_MDL_LEVEL")
            Me.columnCL_MDL_YN = MyBase.Columns("CL_MDL_YN")
            Me.columnCL_LABDATE = MyBase.Columns("CL_LABDATE")
            Me.columnDOC_MG_L = MyBase.Columns("DOC_MG_L")
            Me.columnDOC_Notes = MyBase.Columns("DOC_Notes")
            Me.columnDOC_MDL_LEVEL = MyBase.Columns("DOC_MDL_LEVEL")
            Me.columnDOC_MDL_YN = MyBase.Columns("DOC_MDL_YN")
            Me.columnDOC_LABDATE = MyBase.Columns("DOC_LABDATE")
            Me.columnNOTES = MyBase.Columns("NOTES")
            Me.columnCOMMENTS = MyBase.Columns("COMMENTS")
            Me.columnSOURCE = MyBase.Columns("SOURCE")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnRecordCertifiedDate = MyBase.Columns("RecordCertifiedDate")
            Me.columnRecordCertifiedBy = MyBase.Columns("RecordCertifiedBy")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnWaterChemistryID = New Global.System.Data.DataColumn("WaterChemistryID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWaterChemistryID)
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnSAMPLEDATE = New Global.System.Data.DataColumn("SAMPLEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEDATE)
            Me.columnSAMPLENUMBER = New Global.System.Data.DataColumn("SAMPLENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLENUMBER)
            Me.columnCHEM_LAB = New Global.System.Data.DataColumn("CHEM_LAB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHEM_LAB)
            Me.columnCHEM_METHOD = New Global.System.Data.DataColumn("CHEM_METHOD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHEM_METHOD)
            Me.columnLAB_SAMPLE_NUMBER = New Global.System.Data.DataColumn("LAB_SAMPLE_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAB_SAMPLE_NUMBER)
            Me.columnLAB_DATE = New Global.System.Data.DataColumn("LAB_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAB_DATE)
            Me.columnDELIVERY_DATE = New Global.System.Data.DataColumn("DELIVERY_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELIVERY_DATE)
            Me.columnTHAW_DATE = New Global.System.Data.DataColumn("THAW_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHAW_DATE)
            Me.columnDUPLICATED_CHEM_ANALYSIS = New Global.System.Data.DataColumn("DUPLICATED_CHEM_ANALYSIS", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUPLICATED_CHEM_ANALYSIS)
            Me.columnPH = New Global.System.Data.DataColumn("PH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPH)
            Me.columnPH_Notes = New Global.System.Data.DataColumn("PH_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPH_Notes)
            Me.columnPH_MDL_LEVEL = New Global.System.Data.DataColumn("PH_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPH_MDL_LEVEL)
            Me.columnPH_MDL_YN = New Global.System.Data.DataColumn("PH_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPH_MDL_YN)
            Me.columnPH_LABDATE = New Global.System.Data.DataColumn("PH_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPH_LABDATE)
            Me.columnTOTAL_ALKALINITY = New Global.System.Data.DataColumn("TOTAL_ALKALINITY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_ALKALINITY)
            Me.columnTOTAL_ALKALINITY_Notes = New Global.System.Data.DataColumn("TOTAL_ALKALINITY_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_ALKALINITY_Notes)
            Me.columnALKALINITY_MG_L = New Global.System.Data.DataColumn("ALKALINITY_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALKALINITY_MG_L)
            Me.columnALKALINITY_MG_L_Notes = New Global.System.Data.DataColumn("ALKALINITY_MG_L_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALKALINITY_MG_L_Notes)
            Me.columnALK_MDL_LEVEL = New Global.System.Data.DataColumn("ALK_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALK_MDL_LEVEL)
            Me.columnALK_MDL_YN = New Global.System.Data.DataColumn("ALK_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALK_MDL_YN)
            Me.columnALK_LABDATE = New Global.System.Data.DataColumn("ALK_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALK_LABDATE)
            Me.columnCONDUCTIVITY_AES = New Global.System.Data.DataColumn("CONDUCTIVITY_AES", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONDUCTIVITY_AES)
            Me.columnCONDUCTIVITY_AES_Notes = New Global.System.Data.DataColumn("CONDUCTIVITY_AES_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONDUCTIVITY_AES_Notes)
            Me.columnCOND_MDL_LEVEL = New Global.System.Data.DataColumn("COND_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOND_MDL_LEVEL)
            Me.columnCOND_MDL_YN = New Global.System.Data.DataColumn("COND_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOND_MDL_YN)
            Me.columnCOND_LABDATE = New Global.System.Data.DataColumn("COND_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOND_LABDATE)
            Me.columnTKN_MG_L = New Global.System.Data.DataColumn("TKN_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTKN_MG_L)
            Me.columnTKN_Notes = New Global.System.Data.DataColumn("TKN_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTKN_Notes)
            Me.columnTKN_MDL_LEVEL = New Global.System.Data.DataColumn("TKN_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTKN_MDL_LEVEL)
            Me.columnTKN_MDL_YN = New Global.System.Data.DataColumn("TKN_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTKN_MDL_YN)
            Me.columnTN_MG_L = New Global.System.Data.DataColumn("TN_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTN_MG_L)
            Me.columnTN_Notes = New Global.System.Data.DataColumn("TN_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTN_Notes)
            Me.columnTN_MDL_LEVEL = New Global.System.Data.DataColumn("TN_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTN_MDL_LEVEL)
            Me.columnTN_MDL_YN = New Global.System.Data.DataColumn("TN_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTN_MDL_YN)
            Me.columnTN_LABDATE = New Global.System.Data.DataColumn("TN_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTN_LABDATE)
            Me.columnTDN_MG_L = New Global.System.Data.DataColumn("TDN_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDN_MG_L)
            Me.columnTDN_Notes = New Global.System.Data.DataColumn("TDN_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDN_Notes)
            Me.columnTDN_MDL_LEVEL = New Global.System.Data.DataColumn("TDN_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDN_MDL_LEVEL)
            Me.columnTDN_MDL_YN = New Global.System.Data.DataColumn("TDN_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDN_MDL_YN)
            Me.columnTDN_LABDATE = New Global.System.Data.DataColumn("TDN_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDN_LABDATE)
            Me.columnTP_MG_L = New Global.System.Data.DataColumn("TP_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTP_MG_L)
            Me.columnTP_Notes = New Global.System.Data.DataColumn("TP_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTP_Notes)
            Me.columnTP_MDL_LEVEL = New Global.System.Data.DataColumn("TP_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTP_MDL_LEVEL)
            Me.columnTP_MDL_YN = New Global.System.Data.DataColumn("TP_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTP_MDL_YN)
            Me.columnTP_LABDATE = New Global.System.Data.DataColumn("TP_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTP_LABDATE)
            Me.columnTDP_MG_L = New Global.System.Data.DataColumn("TDP_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDP_MG_L)
            Me.columnTDP_Notes = New Global.System.Data.DataColumn("TDP_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDP_Notes)
            Me.columnTDP_MDL_LEVEL = New Global.System.Data.DataColumn("TDP_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDP_MDL_LEVEL)
            Me.columnTDP_MDL_YN = New Global.System.Data.DataColumn("TDP_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDP_MDL_YN)
            Me.columnTDP_LABDATE = New Global.System.Data.DataColumn("TDP_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDP_LABDATE)
            Me.columnPO4_P_MG_L = New Global.System.Data.DataColumn("PO4_P_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO4_P_MG_L)
            Me.columnPO4_P_Notes = New Global.System.Data.DataColumn("PO4_P_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO4_P_Notes)
            Me.columnPO4_MDL_LEVEL = New Global.System.Data.DataColumn("PO4_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO4_MDL_LEVEL)
            Me.columnPO4_MDL_YN = New Global.System.Data.DataColumn("PO4_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO4_MDL_YN)
            Me.columnPO4_LABDATE = New Global.System.Data.DataColumn("PO4_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO4_LABDATE)
            Me.columnNO3_N_MG_L = New Global.System.Data.DataColumn("NO3_N_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNO3_N_MG_L)
            Me.columnNO3_N_Notes = New Global.System.Data.DataColumn("NO3_N_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNO3_N_Notes)
            Me.columnNO3_MDL_LEVEL = New Global.System.Data.DataColumn("NO3_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNO3_MDL_LEVEL)
            Me.columnNO3_MDL_YN = New Global.System.Data.DataColumn("NO3_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNO3_MDL_YN)
            Me.columnNO3_LABDATE = New Global.System.Data.DataColumn("NO3_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNO3_LABDATE)
            Me.columnNH3_N_MG_L = New Global.System.Data.DataColumn("NH3_N_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNH3_N_MG_L)
            Me.columnNH3_N_Notes = New Global.System.Data.DataColumn("NH3_N_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNH3_N_Notes)
            Me.columnNH3_MDL_LEVEL = New Global.System.Data.DataColumn("NH3_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNH3_MDL_LEVEL)
            Me.columnNH3_MDL_YN = New Global.System.Data.DataColumn("NH3_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNH3_MDL_YN)
            Me.columnNH3_LABDATE = New Global.System.Data.DataColumn("NH3_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNH3_LABDATE)
            Me.columnSI_MG_L = New Global.System.Data.DataColumn("SI_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSI_MG_L)
            Me.columnSI_Notes = New Global.System.Data.DataColumn("SI_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSI_Notes)
            Me.columnSI_MDL_LEVEL = New Global.System.Data.DataColumn("SI_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSI_MDL_LEVEL)
            Me.columnSI_MDL_YN = New Global.System.Data.DataColumn("SI_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSI_MDL_YN)
            Me.columnSI_LABDATE = New Global.System.Data.DataColumn("SI_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSI_LABDATE)
            Me.columnNA_MG_L = New Global.System.Data.DataColumn("NA_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNA_MG_L)
            Me.columnNA_Notes = New Global.System.Data.DataColumn("NA_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNA_Notes)
            Me.columnNA_MDL_LEVEL = New Global.System.Data.DataColumn("NA_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNA_MDL_LEVEL)
            Me.columnNA_MDL_YN = New Global.System.Data.DataColumn("NA_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNA_MDL_YN)
            Me.columnNA_LABDATE = New Global.System.Data.DataColumn("NA_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNA_LABDATE)
            Me.columnK_MG_L = New Global.System.Data.DataColumn("K_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnK_MG_L)
            Me.columnK_Notes = New Global.System.Data.DataColumn("K_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnK_Notes)
            Me.columnK_MDL_LEVEL = New Global.System.Data.DataColumn("K_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnK_MDL_LEVEL)
            Me.columnK_MDL_YN = New Global.System.Data.DataColumn("K_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnK_MDL_YN)
            Me.columnK_LABDATE = New Global.System.Data.DataColumn("K_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnK_LABDATE)
            Me.columnCA_MG_L = New Global.System.Data.DataColumn("CA_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCA_MG_L)
            Me.columnCA_Notes = New Global.System.Data.DataColumn("CA_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCA_Notes)
            Me.columnCA_MDL_LEVEL = New Global.System.Data.DataColumn("CA_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCA_MDL_LEVEL)
            Me.columnCA_MDL_YN = New Global.System.Data.DataColumn("CA_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCA_MDL_YN)
            Me.columnCA_LABDATE = New Global.System.Data.DataColumn("CA_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCA_LABDATE)
            Me.columnMG_MG_L = New Global.System.Data.DataColumn("MG_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMG_MG_L)
            Me.columnMG_Notes = New Global.System.Data.DataColumn("MG_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMG_Notes)
            Me.columnMG_MDL_LEVEL = New Global.System.Data.DataColumn("MG_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMG_MDL_LEVEL)
            Me.columnMG_MDL_YN = New Global.System.Data.DataColumn("MG_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMG_MDL_YN)
            Me.columnMG_LABDATE = New Global.System.Data.DataColumn("MG_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMG_LABDATE)
            Me.columnSO4_S_MG_L = New Global.System.Data.DataColumn("SO4_S_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO4_S_MG_L)
            Me.columnSO4_S_Notes = New Global.System.Data.DataColumn("SO4_S_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO4_S_Notes)
            Me.columnSO4_MDL_LEVEL = New Global.System.Data.DataColumn("SO4_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO4_MDL_LEVEL)
            Me.columnSO4_MDL_YN = New Global.System.Data.DataColumn("SO4_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO4_MDL_YN)
            Me.columnSO4_LABDATE = New Global.System.Data.DataColumn("SO4_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSO4_LABDATE)
            Me.columnCL_MG_L = New Global.System.Data.DataColumn("CL_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCL_MG_L)
            Me.columnCL_Notes = New Global.System.Data.DataColumn("CL_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCL_Notes)
            Me.columnCL_MDL_LEVEL = New Global.System.Data.DataColumn("CL_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCL_MDL_LEVEL)
            Me.columnCL_MDL_YN = New Global.System.Data.DataColumn("CL_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCL_MDL_YN)
            Me.columnCL_LABDATE = New Global.System.Data.DataColumn("CL_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCL_LABDATE)
            Me.columnDOC_MG_L = New Global.System.Data.DataColumn("DOC_MG_L", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOC_MG_L)
            Me.columnDOC_Notes = New Global.System.Data.DataColumn("DOC_Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOC_Notes)
            Me.columnDOC_MDL_LEVEL = New Global.System.Data.DataColumn("DOC_MDL_LEVEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOC_MDL_LEVEL)
            Me.columnDOC_MDL_YN = New Global.System.Data.DataColumn("DOC_MDL_YN", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOC_MDL_YN)
            Me.columnDOC_LABDATE = New Global.System.Data.DataColumn("DOC_LABDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOC_LABDATE)
            Me.columnNOTES = New Global.System.Data.DataColumn("NOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTES)
            Me.columnCOMMENTS = New Global.System.Data.DataColumn("COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS)
            Me.columnSOURCE = New Global.System.Data.DataColumn("SOURCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOURCE)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnRecordCertifiedDate = New Global.System.Data.DataColumn("RecordCertifiedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordCertifiedDate)
            Me.columnRecordCertifiedBy = New Global.System.Data.DataColumn("RecordCertifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordCertifiedBy)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnWaterChemistryID, Me.columnPONDNAME, Me.columnSAMPLEDATE, Me.columnSAMPLENUMBER}, true))
            Me.columnWaterChemistryID.AllowDBNull = false
            Me.columnPONDNAME.AllowDBNull = false
            Me.columnPONDNAME.MaxLength = 50
            Me.columnSAMPLEDATE.AllowDBNull = false
            Me.columnSAMPLENUMBER.AllowDBNull = false
            Me.columnSAMPLENUMBER.MaxLength = 50
            Me.columnCHEM_LAB.MaxLength = 50
            Me.columnCHEM_METHOD.MaxLength = 50
            Me.columnPH_Notes.MaxLength = 50
            Me.columnPH_MDL_YN.ReadOnly = true
            Me.columnTOTAL_ALKALINITY_Notes.MaxLength = 50
            Me.columnALKALINITY_MG_L_Notes.MaxLength = 255
            Me.columnALK_MDL_YN.ReadOnly = true
            Me.columnCONDUCTIVITY_AES_Notes.MaxLength = 255
            Me.columnCOND_MDL_YN.ReadOnly = true
            Me.columnTKN_Notes.MaxLength = 255
            Me.columnTKN_MDL_YN.ReadOnly = true
            Me.columnTN_Notes.MaxLength = 255
            Me.columnTN_MDL_YN.ReadOnly = true
            Me.columnTDN_Notes.MaxLength = 255
            Me.columnTDN_MDL_YN.ReadOnly = true
            Me.columnTP_Notes.MaxLength = 255
            Me.columnTP_MDL_YN.ReadOnly = true
            Me.columnTDP_Notes.MaxLength = 255
            Me.columnTDP_MDL_YN.ReadOnly = true
            Me.columnPO4_P_Notes.MaxLength = 255
            Me.columnPO4_MDL_YN.ReadOnly = true
            Me.columnNO3_N_Notes.MaxLength = 255
            Me.columnNO3_MDL_YN.ReadOnly = true
            Me.columnNH3_N_Notes.MaxLength = 255
            Me.columnNH3_MDL_YN.ReadOnly = true
            Me.columnSI_Notes.MaxLength = 255
            Me.columnSI_MDL_YN.ReadOnly = true
            Me.columnNA_Notes.MaxLength = 255
            Me.columnNA_MDL_YN.ReadOnly = true
            Me.columnK_Notes.MaxLength = 255
            Me.columnK_MDL_YN.ReadOnly = true
            Me.columnCA_Notes.MaxLength = 255
            Me.columnCA_MDL_YN.ReadOnly = true
            Me.columnMG_Notes.MaxLength = 50
            Me.columnMG_MDL_YN.ReadOnly = true
            Me.columnSO4_S_Notes.MaxLength = 50
            Me.columnSO4_MDL_YN.ReadOnly = true
            Me.columnCL_Notes.MaxLength = 50
            Me.columnCL_MDL_YN.ReadOnly = true
            Me.columnDOC_Notes.MaxLength = 255
            Me.columnDOC_MDL_YN.ReadOnly = true
            Me.columnNOTES.MaxLength = 4000
            Me.columnCOMMENTS.MaxLength = 4000
            Me.columnSOURCE.MaxLength = 50
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnRecordCertifiedBy.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblWaterChemistryRow() As tblWaterChemistryRow
            Return CType(Me.NewRow,tblWaterChemistryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblWaterChemistryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblWaterChemistryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblWaterChemistryRowChangedEvent) Is Nothing) Then
                RaiseEvent tblWaterChemistryRowChanged(Me, New tblWaterChemistryRowChangeEvent(CType(e.Row,tblWaterChemistryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblWaterChemistryRowChangingEvent) Is Nothing) Then
                RaiseEvent tblWaterChemistryRowChanging(Me, New tblWaterChemistryRowChangeEvent(CType(e.Row,tblWaterChemistryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblWaterChemistryRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblWaterChemistryRowDeleted(Me, New tblWaterChemistryRowChangeEvent(CType(e.Row,tblWaterChemistryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblWaterChemistryRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblWaterChemistryRowDeleting(Me, New tblWaterChemistryRowChangeEvent(CType(e.Row,tblWaterChemistryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblWaterChemistryRow(ByVal row As tblWaterChemistryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblWaterChemistryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblWaterProfilesDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblWaterProfilesRow)
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnSAMPLEDATE As Global.System.Data.DataColumn
        
        Private columnSAMPLENUMBER As Global.System.Data.DataColumn
        
        Private columnSAMPLETIME As Global.System.Data.DataColumn
        
        Private columnSAMPLEDEPTH As Global.System.Data.DataColumn
        
        Private columnDEPTH_SENSORCALC As Global.System.Data.DataColumn
        
        Private columnTEMPERATURE As Global.System.Data.DataColumn
        
        Private columnPH As Global.System.Data.DataColumn
        
        Private columnpH_mV As Global.System.Data.DataColumn
        
        Private columnSPECIFICCONDUCTANCE As Global.System.Data.DataColumn
        
        Private columnDO As Global.System.Data.DataColumn
        
        Private columnDO_PCT As Global.System.Data.DataColumn
        
        Private columnDO_Charge As Global.System.Data.DataColumn
        
        Private columnPROFILE_COMMENTS As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        Private columnDO_METHOD As Global.System.Data.DataColumn
        
        Private columnODO_PCT_LOCALB As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblWaterProfiles"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLETIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLETIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEDEPTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEDEPTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DEPTH_SENSORCALCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEPTH_SENSORCALC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TEMPERATUREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEMPERATURE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property pH_mVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpH_mV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SPECIFICCONDUCTANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPECIFICCONDUCTANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DO_PCTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDO_PCT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DO_ChargeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDO_Charge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PROFILE_COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROFILE_COMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DO_METHODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDO_METHOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ODO_PCT_LOCALBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnODO_PCT_LOCALB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblWaterProfilesRow
            Get
                Return CType(Me.Rows(index),tblWaterProfilesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblWaterProfilesRowChanging As tblWaterProfilesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblWaterProfilesRowChanged As tblWaterProfilesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblWaterProfilesRowDeleting As tblWaterProfilesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblWaterProfilesRowDeleted As tblWaterProfilesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblWaterProfilesRow(ByVal row As tblWaterProfilesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblWaterProfilesRow( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal SAMPLETIME As Date,  _
                    ByVal SAMPLEDEPTH As Double,  _
                    ByVal DEPTH_SENSORCALC As Double,  _
                    ByVal TEMPERATURE As Double,  _
                    ByVal PH As Double,  _
                    ByVal pH_mV As Double,  _
                    ByVal SPECIFICCONDUCTANCE As Double,  _
                    ByVal _DO As Double,  _
                    ByVal DO_PCT As Double,  _
                    ByVal DO_Charge As Double,  _
                    ByVal PROFILE_COMMENTS As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte,  _
                    ByVal DO_METHOD As String,  _
                    ByVal ODO_PCT_LOCALB As Double) As tblWaterProfilesRow
            Dim rowtblWaterProfilesRow As tblWaterProfilesRow = CType(Me.NewRow,tblWaterProfilesRow)
            Dim columnValuesArray() As Object = New Object() {PONDNAME, SAMPLEDATE, SAMPLENUMBER, SAMPLETIME, SAMPLEDEPTH, DEPTH_SENSORCALC, TEMPERATURE, PH, pH_mV, SPECIFICCONDUCTANCE, _DO, DO_PCT, DO_Charge, PROFILE_COMMENTS, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp, DO_METHOD, ODO_PCT_LOCALB}
            rowtblWaterProfilesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblWaterProfilesRow)
            Return rowtblWaterProfilesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByPONDNAMESAMPLEDATESAMPLENUMBERSAMPLEDEPTH(ByVal PONDNAME As String, ByVal SAMPLEDATE As Date, ByVal SAMPLENUMBER As String, ByVal SAMPLEDEPTH As Double) As tblWaterProfilesRow
            Return CType(Me.Rows.Find(New Object() {PONDNAME, SAMPLEDATE, SAMPLENUMBER, SAMPLEDEPTH}),tblWaterProfilesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblWaterProfilesDataTable = CType(MyBase.Clone,tblWaterProfilesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblWaterProfilesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnSAMPLEDATE = MyBase.Columns("SAMPLEDATE")
            Me.columnSAMPLENUMBER = MyBase.Columns("SAMPLENUMBER")
            Me.columnSAMPLETIME = MyBase.Columns("SAMPLETIME")
            Me.columnSAMPLEDEPTH = MyBase.Columns("SAMPLEDEPTH")
            Me.columnDEPTH_SENSORCALC = MyBase.Columns("DEPTH_SENSORCALC")
            Me.columnTEMPERATURE = MyBase.Columns("TEMPERATURE")
            Me.columnPH = MyBase.Columns("PH")
            Me.columnpH_mV = MyBase.Columns("pH_mV")
            Me.columnSPECIFICCONDUCTANCE = MyBase.Columns("SPECIFICCONDUCTANCE")
            Me.columnDO = MyBase.Columns("DO")
            Me.columnDO_PCT = MyBase.Columns("DO_PCT")
            Me.columnDO_Charge = MyBase.Columns("DO_Charge")
            Me.columnPROFILE_COMMENTS = MyBase.Columns("PROFILE_COMMENTS")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
            Me.columnDO_METHOD = MyBase.Columns("DO_METHOD")
            Me.columnODO_PCT_LOCALB = MyBase.Columns("ODO_PCT_LOCALB")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnSAMPLEDATE = New Global.System.Data.DataColumn("SAMPLEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEDATE)
            Me.columnSAMPLENUMBER = New Global.System.Data.DataColumn("SAMPLENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLENUMBER)
            Me.columnSAMPLETIME = New Global.System.Data.DataColumn("SAMPLETIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLETIME)
            Me.columnSAMPLEDEPTH = New Global.System.Data.DataColumn("SAMPLEDEPTH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEDEPTH)
            Me.columnDEPTH_SENSORCALC = New Global.System.Data.DataColumn("DEPTH_SENSORCALC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEPTH_SENSORCALC)
            Me.columnTEMPERATURE = New Global.System.Data.DataColumn("TEMPERATURE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEMPERATURE)
            Me.columnPH = New Global.System.Data.DataColumn("PH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPH)
            Me.columnpH_mV = New Global.System.Data.DataColumn("pH_mV", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpH_mV)
            Me.columnSPECIFICCONDUCTANCE = New Global.System.Data.DataColumn("SPECIFICCONDUCTANCE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPECIFICCONDUCTANCE)
            Me.columnDO = New Global.System.Data.DataColumn("DO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDO.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DOColumn")
            Me.columnDO.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDO")
            Me.columnDO.ExtendedProperties.Add("Generator_UserColumnName", "DO")
            MyBase.Columns.Add(Me.columnDO)
            Me.columnDO_PCT = New Global.System.Data.DataColumn("DO_PCT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDO_PCT)
            Me.columnDO_Charge = New Global.System.Data.DataColumn("DO_Charge", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDO_Charge)
            Me.columnPROFILE_COMMENTS = New Global.System.Data.DataColumn("PROFILE_COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROFILE_COMMENTS)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.columnDO_METHOD = New Global.System.Data.DataColumn("DO_METHOD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDO_METHOD)
            Me.columnODO_PCT_LOCALB = New Global.System.Data.DataColumn("ODO_PCT_LOCALB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnODO_PCT_LOCALB)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPONDNAME, Me.columnSAMPLEDATE, Me.columnSAMPLENUMBER, Me.columnSAMPLEDEPTH}, true))
            Me.columnPONDNAME.AllowDBNull = false
            Me.columnPONDNAME.MaxLength = 50
            Me.columnSAMPLEDATE.AllowDBNull = false
            Me.columnSAMPLENUMBER.AllowDBNull = false
            Me.columnSAMPLENUMBER.MaxLength = 50
            Me.columnSAMPLEDEPTH.AllowDBNull = false
            Me.columnPROFILE_COMMENTS.MaxLength = 2147483647
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
            Me.columnDO_METHOD.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblWaterProfilesRow() As tblWaterProfilesRow
            Return CType(Me.NewRow,tblWaterProfilesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblWaterProfilesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblWaterProfilesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblWaterProfilesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblWaterProfilesRowChanged(Me, New tblWaterProfilesRowChangeEvent(CType(e.Row,tblWaterProfilesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblWaterProfilesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblWaterProfilesRowChanging(Me, New tblWaterProfilesRowChangeEvent(CType(e.Row,tblWaterProfilesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblWaterProfilesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblWaterProfilesRowDeleted(Me, New tblWaterProfilesRowChangeEvent(CType(e.Row,tblWaterProfilesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblWaterProfilesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblWaterProfilesRowDeleting(Me, New tblWaterProfilesRowChangeEvent(CType(e.Row,tblWaterProfilesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblWaterProfilesRow(ByVal row As tblWaterProfilesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblWaterProfilesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblWaterSamplesDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblWaterSamplesRow)
        
        Private columnPONDNAME As Global.System.Data.DataColumn
        
        Private columnSAMPLEDATE As Global.System.Data.DataColumn
        
        Private columnSAMPLENUMBER As Global.System.Data.DataColumn
        
        Private columnSAMPLEDEPTH As Global.System.Data.DataColumn
        
        Private columnSAMPLETIME As Global.System.Data.DataColumn
        
        Private columnDEPTH As Global.System.Data.DataColumn
        
        Private columnWATERCOLOR As Global.System.Data.DataColumn
        
        Private columnALKALINITY As Global.System.Data.DataColumn
        
        Private columnVOLUMEFILTERED As Global.System.Data.DataColumn
        
        Private columnCOMMENTS As Global.System.Data.DataColumn
        
        Private columnSHIPPING_DATE As Global.System.Data.DataColumn
        
        Private columnSHIPPING_INFO As Global.System.Data.DataColumn
        
        Private columnMethane As Global.System.Data.DataColumn
        
        Private columnDOC_COLL As Global.System.Data.DataColumn
        
        Private columnO18_COLL As Global.System.Data.DataColumn
        
        Private columnSI_DOC_COLL As Global.System.Data.DataColumn
        
        Private columnIONS_COLL As Global.System.Data.DataColumn
        
        Private columnTN_TP_COLL As Global.System.Data.DataColumn
        
        Private columnCHLA_COLL As Global.System.Data.DataColumn
        
        Private columnNOTES As Global.System.Data.DataColumn
        
        Private columnDISTFROMSHORE As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedDate As Global.System.Data.DataColumn
        
        Private columnRecordUpdatedBy As Global.System.Data.DataColumn
        
        Private columnrow_timestamp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblWaterSamples"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PONDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLEDEPTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLEDEPTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SAMPLETIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAMPLETIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DEPTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEPTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WATERCOLORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWATERCOLOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ALKALINITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALKALINITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VOLUMEFILTEREDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVOLUMEFILTERED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SHIPPING_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHIPPING_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SHIPPING_INFOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHIPPING_INFO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MethaneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMethane
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DOC_COLLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOC_COLL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property O18_COLLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnO18_COLL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property SI_DOC_COLLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSI_DOC_COLL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property IONS_COLLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIONS_COLL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property TN_TP_COLLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTN_TP_COLL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CHLA_COLLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHLA_COLL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property NOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DISTFROMSHOREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISTFROMSHORE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property RecordUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property row_timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrow_timestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblWaterSamplesRow
            Get
                Return CType(Me.Rows(index),tblWaterSamplesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblWaterSamplesRowChanging As tblWaterSamplesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblWaterSamplesRowChanged As tblWaterSamplesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblWaterSamplesRowDeleting As tblWaterSamplesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event tblWaterSamplesRowDeleted As tblWaterSamplesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddtblWaterSamplesRow(ByVal row As tblWaterSamplesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddtblWaterSamplesRow( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal SAMPLEDEPTH As Double,  _
                    ByVal SAMPLETIME As Date,  _
                    ByVal DEPTH As Decimal,  _
                    ByVal WATERCOLOR As Double,  _
                    ByVal ALKALINITY As Double,  _
                    ByVal VOLUMEFILTERED As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal SHIPPING_DATE As Date,  _
                    ByVal SHIPPING_INFO As String,  _
                    ByVal Methane As Boolean,  _
                    ByVal DOC_COLL As Boolean,  _
                    ByVal O18_COLL As Boolean,  _
                    ByVal SI_DOC_COLL As Boolean,  _
                    ByVal IONS_COLL As Boolean,  _
                    ByVal TN_TP_COLL As Boolean,  _
                    ByVal CHLA_COLL As Boolean,  _
                    ByVal NOTES As String,  _
                    ByVal DISTFROMSHORE As Double,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal row_timestamp() As Byte) As tblWaterSamplesRow
            Dim rowtblWaterSamplesRow As tblWaterSamplesRow = CType(Me.NewRow,tblWaterSamplesRow)
            Dim columnValuesArray() As Object = New Object() {PONDNAME, SAMPLEDATE, SAMPLENUMBER, SAMPLEDEPTH, SAMPLETIME, DEPTH, WATERCOLOR, ALKALINITY, VOLUMEFILTERED, COMMENTS, SHIPPING_DATE, SHIPPING_INFO, Methane, DOC_COLL, O18_COLL, SI_DOC_COLL, IONS_COLL, TN_TP_COLL, CHLA_COLL, NOTES, DISTFROMSHORE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp}
            rowtblWaterSamplesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblWaterSamplesRow)
            Return rowtblWaterSamplesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByPONDNAMESAMPLEDATESAMPLENUMBER(ByVal PONDNAME As String, ByVal SAMPLEDATE As Date, ByVal SAMPLENUMBER As String) As tblWaterSamplesRow
            Return CType(Me.Rows.Find(New Object() {PONDNAME, SAMPLEDATE, SAMPLENUMBER}),tblWaterSamplesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblWaterSamplesDataTable = CType(MyBase.Clone,tblWaterSamplesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblWaterSamplesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPONDNAME = MyBase.Columns("PONDNAME")
            Me.columnSAMPLEDATE = MyBase.Columns("SAMPLEDATE")
            Me.columnSAMPLENUMBER = MyBase.Columns("SAMPLENUMBER")
            Me.columnSAMPLEDEPTH = MyBase.Columns("SAMPLEDEPTH")
            Me.columnSAMPLETIME = MyBase.Columns("SAMPLETIME")
            Me.columnDEPTH = MyBase.Columns("DEPTH")
            Me.columnWATERCOLOR = MyBase.Columns("WATERCOLOR")
            Me.columnALKALINITY = MyBase.Columns("ALKALINITY")
            Me.columnVOLUMEFILTERED = MyBase.Columns("VOLUMEFILTERED")
            Me.columnCOMMENTS = MyBase.Columns("COMMENTS")
            Me.columnSHIPPING_DATE = MyBase.Columns("SHIPPING_DATE")
            Me.columnSHIPPING_INFO = MyBase.Columns("SHIPPING_INFO")
            Me.columnMethane = MyBase.Columns("Methane")
            Me.columnDOC_COLL = MyBase.Columns("DOC_COLL")
            Me.columnO18_COLL = MyBase.Columns("O18_COLL")
            Me.columnSI_DOC_COLL = MyBase.Columns("SI_DOC_COLL")
            Me.columnIONS_COLL = MyBase.Columns("IONS_COLL")
            Me.columnTN_TP_COLL = MyBase.Columns("TN_TP_COLL")
            Me.columnCHLA_COLL = MyBase.Columns("CHLA_COLL")
            Me.columnNOTES = MyBase.Columns("NOTES")
            Me.columnDISTFROMSHORE = MyBase.Columns("DISTFROMSHORE")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordUpdatedDate = MyBase.Columns("RecordUpdatedDate")
            Me.columnRecordUpdatedBy = MyBase.Columns("RecordUpdatedBy")
            Me.columnrow_timestamp = MyBase.Columns("row_timestamp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPONDNAME = New Global.System.Data.DataColumn("PONDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONDNAME)
            Me.columnSAMPLEDATE = New Global.System.Data.DataColumn("SAMPLEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEDATE)
            Me.columnSAMPLENUMBER = New Global.System.Data.DataColumn("SAMPLENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLENUMBER)
            Me.columnSAMPLEDEPTH = New Global.System.Data.DataColumn("SAMPLEDEPTH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLEDEPTH)
            Me.columnSAMPLETIME = New Global.System.Data.DataColumn("SAMPLETIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAMPLETIME)
            Me.columnDEPTH = New Global.System.Data.DataColumn("DEPTH", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEPTH)
            Me.columnWATERCOLOR = New Global.System.Data.DataColumn("WATERCOLOR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWATERCOLOR)
            Me.columnALKALINITY = New Global.System.Data.DataColumn("ALKALINITY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALKALINITY)
            Me.columnVOLUMEFILTERED = New Global.System.Data.DataColumn("VOLUMEFILTERED", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVOLUMEFILTERED)
            Me.columnCOMMENTS = New Global.System.Data.DataColumn("COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS)
            Me.columnSHIPPING_DATE = New Global.System.Data.DataColumn("SHIPPING_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHIPPING_DATE)
            Me.columnSHIPPING_INFO = New Global.System.Data.DataColumn("SHIPPING_INFO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHIPPING_INFO)
            Me.columnMethane = New Global.System.Data.DataColumn("Methane", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMethane)
            Me.columnDOC_COLL = New Global.System.Data.DataColumn("DOC_COLL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOC_COLL)
            Me.columnO18_COLL = New Global.System.Data.DataColumn("O18_COLL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnO18_COLL)
            Me.columnSI_DOC_COLL = New Global.System.Data.DataColumn("SI_DOC_COLL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSI_DOC_COLL)
            Me.columnIONS_COLL = New Global.System.Data.DataColumn("IONS_COLL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIONS_COLL)
            Me.columnTN_TP_COLL = New Global.System.Data.DataColumn("TN_TP_COLL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTN_TP_COLL)
            Me.columnCHLA_COLL = New Global.System.Data.DataColumn("CHLA_COLL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHLA_COLL)
            Me.columnNOTES = New Global.System.Data.DataColumn("NOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTES)
            Me.columnDISTFROMSHORE = New Global.System.Data.DataColumn("DISTFROMSHORE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISTFROMSHORE)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordUpdatedDate = New Global.System.Data.DataColumn("RecordUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedDate)
            Me.columnRecordUpdatedBy = New Global.System.Data.DataColumn("RecordUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordUpdatedBy)
            Me.columnrow_timestamp = New Global.System.Data.DataColumn("row_timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrow_timestamp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPONDNAME, Me.columnSAMPLEDATE, Me.columnSAMPLENUMBER}, true))
            Me.columnPONDNAME.AllowDBNull = false
            Me.columnPONDNAME.MaxLength = 50
            Me.columnSAMPLEDATE.AllowDBNull = false
            Me.columnSAMPLENUMBER.AllowDBNull = false
            Me.columnSAMPLENUMBER.MaxLength = 50
            Me.columnVOLUMEFILTERED.MaxLength = 50
            Me.columnCOMMENTS.MaxLength = 4000
            Me.columnSHIPPING_INFO.MaxLength = 4000
            Me.columnNOTES.MaxLength = 4000
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordUpdatedBy.MaxLength = 50
            Me.columnrow_timestamp.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewtblWaterSamplesRow() As tblWaterSamplesRow
            Return CType(Me.NewRow,tblWaterSamplesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblWaterSamplesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblWaterSamplesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblWaterSamplesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblWaterSamplesRowChanged(Me, New tblWaterSamplesRowChangeEvent(CType(e.Row,tblWaterSamplesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblWaterSamplesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblWaterSamplesRowChanging(Me, New tblWaterSamplesRowChangeEvent(CType(e.Row,tblWaterSamplesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblWaterSamplesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblWaterSamplesRowDeleted(Me, New tblWaterSamplesRowChangeEvent(CType(e.Row,tblWaterSamplesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblWaterSamplesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblWaterSamplesRowDeleting(Me, New tblWaterSamplesRowChangeEvent(CType(e.Row,tblWaterSamplesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovetblWaterSamplesRow(ByVal row As tblWaterSamplesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As AK_ShallowLakesDataSet = New AK_ShallowLakesDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblWaterSamplesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tbl_ContinuousTLLRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbl_ContinuousTLL As tbl_ContinuousTLLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbl_ContinuousTLL = CType(Me.Table,tbl_ContinuousTLLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Filename() As String
            Get
                Return CType(Me(Me.tabletbl_ContinuousTLL.FilenameColumn),String)
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.FilenameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LogNum() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousTLL.LogNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogNum' in table 'tbl_ContinuousTLL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.LogNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DateTime() As Date
            Get
                Return CType(Me(Me.tabletbl_ContinuousTLL.DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Temp_C() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousTLL.Temp_CColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Temp_C' in table 'tbl_ContinuousTLL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.Temp_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Intensity_Lux() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousTLL.Intensity_LuxColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Intensity_Lux' in table 'tbl_ContinuousTLL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.Intensity_LuxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Batt_V() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousTLL.Batt_VColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Batt_V' in table 'tbl_ContinuousTLL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.Batt_VColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SiteName() As String
            Get
                Return CType(Me(Me.tabletbl_ContinuousTLL.SiteNameColumn),String)
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.SiteNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DateTimeDeployed() As Date
            Get
                Return CType(Me(Me.tabletbl_ContinuousTLL.DateTimeDeployedColumn),Date)
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.DateTimeDeployedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Exclude() As Boolean
            Get
                Return CType(Me(Me.tabletbl_ContinuousTLL.ExcludeColumn),Boolean)
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.ExcludeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ExclusionReason() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousTLL.ExclusionReasonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExclusionReason' in table 'tbl_ContinuousTLL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.ExclusionReasonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousTLL.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'tbl_ContinuousTLL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousTLL.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tbl_ContinuousTLL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousTLL.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tbl_ContinuousTLL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousTLL.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tbl_ContinuousTLL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousTLL.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tbl_ContinuousTLL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousTLL.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tbl_ContinuousTLL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousTLL.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblContinuousDataLoggersRowParent() As tblContinuousDataLoggersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tbl_ContinuousTLL_tblContinuousDataLoggers")),tblContinuousDataLoggersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tbl_ContinuousTLL_tblContinuousDataLoggers"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLogNumNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousTLL.LogNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLogNumNull()
            Me(Me.tabletbl_ContinuousTLL.LogNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTemp_CNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousTLL.Temp_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTemp_CNull()
            Me(Me.tabletbl_ContinuousTLL.Temp_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIntensity_LuxNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousTLL.Intensity_LuxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIntensity_LuxNull()
            Me(Me.tabletbl_ContinuousTLL.Intensity_LuxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBatt_VNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousTLL.Batt_VColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBatt_VNull()
            Me(Me.tabletbl_ContinuousTLL.Batt_VColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsExclusionReasonNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousTLL.ExclusionReasonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetExclusionReasonNull()
            Me(Me.tabletbl_ContinuousTLL.ExclusionReasonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousTLL.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCommentsNull()
            Me(Me.tabletbl_ContinuousTLL.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousTLL.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletbl_ContinuousTLL.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousTLL.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletbl_ContinuousTLL.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousTLL.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletbl_ContinuousTLL.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousTLL.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletbl_ContinuousTLL.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousTLL.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletbl_ContinuousTLL.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tbl_ContinuousWLRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbl_ContinuousWL As tbl_ContinuousWLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbl_ContinuousWL = CType(Me.Table,tbl_ContinuousWLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Filename() As String
            Get
                Return CType(Me(Me.tabletbl_ContinuousWL.FilenameColumn),String)
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.FilenameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LogNum() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousWL.LogNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogNum' in table 'tbl_ContinuousWL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.LogNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DateTime() As Date
            Get
                Return CType(Me(Me.tabletbl_ContinuousWL.DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AbsPres_kPa() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousWL.AbsPres_kPaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AbsPres_kPa' in table 'tbl_ContinuousWL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.AbsPres_kPaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Temp_C() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousWL.Temp_CColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Temp_C' in table 'tbl_ContinuousWL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.Temp_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Batt_V() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousWL.Batt_VColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Batt_V' in table 'tbl_ContinuousWL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.Batt_VColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AbsPresBarom_kPa() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousWL.AbsPresBarom_kPaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AbsPresBarom_kPa' in table 'tbl_ContinuousWL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.AbsPresBarom_kPaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SensorDepth() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousWL.SensorDepthColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SensorDepth' in table 'tbl_ContinuousWL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.SensorDepthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SiteName() As String
            Get
                Return CType(Me(Me.tabletbl_ContinuousWL.SiteNameColumn),String)
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.SiteNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DateTimeDeployed() As Date
            Get
                Return CType(Me(Me.tabletbl_ContinuousWL.DateTimeDeployedColumn),Date)
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.DateTimeDeployedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Exclude() As Boolean
            Get
                Return CType(Me(Me.tabletbl_ContinuousWL.ExcludeColumn),Boolean)
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.ExcludeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ExclusionReason() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousWL.ExclusionReasonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExclusionReason' in table 'tbl_ContinuousWL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.ExclusionReasonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousWL.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'tbl_ContinuousWL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousWL.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tbl_ContinuousWL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousWL.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tbl_ContinuousWL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousWL.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tbl_ContinuousWL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousWL.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tbl_ContinuousWL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousWL.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tbl_ContinuousWL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousWL.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblContinuousDataLoggersRowParent() As tblContinuousDataLoggersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tbl_ContinuousWL_tblContinuousDataLoggers")),tblContinuousDataLoggersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tbl_ContinuousWL_tblContinuousDataLoggers"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLogNumNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousWL.LogNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLogNumNull()
            Me(Me.tabletbl_ContinuousWL.LogNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAbsPres_kPaNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousWL.AbsPres_kPaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAbsPres_kPaNull()
            Me(Me.tabletbl_ContinuousWL.AbsPres_kPaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTemp_CNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousWL.Temp_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTemp_CNull()
            Me(Me.tabletbl_ContinuousWL.Temp_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBatt_VNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousWL.Batt_VColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBatt_VNull()
            Me(Me.tabletbl_ContinuousWL.Batt_VColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAbsPresBarom_kPaNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousWL.AbsPresBarom_kPaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAbsPresBarom_kPaNull()
            Me(Me.tabletbl_ContinuousWL.AbsPresBarom_kPaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSensorDepthNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousWL.SensorDepthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSensorDepthNull()
            Me(Me.tabletbl_ContinuousWL.SensorDepthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsExclusionReasonNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousWL.ExclusionReasonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetExclusionReasonNull()
            Me(Me.tabletbl_ContinuousWL.ExclusionReasonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousWL.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCommentsNull()
            Me(Me.tabletbl_ContinuousWL.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousWL.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletbl_ContinuousWL.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousWL.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletbl_ContinuousWL.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousWL.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletbl_ContinuousWL.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousWL.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletbl_ContinuousWL.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousWL.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletbl_ContinuousWL.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tbl_ContinuousYSIRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbl_ContinuousYSI As tbl_ContinuousYSIDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbl_ContinuousYSI = CType(Me.Table,tbl_ContinuousYSIDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SiteName() As String
            Get
                Return CType(Me(Me.tabletbl_ContinuousYSI.SiteNameColumn),String)
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.SiteNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DateTimeDeployed() As Date
            Get
                Return CType(Me(Me.tabletbl_ContinuousYSI.DateTimeDeployedColumn),Date)
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.DateTimeDeployedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Filename() As String
            Get
                Return CType(Me(Me.tabletbl_ContinuousYSI.FilenameColumn),String)
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.FilenameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DateTime() As Date
            Get
                Return CType(Me(Me.tabletbl_ContinuousYSI.DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Temp_C() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.Temp_CColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Temp_C' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.Temp_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SpCond_uScm() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.SpCond_uScmColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SpCond_uScm' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.SpCond_uScmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property pH() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.pHColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pH' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.pHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property pHmV() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.pHmVColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pHmV' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.pHmVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DOpct() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.DOpctColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOpct' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.DOpctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DO_mgL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.DO_mgLColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DO_mgL' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.DO_mgLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DOchrg() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.DOchrgColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOchrg' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.DOchrgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ODOpct() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.ODOpctColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ODOpct' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.ODOpctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ODO_mgL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.ODO_mgLColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ODO_mgL' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.ODO_mgLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Turbidity_NTU() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.Turbidity_NTUColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Turbidity_NTU' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.Turbidity_NTUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ORP_mV() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.ORP_mVColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORP_mV' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.ORP_mVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Battery_V() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.Battery_VColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Battery_V' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.Battery_VColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Exclude() As Boolean
            Get
                Return CType(Me(Me.tabletbl_ContinuousYSI.ExcludeColumn),Boolean)
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.ExcludeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ExclusionReason() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.ExclusionReasonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExclusionReason' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.ExclusionReasonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tbl_ContinuousYSI' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ContinuousYSI.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tbl_ContinuousYSI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ContinuousYSI.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblContinuousDataLoggersRowParent() As tblContinuousDataLoggersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tbl_ContinuousYSI_tblContinuousDataLoggers")),tblContinuousDataLoggersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tbl_ContinuousYSI_tblContinuousDataLoggers"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTemp_CNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.Temp_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTemp_CNull()
            Me(Me.tabletbl_ContinuousYSI.Temp_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSpCond_uScmNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.SpCond_uScmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSpCond_uScmNull()
            Me(Me.tabletbl_ContinuousYSI.SpCond_uScmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IspHNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.pHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetpHNull()
            Me(Me.tabletbl_ContinuousYSI.pHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IspHmVNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.pHmVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetpHmVNull()
            Me(Me.tabletbl_ContinuousYSI.pHmVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDOpctNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.DOpctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDOpctNull()
            Me(Me.tabletbl_ContinuousYSI.DOpctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDO_mgLNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.DO_mgLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDO_mgLNull()
            Me(Me.tabletbl_ContinuousYSI.DO_mgLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDOchrgNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.DOchrgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDOchrgNull()
            Me(Me.tabletbl_ContinuousYSI.DOchrgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsODOpctNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.ODOpctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetODOpctNull()
            Me(Me.tabletbl_ContinuousYSI.ODOpctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsODO_mgLNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.ODO_mgLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetODO_mgLNull()
            Me(Me.tabletbl_ContinuousYSI.ODO_mgLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTurbidity_NTUNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.Turbidity_NTUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTurbidity_NTUNull()
            Me(Me.tabletbl_ContinuousYSI.Turbidity_NTUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsORP_mVNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.ORP_mVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetORP_mVNull()
            Me(Me.tabletbl_ContinuousYSI.ORP_mVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBattery_VNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.Battery_VColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBattery_VNull()
            Me(Me.tabletbl_ContinuousYSI.Battery_VColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsExclusionReasonNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.ExclusionReasonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetExclusionReasonNull()
            Me(Me.tabletbl_ContinuousYSI.ExclusionReasonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCommentsNull()
            Me(Me.tabletbl_ContinuousYSI.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletbl_ContinuousYSI.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletbl_ContinuousYSI.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletbl_ContinuousYSI.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletbl_ContinuousYSI.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ContinuousYSI.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletbl_ContinuousYSI.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblChlorophyllRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblChlorophyll As tblChlorophyllDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblChlorophyll = CType(Me.Table,tblChlorophyllDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ChlorophyllID() As System.Guid
            Get
                Return CType(Me(Me.tabletblChlorophyll.ChlorophyllIDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblChlorophyll.ChlorophyllIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Return CType(Me(Me.tabletblChlorophyll.PONDNAMEColumn),String)
            End Get
            Set
                Me(Me.tabletblChlorophyll.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEDATE() As Date
            Get
                Return CType(Me(Me.tabletblChlorophyll.SAMPLEDATEColumn),Date)
            End Get
            Set
                Me(Me.tabletblChlorophyll.SAMPLEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLENUMBER() As String
            Get
                Return CType(Me(Me.tabletblChlorophyll.SAMPLENUMBERColumn),String)
            End Get
            Set
                Me(Me.tabletblChlorophyll.SAMPLENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CHLA_LAB() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.CHLA_LABColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHLA_LAB' in table 'tblChlorophyll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.CHLA_LABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CHLA_METHOD() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.CHLA_METHODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHLA_METHOD' in table 'tblChlorophyll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.CHLA_METHODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CHLA_LABSAMPLENUM() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.CHLA_LABSAMPLENUMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHLA_LABSAMPLENUM' in table 'tblChlorophyll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.CHLA_LABSAMPLENUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CHLA_CORRECTED_UG_L() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.CHLA_CORRECTED_UG_LColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHLA_CORRECTED_UG_L' in table 'tblChlorophyll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.CHLA_CORRECTED_UG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CHLA_Corrected_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.CHLA_Corrected_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHLA_Corrected_Notes' in table 'tblChlorophyll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.CHLA_Corrected_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CHLA_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.CHLA_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHLA_MDL_YN' in table 'tblChlorophyll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.CHLA_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CHLA_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.CHLA_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHLA_MDL_LEVEL' in table 'tblChlorophyll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.CHLA_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CHLA_UNCORRECTED_UG_L() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.CHLA_UNCORRECTED_UG_LColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHLA_UNCORRECTED_UG_L' in table 'tblChlorophyll' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.CHLA_UNCORRECTED_UG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CHLA_Uncorrected_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.CHLA_Uncorrected_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHLA_Uncorrected_Notes' in table 'tblChlorophyll' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.CHLA_Uncorrected_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property REPEATED_CHLA_SAMPLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.REPEATED_CHLA_SAMPLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REPEATED_CHLA_SAMPLE' in table 'tblChlorophyll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.REPEATED_CHLA_SAMPLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property COMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.COMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS' in table 'tblChlorophyll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SOURCE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.SOURCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SOURCE' in table 'tblChlorophyll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.SOURCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblChlorophyll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblChlorophyll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblChlorophyll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblChlorophyll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblChlorophyll.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblChlorophyll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblChlorophyll.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblWaterSamplesRowParent() As tblWaterSamplesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblChlorophyll_tblWaterSamples")),tblWaterSamplesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblChlorophyll_tblWaterSamples"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCHLA_LABNull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.CHLA_LABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCHLA_LABNull()
            Me(Me.tabletblChlorophyll.CHLA_LABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCHLA_METHODNull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.CHLA_METHODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCHLA_METHODNull()
            Me(Me.tabletblChlorophyll.CHLA_METHODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCHLA_LABSAMPLENUMNull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.CHLA_LABSAMPLENUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCHLA_LABSAMPLENUMNull()
            Me(Me.tabletblChlorophyll.CHLA_LABSAMPLENUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCHLA_CORRECTED_UG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.CHLA_CORRECTED_UG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCHLA_CORRECTED_UG_LNull()
            Me(Me.tabletblChlorophyll.CHLA_CORRECTED_UG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCHLA_Corrected_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.CHLA_Corrected_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCHLA_Corrected_NotesNull()
            Me(Me.tabletblChlorophyll.CHLA_Corrected_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCHLA_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.CHLA_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCHLA_MDL_YNNull()
            Me(Me.tabletblChlorophyll.CHLA_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCHLA_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.CHLA_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCHLA_MDL_LEVELNull()
            Me(Me.tabletblChlorophyll.CHLA_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCHLA_UNCORRECTED_UG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.CHLA_UNCORRECTED_UG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCHLA_UNCORRECTED_UG_LNull()
            Me(Me.tabletblChlorophyll.CHLA_UNCORRECTED_UG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCHLA_Uncorrected_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.CHLA_Uncorrected_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCHLA_Uncorrected_NotesNull()
            Me(Me.tabletblChlorophyll.CHLA_Uncorrected_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsREPEATED_CHLA_SAMPLENull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.REPEATED_CHLA_SAMPLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetREPEATED_CHLA_SAMPLENull()
            Me(Me.tabletblChlorophyll.REPEATED_CHLA_SAMPLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCOMMENTSNull()
            Me(Me.tabletblChlorophyll.COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSOURCENull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.SOURCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSOURCENull()
            Me(Me.tabletblChlorophyll.SOURCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblChlorophyll.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblChlorophyll.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblChlorophyll.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblChlorophyll.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblChlorophyll.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblChlorophyll.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblContinuousDataDeploymentsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblContinuousDataDeployments As tblContinuousDataDeploymentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblContinuousDataDeployments = CType(Me.Table,tblContinuousDataDeploymentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SiteName() As String
            Get
                Return CType(Me(Me.tabletblContinuousDataDeployments.SiteNameColumn),String)
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.SiteNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DateDeployed() As Date
            Get
                Return CType(Me(Me.tabletblContinuousDataDeployments.DateDeployedColumn),Date)
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.DateDeployedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TimeDeployed() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.TimeDeployedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TimeDeployed' in table 'tblContinuousDataDeployments' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.TimeDeployedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DateRetrieved() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.DateRetrievedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRetrieved' in table 'tblContinuousDataDeployments' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.DateRetrievedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TimeRetrieved() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.TimeRetrievedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TimeRetrieved' in table 'tblContinuousDataDeployments' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.TimeRetrievedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DeploymentType() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.DeploymentTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeploymentType' in table 'tblContinuousDataDeployments' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.DeploymentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DeployLatitude() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.DeployLatitudeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeployLatitude' in table 'tblContinuousDataDeployments' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.DeployLatitudeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DeployLongitude() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.DeployLongitudeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeployLongitude' in table 'tblContinuousDataDeployments' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.DeployLongitudeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DeploymentNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.DeploymentNotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeploymentNotes' in table 'tblContinuousDataDeployments' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.DeploymentNotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RetrieveLatitude() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.RetrieveLatitudeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RetrieveLatitude' in table 'tblContinuousDataDeployments' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.RetrieveLatitudeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RetrieveLongitude() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.RetrieveLongitudeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RetrieveLongitude' in table 'tblContinuousDataDeployments' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.RetrieveLongitudeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RetrievalNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.RetrievalNotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RetrievalNotes' in table 'tblContinuousDataDeployments' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.RetrievalNotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DataProcessingNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.DataProcessingNotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DataProcessingNotes' in table 'tblContinuousDataDeployments"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.DataProcessingNotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblContinuousDataDeployments'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblContinuousDataDeployments' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblContinuousDataDeployments' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblContinuousDataDeployments' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataDeployments.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblContinuousDataDeployments' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataDeployments.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTimeDeployedNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.TimeDeployedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTimeDeployedNull()
            Me(Me.tabletblContinuousDataDeployments.TimeDeployedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDateRetrievedNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.DateRetrievedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDateRetrievedNull()
            Me(Me.tabletblContinuousDataDeployments.DateRetrievedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTimeRetrievedNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.TimeRetrievedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTimeRetrievedNull()
            Me(Me.tabletblContinuousDataDeployments.TimeRetrievedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDeploymentTypeNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.DeploymentTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDeploymentTypeNull()
            Me(Me.tabletblContinuousDataDeployments.DeploymentTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDeployLatitudeNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.DeployLatitudeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDeployLatitudeNull()
            Me(Me.tabletblContinuousDataDeployments.DeployLatitudeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDeployLongitudeNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.DeployLongitudeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDeployLongitudeNull()
            Me(Me.tabletblContinuousDataDeployments.DeployLongitudeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDeploymentNotesNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.DeploymentNotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDeploymentNotesNull()
            Me(Me.tabletblContinuousDataDeployments.DeploymentNotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRetrieveLatitudeNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.RetrieveLatitudeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRetrieveLatitudeNull()
            Me(Me.tabletblContinuousDataDeployments.RetrieveLatitudeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRetrieveLongitudeNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.RetrieveLongitudeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRetrieveLongitudeNull()
            Me(Me.tabletblContinuousDataDeployments.RetrieveLongitudeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRetrievalNotesNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.RetrievalNotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRetrievalNotesNull()
            Me(Me.tabletblContinuousDataDeployments.RetrievalNotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDataProcessingNotesNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.DataProcessingNotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDataProcessingNotesNull()
            Me(Me.tabletblContinuousDataDeployments.DataProcessingNotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblContinuousDataDeployments.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblContinuousDataDeployments.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblContinuousDataDeployments.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblContinuousDataDeployments.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataDeployments.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblContinuousDataDeployments.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblContinuousDataLoggersRows() As tblContinuousDataLoggersRow()
            If (Me.Table.ChildRelations("FK_tblContinuousDataLoggers_tblContinuousDataDeployments") Is Nothing) Then
                Return New tblContinuousDataLoggersRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblContinuousDataLoggers_tblContinuousDataDeployments")),tblContinuousDataLoggersRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblContinuousDataLoggersRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblContinuousDataLoggers As tblContinuousDataLoggersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblContinuousDataLoggers = CType(Me.Table,tblContinuousDataLoggersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SiteName() As String
            Get
                Return CType(Me(Me.tabletblContinuousDataLoggers.SiteNameColumn),String)
            End Get
            Set
                Me(Me.tabletblContinuousDataLoggers.SiteNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DateTimeDeployed() As Date
            Get
                Return CType(Me(Me.tabletblContinuousDataLoggers.DateTimeDeployedColumn),Date)
            End Get
            Set
                Me(Me.tabletblContinuousDataLoggers.DateTimeDeployedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SerialNumber() As String
            Get
                Return CType(Me(Me.tabletblContinuousDataLoggers.SerialNumberColumn),String)
            End Get
            Set
                Me(Me.tabletblContinuousDataLoggers.SerialNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LoggerType() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataLoggers.LoggerTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoggerType' in table 'tblContinuousDataLoggers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataLoggers.LoggerTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LoggerModel() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataLoggers.LoggerModelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoggerModel' in table 'tblContinuousDataLoggers' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataLoggers.LoggerModelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PctBattConfig() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataLoggers.PctBattConfigColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PctBattConfig' in table 'tblContinuousDataLoggers' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataLoggers.PctBattConfigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PctBattDwnld() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataLoggers.PctBattDwnldColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PctBattDwnld' in table 'tblContinuousDataLoggers' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataLoggers.PctBattDwnldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LoggerName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataLoggers.LoggerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoggerName' in table 'tblContinuousDataLoggers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataLoggers.LoggerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Filename() As String
            Get
                Return CType(Me(Me.tabletblContinuousDataLoggers.FilenameColumn),String)
            End Get
            Set
                Me(Me.tabletblContinuousDataLoggers.FilenameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DataProcessingNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataLoggers.DataProcessingNotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DataProcessingNotes' in table 'tblContinuousDataLoggers' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataLoggers.DataProcessingNotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataLoggers.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblContinuousDataLoggers' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataLoggers.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataLoggers.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblContinuousDataLoggers' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataLoggers.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataLoggers.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblContinuousDataLoggers' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataLoggers.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataLoggers.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblContinuousDataLoggers' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataLoggers.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataLoggers.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblContinuousDataLoggers' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataLoggers.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblContinuousDataDeploymentsRowParent() As tblContinuousDataDeploymentsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblContinuousDataLoggers_tblContinuousDataDeployments")),tblContinuousDataDeploymentsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblContinuousDataLoggers_tblContinuousDataDeployments"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLoggerTypeNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataLoggers.LoggerTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLoggerTypeNull()
            Me(Me.tabletblContinuousDataLoggers.LoggerTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLoggerModelNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataLoggers.LoggerModelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLoggerModelNull()
            Me(Me.tabletblContinuousDataLoggers.LoggerModelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPctBattConfigNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataLoggers.PctBattConfigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPctBattConfigNull()
            Me(Me.tabletblContinuousDataLoggers.PctBattConfigColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPctBattDwnldNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataLoggers.PctBattDwnldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPctBattDwnldNull()
            Me(Me.tabletblContinuousDataLoggers.PctBattDwnldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLoggerNameNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataLoggers.LoggerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLoggerNameNull()
            Me(Me.tabletblContinuousDataLoggers.LoggerNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDataProcessingNotesNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataLoggers.DataProcessingNotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDataProcessingNotesNull()
            Me(Me.tabletblContinuousDataLoggers.DataProcessingNotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataLoggers.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblContinuousDataLoggers.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataLoggers.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblContinuousDataLoggers.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataLoggers.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblContinuousDataLoggers.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataLoggers.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblContinuousDataLoggers.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataLoggers.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblContinuousDataLoggers.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Gettbl_ContinuousTLLRows() As tbl_ContinuousTLLRow()
            If (Me.Table.ChildRelations("FK_tbl_ContinuousTLL_tblContinuousDataLoggers") Is Nothing) Then
                Return New tbl_ContinuousTLLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tbl_ContinuousTLL_tblContinuousDataLoggers")),tbl_ContinuousTLLRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Gettbl_ContinuousWLRows() As tbl_ContinuousWLRow()
            If (Me.Table.ChildRelations("FK_tbl_ContinuousWL_tblContinuousDataLoggers") Is Nothing) Then
                Return New tbl_ContinuousWLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tbl_ContinuousWL_tblContinuousDataLoggers")),tbl_ContinuousWLRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Gettbl_ContinuousYSIRows() As tbl_ContinuousYSIRow()
            If (Me.Table.ChildRelations("FK_tbl_ContinuousYSI_tblContinuousDataLoggers") Is Nothing) Then
                Return New tbl_ContinuousYSIRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tbl_ContinuousYSI_tblContinuousDataLoggers")),tbl_ContinuousYSIRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblContinuousDataSitesRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblContinuousDataSites As tblContinuousDataSitesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblContinuousDataSites = CType(Me.Table,tblContinuousDataSitesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SiteName() As String
            Get
                Return CType(Me(Me.tabletblContinuousDataSites.SiteNameColumn),String)
            End Get
            Set
                Me(Me.tabletblContinuousDataSites.SiteNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SiteType() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataSites.SiteTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SiteType' in table 'tblContinuousDataSites' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataSites.SiteTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Latitude() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataSites.LatitudeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Latitude' in table 'tblContinuousDataSites' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataSites.LatitudeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Longitude() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataSites.LongitudeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Longitude' in table 'tblContinuousDataSites' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataSites.LongitudeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LocationNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataSites.LocationNotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocationNotes' in table 'tblContinuousDataSites' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataSites.LocationNotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataSites.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblContinuousDataSites' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataSites.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataSites.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblContinuousDataSites' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataSites.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataSites.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblContinuousDataSites' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataSites.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataSites.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblContinuousDataSites' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataSites.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblContinuousDataSites.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblContinuousDataSites' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContinuousDataSites.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblPondsRow() As tblPondsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblContinuousDataSites_tblPonds")),tblPondsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblContinuousDataSites_tblPonds"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSiteTypeNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataSites.SiteTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSiteTypeNull()
            Me(Me.tabletblContinuousDataSites.SiteTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLatitudeNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataSites.LatitudeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLatitudeNull()
            Me(Me.tabletblContinuousDataSites.LatitudeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLongitudeNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataSites.LongitudeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLongitudeNull()
            Me(Me.tabletblContinuousDataSites.LongitudeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLocationNotesNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataSites.LocationNotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLocationNotesNull()
            Me(Me.tabletblContinuousDataSites.LocationNotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataSites.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblContinuousDataSites.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataSites.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblContinuousDataSites.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataSites.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblContinuousDataSites.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataSites.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblContinuousDataSites.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblContinuousDataSites.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblContinuousDataSites.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblDBEditsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblDBEdits As tblDBEditsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblDBEdits = CType(Me.Table,tblDBEditsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property EditDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblDBEdits.EditDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EditDescription' in table 'tblDBEdits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblDBEdits.EditDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Editor() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblDBEdits.EditorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Editor' in table 'tblDBEdits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblDBEdits.EditorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DateTime() As Date
            Get
                Return CType(Me(Me.tabletblDBEdits.DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tabletblDBEdits.DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PrevVersion() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblDBEdits.PrevVersionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrevVersion' in table 'tblDBEdits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblDBEdits.PrevVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NewVersion() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblDBEdits.NewVersionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NewVersion' in table 'tblDBEdits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblDBEdits.NewVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblDBEdits.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblDBEdits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblDBEdits.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsEditDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblDBEdits.EditDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetEditDescriptionNull()
            Me(Me.tabletblDBEdits.EditDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsEditorNull() As Boolean
            Return Me.IsNull(Me.tabletblDBEdits.EditorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetEditorNull()
            Me(Me.tabletblDBEdits.EditorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPrevVersionNull() As Boolean
            Return Me.IsNull(Me.tabletblDBEdits.PrevVersionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPrevVersionNull()
            Me(Me.tabletblDBEdits.PrevVersionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNewVersionNull() As Boolean
            Return Me.IsNull(Me.tabletblDBEdits.NewVersionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNewVersionNull()
            Me(Me.tabletblDBEdits.NewVersionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblDBEdits.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblDBEdits.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblDBIssuesRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblDBIssues As tblDBIssuesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblDBIssues = CType(Me.Table,tblDBIssuesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property IssueID() As System.Guid
            Get
                Return CType(Me(Me.tabletblDBIssues.IssueIDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblDBIssues.IssueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Issue() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblDBIssues.IssueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Issue' in table 'tblDBIssues' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblDBIssues.IssueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property IsResolved() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblDBIssues.IsResolvedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsResolved' in table 'tblDBIssues' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblDBIssues.IsResolvedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblDBIssues.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblDBIssues' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblDBIssues.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblDBIssues.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblDBIssues' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblDBIssues.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblDBIssues.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblDBIssues' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblDBIssues.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblDBIssues.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblDBIssues' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblDBIssues.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblDBIssues.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblDBIssues' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblDBIssues.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIssueNull() As Boolean
            Return Me.IsNull(Me.tabletblDBIssues.IssueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIssueNull()
            Me(Me.tabletblDBIssues.IssueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIsResolvedNull() As Boolean
            Return Me.IsNull(Me.tabletblDBIssues.IsResolvedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIsResolvedNull()
            Me(Me.tabletblDBIssues.IsResolvedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblDBIssues.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblDBIssues.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblDBIssues.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblDBIssues.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblDBIssues.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblDBIssues.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblDBIssues.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblDBIssues.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblDBIssues.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblDBIssues.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblEventsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblEvents As tblEventsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblEvents = CType(Me.Table,tblEventsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Return CType(Me(Me.tabletblEvents.PONDNAMEColumn),String)
            End Get
            Set
                Me(Me.tabletblEvents.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEDATE() As Date
            Get
                Return CType(Me(Me.tabletblEvents.SAMPLEDATEColumn),Date)
            End Get
            Set
                Me(Me.tabletblEvents.SAMPLEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property START_TIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.START_TIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'START_TIME' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.START_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property YEAR() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.YEARColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YEAR' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CONTMONVISIT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.CONTMONVISITColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CONTMONVISIT' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.CONTMONVISITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEMETHOD() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.SAMPLEMETHODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAMPLEMETHOD' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.SAMPLEMETHODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property OBSERVERS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.OBSERVERSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OBSERVERS' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.OBSERVERSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SECCHIDEPTH() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.SECCHIDEPTHColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SECCHIDEPTH' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.SECCHIDEPTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SECCHINOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.SECCHINOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SECCHINOTES' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.SECCHINOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SECCHIONBOTTOM() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.SECCHIONBOTTOMColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SECCHIONBOTTOM' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.SECCHIONBOTTOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ISSHOREBURNED() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.ISSHOREBURNEDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISSHOREBURNED' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.ISSHOREBURNEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BURNNOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.BURNNOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BURNNOTES' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.BURNNOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BURNDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.BURNDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BURNDATE' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.BURNDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property THERMOKARSTEVIDENCE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.THERMOKARSTEVIDENCEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THERMOKARSTEVIDENCE' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.THERMOKARSTEVIDENCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property THERMOKARSTLOCATION() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.THERMOKARSTLOCATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THERMOKARSTLOCATION' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.THERMOKARSTLOCATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property THERMOKARSTEXTENT() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.THERMOKARSTEXTENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THERMOKARSTEXTENT' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.THERMOKARSTEXTENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property THERMOKARSTACTIVE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.THERMOKARSTACTIVEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THERMOKARSTACTIVE' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.THERMOKARSTACTIVEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property THERMOKARSTMATERIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.THERMOKARSTMATERIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THERMOKARSTMATERIAL' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.THERMOKARSTMATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WOODFROGPRESENT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.WOODFROGPRESENTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WOODFROGPRESENT' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.WOODFROGPRESENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PERCENTCLOUDS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.PERCENTCLOUDSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERCENTCLOUDS' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.PERCENTCLOUDSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WIND() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.WINDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WIND' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.WINDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PRECIPITATION() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.PRECIPITATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRECIPITATION' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.PRECIPITATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PRECIPITATIONINTENSITY() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.PRECIPITATIONINTENSITYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRECIPITATIONINTENSITY' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.PRECIPITATIONINTENSITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WEATHERCOMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.WEATHERCOMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WEATHERCOMMENTS' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.WEATHERCOMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SITECONDITIONSCOMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.SITECONDITIONSCOMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SITECONDITIONSCOMMENTS' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.SITECONDITIONSCOMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BIRD_ANIMAL_ACTIVITY() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.BIRD_ANIMAL_ACTIVITYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIRD_ANIMAL_ACTIVITY' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.BIRD_ANIMAL_ACTIVITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UPLAND_VIERECK_CLASS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.UPLAND_VIERECK_CLASSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPLAND_VIERECK_CLASS' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.UPLAND_VIERECK_CLASSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property EMERGENT_VIERECK_CLASS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.EMERGENT_VIERECK_CLASSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMERGENT_VIERECK_CLASS' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.EMERGENT_VIERECK_CLASSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SUBMERGENT_VIERECK_CLASS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.SUBMERGENT_VIERECK_CLASSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUBMERGENT_VIERECK_CLASS' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.SUBMERGENT_VIERECK_CLASSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SUBMERGENT_COVER() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.SUBMERGENT_COVERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUBMERGENT_COVER' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.SUBMERGENT_COVERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ELODEA_SURVEYED() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.ELODEA_SURVEYEDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ELODEA_SURVEYED' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.ELODEA_SURVEYEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ELODEA_PRESENT() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.ELODEA_PRESENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ELODEA_PRESENT' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.ELODEA_PRESENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ELODEA_NOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.ELODEA_NOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ELODEA_NOTES' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.ELODEA_NOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FISHPRESENT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.FISHPRESENTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FISHPRESENT' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.FISHPRESENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WL_L_TO_S() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.WL_L_TO_SColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WL_L_TO_S' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.WL_L_TO_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WL_L_TO_G() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.WL_L_TO_GColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WL_L_TO_G' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.WL_L_TO_GColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WATERLEVEL_CM() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.WATERLEVEL_CMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WATERLEVEL_CM' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.WATERLEVEL_CMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MON_MOVED() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.MON_MOVEDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MON_MOVED' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.MON_MOVEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LAKE_LEVEL_NOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.LAKE_LEVEL_NOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAKE_LEVEL_NOTES' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.LAKE_LEVEL_NOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property STRATCLASS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.STRATCLASSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRATCLASS' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.STRATCLASSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TURBIDITY_FIELD() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.TURBIDITY_FIELDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TURBIDITY_FIELD' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.TURBIDITY_FIELDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property EMERGENT_WIDTH() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.EMERGENT_WIDTHColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMERGENT_WIDTH' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.EMERGENT_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SUBMERGENT_WIDTH() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.SUBMERGENT_WIDTHColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUBMERGENT_WIDTH' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.SUBMERGENT_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LOONSPRESENT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.LOONSPRESENTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOONSPRESENT' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.LOONSPRESENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RUSTYBBIRDSPRESENT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.RUSTYBBIRDSPRESENTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RUSTYBBIRDSPRESENT' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.RUSTYBBIRDSPRESENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SDI() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.SDIColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SDI' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.SDIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LAKEVOLUME_GIS_M3() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.LAKEVOLUME_GIS_M3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAKEVOLUME_GIS_M3' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.LAKEVOLUME_GIS_M3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LAKEAREA_GIS_M2() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.LAKEAREA_GIS_M2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAKEAREA_GIS_M2' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.LAKEAREA_GIS_M2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblEvents.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblEvents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEvents.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblPondsRow() As tblPondsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblEvents_tblPonds")),tblPondsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblEvents_tblPonds"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSTART_TIMENull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.START_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSTART_TIMENull()
            Me(Me.tabletblEvents.START_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsYEARNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.YEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetYEARNull()
            Me(Me.tabletblEvents.YEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCONTMONVISITNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.CONTMONVISITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCONTMONVISITNull()
            Me(Me.tabletblEvents.CONTMONVISITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSAMPLEMETHODNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.SAMPLEMETHODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSAMPLEMETHODNull()
            Me(Me.tabletblEvents.SAMPLEMETHODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsOBSERVERSNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.OBSERVERSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetOBSERVERSNull()
            Me(Me.tabletblEvents.OBSERVERSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSECCHIDEPTHNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.SECCHIDEPTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSECCHIDEPTHNull()
            Me(Me.tabletblEvents.SECCHIDEPTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSECCHINOTESNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.SECCHINOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSECCHINOTESNull()
            Me(Me.tabletblEvents.SECCHINOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSECCHIONBOTTOMNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.SECCHIONBOTTOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSECCHIONBOTTOMNull()
            Me(Me.tabletblEvents.SECCHIONBOTTOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsISSHOREBURNEDNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.ISSHOREBURNEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetISSHOREBURNEDNull()
            Me(Me.tabletblEvents.ISSHOREBURNEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBURNNOTESNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.BURNNOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBURNNOTESNull()
            Me(Me.tabletblEvents.BURNNOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBURNDATENull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.BURNDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBURNDATENull()
            Me(Me.tabletblEvents.BURNDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTHERMOKARSTEVIDENCENull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.THERMOKARSTEVIDENCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTHERMOKARSTEVIDENCENull()
            Me(Me.tabletblEvents.THERMOKARSTEVIDENCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTHERMOKARSTLOCATIONNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.THERMOKARSTLOCATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTHERMOKARSTLOCATIONNull()
            Me(Me.tabletblEvents.THERMOKARSTLOCATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTHERMOKARSTEXTENTNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.THERMOKARSTEXTENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTHERMOKARSTEXTENTNull()
            Me(Me.tabletblEvents.THERMOKARSTEXTENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTHERMOKARSTACTIVENull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.THERMOKARSTACTIVEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTHERMOKARSTACTIVENull()
            Me(Me.tabletblEvents.THERMOKARSTACTIVEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTHERMOKARSTMATERIALNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.THERMOKARSTMATERIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTHERMOKARSTMATERIALNull()
            Me(Me.tabletblEvents.THERMOKARSTMATERIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWOODFROGPRESENTNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.WOODFROGPRESENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWOODFROGPRESENTNull()
            Me(Me.tabletblEvents.WOODFROGPRESENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPERCENTCLOUDSNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.PERCENTCLOUDSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPERCENTCLOUDSNull()
            Me(Me.tabletblEvents.PERCENTCLOUDSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWINDNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.WINDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWINDNull()
            Me(Me.tabletblEvents.WINDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPRECIPITATIONNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.PRECIPITATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPRECIPITATIONNull()
            Me(Me.tabletblEvents.PRECIPITATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPRECIPITATIONINTENSITYNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.PRECIPITATIONINTENSITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPRECIPITATIONINTENSITYNull()
            Me(Me.tabletblEvents.PRECIPITATIONINTENSITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWEATHERCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.WEATHERCOMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWEATHERCOMMENTSNull()
            Me(Me.tabletblEvents.WEATHERCOMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSITECONDITIONSCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.SITECONDITIONSCOMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSITECONDITIONSCOMMENTSNull()
            Me(Me.tabletblEvents.SITECONDITIONSCOMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBIRD_ANIMAL_ACTIVITYNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.BIRD_ANIMAL_ACTIVITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBIRD_ANIMAL_ACTIVITYNull()
            Me(Me.tabletblEvents.BIRD_ANIMAL_ACTIVITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsUPLAND_VIERECK_CLASSNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.UPLAND_VIERECK_CLASSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetUPLAND_VIERECK_CLASSNull()
            Me(Me.tabletblEvents.UPLAND_VIERECK_CLASSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsEMERGENT_VIERECK_CLASSNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.EMERGENT_VIERECK_CLASSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetEMERGENT_VIERECK_CLASSNull()
            Me(Me.tabletblEvents.EMERGENT_VIERECK_CLASSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSUBMERGENT_VIERECK_CLASSNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.SUBMERGENT_VIERECK_CLASSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSUBMERGENT_VIERECK_CLASSNull()
            Me(Me.tabletblEvents.SUBMERGENT_VIERECK_CLASSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSUBMERGENT_COVERNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.SUBMERGENT_COVERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSUBMERGENT_COVERNull()
            Me(Me.tabletblEvents.SUBMERGENT_COVERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsELODEA_SURVEYEDNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.ELODEA_SURVEYEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetELODEA_SURVEYEDNull()
            Me(Me.tabletblEvents.ELODEA_SURVEYEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsELODEA_PRESENTNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.ELODEA_PRESENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetELODEA_PRESENTNull()
            Me(Me.tabletblEvents.ELODEA_PRESENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsELODEA_NOTESNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.ELODEA_NOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetELODEA_NOTESNull()
            Me(Me.tabletblEvents.ELODEA_NOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFISHPRESENTNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.FISHPRESENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFISHPRESENTNull()
            Me(Me.tabletblEvents.FISHPRESENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWL_L_TO_SNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.WL_L_TO_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWL_L_TO_SNull()
            Me(Me.tabletblEvents.WL_L_TO_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWL_L_TO_GNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.WL_L_TO_GColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWL_L_TO_GNull()
            Me(Me.tabletblEvents.WL_L_TO_GColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWATERLEVEL_CMNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.WATERLEVEL_CMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWATERLEVEL_CMNull()
            Me(Me.tabletblEvents.WATERLEVEL_CMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMON_MOVEDNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.MON_MOVEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMON_MOVEDNull()
            Me(Me.tabletblEvents.MON_MOVEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLAKE_LEVEL_NOTESNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.LAKE_LEVEL_NOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLAKE_LEVEL_NOTESNull()
            Me(Me.tabletblEvents.LAKE_LEVEL_NOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSTRATCLASSNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.STRATCLASSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSTRATCLASSNull()
            Me(Me.tabletblEvents.STRATCLASSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTURBIDITY_FIELDNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.TURBIDITY_FIELDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTURBIDITY_FIELDNull()
            Me(Me.tabletblEvents.TURBIDITY_FIELDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsEMERGENT_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.EMERGENT_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetEMERGENT_WIDTHNull()
            Me(Me.tabletblEvents.EMERGENT_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSUBMERGENT_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.SUBMERGENT_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSUBMERGENT_WIDTHNull()
            Me(Me.tabletblEvents.SUBMERGENT_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLOONSPRESENTNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.LOONSPRESENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLOONSPRESENTNull()
            Me(Me.tabletblEvents.LOONSPRESENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRUSTYBBIRDSPRESENTNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.RUSTYBBIRDSPRESENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRUSTYBBIRDSPRESENTNull()
            Me(Me.tabletblEvents.RUSTYBBIRDSPRESENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSDINull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.SDIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSDINull()
            Me(Me.tabletblEvents.SDIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLAKEVOLUME_GIS_M3Null() As Boolean
            Return Me.IsNull(Me.tabletblEvents.LAKEVOLUME_GIS_M3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLAKEVOLUME_GIS_M3Null()
            Me(Me.tabletblEvents.LAKEVOLUME_GIS_M3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLAKEAREA_GIS_M2Null() As Boolean
            Return Me.IsNull(Me.tabletblEvents.LAKEAREA_GIS_M2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLAKEAREA_GIS_M2Null()
            Me(Me.tabletblEvents.LAKEAREA_GIS_M2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblEvents.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblEvents.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblEvents.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblEvents.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblEvents.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblEvents.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblInvertebrateSamplesRows() As tblInvertebrateSamplesRow()
            If (Me.Table.ChildRelations("FK_tblInvertebrateSamples_tblEvents1") Is Nothing) Then
                Return New tblInvertebrateSamplesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblInvertebrateSamples_tblEvents1")),tblInvertebrateSamplesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblLoonsRows() As tblLoonsRow()
            If (Me.Table.ChildRelations("FK_tblLoons_tblEvents") Is Nothing) Then
                Return New tblLoonsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblLoons_tblEvents")),tblLoonsRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblPondDepthsRows() As tblPondDepthsRow()
            If (Me.Table.ChildRelations("FK_tblPondDepths_tblEvents") Is Nothing) Then
                Return New tblPondDepthsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblPondDepths_tblEvents")),tblPondDepthsRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblTransQuadratsRows() As tblTransQuadratsRow()
            If (Me.Table.ChildRelations("FK_tblTransQuadrats_tblEvents") Is Nothing) Then
                Return New tblTransQuadratsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblTransQuadrats_tblEvents")),tblTransQuadratsRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblTransSpeciesPointInterceptsRows() As tblTransSpeciesPointInterceptsRow()
            If (Me.Table.ChildRelations("FK_tblTransSpeciesPointIntercepts_tblEvents") Is Nothing) Then
                Return New tblTransSpeciesPointInterceptsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblTransSpeciesPointIntercepts_tblEvents")),tblTransSpeciesPointInterceptsRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblUSGSLabDataRows() As tblUSGSLabDataRow()
            If (Me.Table.ChildRelations("FK_tblUSGSLabData_tblEvents") Is Nothing) Then
                Return New tblUSGSLabDataRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblUSGSLabData_tblEvents")),tblUSGSLabDataRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblVegProfilesRows() As tblVegProfilesRow()
            If (Me.Table.ChildRelations("FK_tblVegProfiles_tblEvents") Is Nothing) Then
                Return New tblVegProfilesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblVegProfiles_tblEvents")),tblVegProfilesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblVegTransectsRows() As tblVegTransectsRow()
            If (Me.Table.ChildRelations("FK_tblVegTransSpp_tblEvents") Is Nothing) Then
                Return New tblVegTransectsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblVegTransSpp_tblEvents")),tblVegTransectsRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblWaterSamplesRows() As tblWaterSamplesRow()
            If (Me.Table.ChildRelations("FK_tblWaterSamples_tblEvents") Is Nothing) Then
                Return New tblWaterSamplesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblWaterSamples_tblEvents")),tblWaterSamplesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblFrogMonitorsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblFrogMonitors As tblFrogMonitorsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblFrogMonitors = CType(Me.Table,tblFrogMonitorsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FM_Site() As String
            Get
                Return CType(Me(Me.tabletblFrogMonitors.FM_SiteColumn),String)
            End Get
            Set
                Me(Me.tabletblFrogMonitors.FM_SiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FM_Sampledate() As Date
            Get
                Return CType(Me(Me.tabletblFrogMonitors.FM_SampledateColumn),Date)
            End Get
            Set
                Me(Me.tabletblFrogMonitors.FM_SampledateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FM_Sampletime() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tabletblFrogMonitors.FM_SampletimeColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FM_Sampletime' in table 'tblFrogMonitors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFrogMonitors.FM_SampletimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FM_Observers() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblFrogMonitors.FM_ObserversColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FM_Observers' in table 'tblFrogMonitors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFrogMonitors.FM_ObserversColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FM_Deployment() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblFrogMonitors.FM_DeploymentColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FM_Deployment' in table 'tblFrogMonitors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFrogMonitors.FM_DeploymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FM_Retrieval() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblFrogMonitors.FM_RetrievalColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FM_Retrieval' in table 'tblFrogMonitors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFrogMonitors.FM_RetrievalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FM_BatteryChange() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblFrogMonitors.FM_BatteryChangeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FM_BatteryChange' in table 'tblFrogMonitors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFrogMonitors.FM_BatteryChangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FM_SDChange() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblFrogMonitors.FM_SDChangeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FM_SDChange' in table 'tblFrogMonitors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFrogMonitors.FM_SDChangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblFrogMonitors.NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'tblFrogMonitors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFrogMonitors.NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblFrogMonitors.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblFrogMonitors' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFrogMonitors.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFM_SampletimeNull() As Boolean
            Return Me.IsNull(Me.tabletblFrogMonitors.FM_SampletimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFM_SampletimeNull()
            Me(Me.tabletblFrogMonitors.FM_SampletimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFM_ObserversNull() As Boolean
            Return Me.IsNull(Me.tabletblFrogMonitors.FM_ObserversColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFM_ObserversNull()
            Me(Me.tabletblFrogMonitors.FM_ObserversColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFM_DeploymentNull() As Boolean
            Return Me.IsNull(Me.tabletblFrogMonitors.FM_DeploymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFM_DeploymentNull()
            Me(Me.tabletblFrogMonitors.FM_DeploymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFM_RetrievalNull() As Boolean
            Return Me.IsNull(Me.tabletblFrogMonitors.FM_RetrievalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFM_RetrievalNull()
            Me(Me.tabletblFrogMonitors.FM_RetrievalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFM_BatteryChangeNull() As Boolean
            Return Me.IsNull(Me.tabletblFrogMonitors.FM_BatteryChangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFM_BatteryChangeNull()
            Me(Me.tabletblFrogMonitors.FM_BatteryChangeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFM_SDChangeNull() As Boolean
            Return Me.IsNull(Me.tabletblFrogMonitors.FM_SDChangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFM_SDChangeNull()
            Me(Me.tabletblFrogMonitors.FM_SDChangeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tabletblFrogMonitors.NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNotesNull()
            Me(Me.tabletblFrogMonitors.NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblFrogMonitors.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblFrogMonitors.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblInvertebratesRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblInvertebrates As tblInvertebratesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblInvertebrates = CType(Me.Table,tblInvertebratesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Return CType(Me(Me.tabletblInvertebrates.PONDNAMEColumn),String)
            End Get
            Set
                Me(Me.tabletblInvertebrates.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEDATE() As Date
            Get
                Return CType(Me(Me.tabletblInvertebrates.SAMPLEDATEColumn),Date)
            End Get
            Set
                Me(Me.tabletblInvertebrates.SAMPLEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLENUMBER() As String
            Get
                Return CType(Me(Me.tabletblInvertebrates.SAMPLENUMBERColumn),String)
            End Get
            Set
                Me(Me.tabletblInvertebrates.SAMPLENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property INVERTID() As System.Guid
            Get
                Return CType(Me(Me.tabletblInvertebrates.INVERTIDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblInvertebrates.INVERTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LABSAMPLEID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrates.LABSAMPLEIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LABSAMPLEID' in table 'tblInvertebrates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrates.LABSAMPLEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LABCOUNT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrates.LABCOUNTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LABCOUNT' in table 'tblInvertebrates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrates.LABCOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TAXONSHORT() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrates.TAXONSHORTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXONSHORT' in table 'tblInvertebrates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrates.TAXONSHORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LIFESTAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrates.LIFESTAGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LIFESTAGE' in table 'tblInvertebrates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrates.LIFESTAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LIFESTAGE2() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrates.LIFESTAGE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LIFESTAGE2' in table 'tblInvertebrates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrates.LIFESTAGE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VOUCHER() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrates.VOUCHERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VOUCHER' in table 'tblInvertebrates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrates.VOUCHERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property COMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrates.COMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS' in table 'tblInvertebrates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrates.COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrates.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblInvertebrates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrates.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrates.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblInvertebrates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrates.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrates.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblInvertebrates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrates.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrates.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblInvertebrates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrates.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrates.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblInvertebrates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrates.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TAXA_ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrates.TAXA_IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAXA_ID' in table 'tblInvertebrates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrates.TAXA_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblInvertebrateSamplesRowParent() As tblInvertebrateSamplesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblInvertebrates_2009_tblInvertebrateSamples")),tblInvertebrateSamplesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblInvertebrates_2009_tblInvertebrateSamples"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLABSAMPLEIDNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrates.LABSAMPLEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLABSAMPLEIDNull()
            Me(Me.tabletblInvertebrates.LABSAMPLEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLABCOUNTNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrates.LABCOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLABCOUNTNull()
            Me(Me.tabletblInvertebrates.LABCOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTAXONSHORTNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrates.TAXONSHORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTAXONSHORTNull()
            Me(Me.tabletblInvertebrates.TAXONSHORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLIFESTAGENull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrates.LIFESTAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLIFESTAGENull()
            Me(Me.tabletblInvertebrates.LIFESTAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLIFESTAGE2Null() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrates.LIFESTAGE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLIFESTAGE2Null()
            Me(Me.tabletblInvertebrates.LIFESTAGE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsVOUCHERNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrates.VOUCHERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetVOUCHERNull()
            Me(Me.tabletblInvertebrates.VOUCHERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrates.COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCOMMENTSNull()
            Me(Me.tabletblInvertebrates.COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrates.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblInvertebrates.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrates.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblInvertebrates.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrates.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblInvertebrates.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrates.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblInvertebrates.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrates.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblInvertebrates.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTAXA_IDNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrates.TAXA_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTAXA_IDNull()
            Me(Me.tabletblInvertebrates.TAXA_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblInvertebrateSamplesRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblInvertebrateSamples As tblInvertebrateSamplesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblInvertebrateSamples = CType(Me.Table,tblInvertebrateSamplesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Return CType(Me(Me.tabletblInvertebrateSamples.PONDNAMEColumn),String)
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEDATE() As Date
            Get
                Return CType(Me(Me.tabletblInvertebrateSamples.SAMPLEDATEColumn),Date)
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.SAMPLEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLENUMBER() As String
            Get
                Return CType(Me(Me.tabletblInvertebrateSamples.SAMPLENUMBERColumn),String)
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.SAMPLENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LABSAMPLEID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.LABSAMPLEIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LABSAMPLEID' in table 'tblInvertebrateSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.LABSAMPLEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSECTNUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.TRANSECTNUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSECTNUMBER' in table 'tblInvertebrateSamples' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.TRANSECTNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLECOLLECTORS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.SAMPLECOLLECTORSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAMPLECOLLECTORS' in table 'tblInvertebrateSamples' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.SAMPLECOLLECTORSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property STANDARDIZEDSWEEP() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.STANDARDIZEDSWEEPColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STANDARDIZEDSWEEP' in table 'tblInvertebrateSamples' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.STANDARDIZEDSWEEPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property QUALITATIVESURVEY() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.QUALITATIVESURVEYColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QUALITATIVESURVEY' in table 'tblInvertebrateSamples' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.QUALITATIVESURVEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DOMINANTHABITAT() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.DOMINANTHABITATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOMINANTHABITAT' in table 'tblInvertebrateSamples' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.DOMINANTHABITATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WATERDEPTH() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.WATERDEPTHColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WATERDEPTH' in table 'tblInvertebrateSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.WATERDEPTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DISTANCETOSHORE() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.DISTANCETOSHOREColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISTANCETOSHORE' in table 'tblInvertebrateSamples' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.DISTANCETOSHOREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NUM_OF_BOTTLES() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.NUM_OF_BOTTLESColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUM_OF_BOTTLES' in table 'tblInvertebrateSamples' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.NUM_OF_BOTTLESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FRACTIONANALYZED() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.FRACTIONANALYZEDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FRACTIONANALYZED' in table 'tblInvertebrateSamples' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.FRACTIONANALYZEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property COMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.COMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS' in table 'tblInvertebrateSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property QUALITATIVESAMPLEHABITATDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.QUALITATIVESAMPLEHABITATDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QUALITATIVESAMPLEHABITATDESCRIPTION' in table 'tblInvertebr"& _ 
                            "ateSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.QUALITATIVESAMPLEHABITATDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property HABITATDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.HABITATDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HABITATDESCRIPTION' in table 'tblInvertebrateSamples' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.HABITATDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SOURCEDB() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.SOURCEDBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SOURCEDB' in table 'tblInvertebrateSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.SOURCEDBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SHIPPING_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.SHIPPING_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHIPPING_DATE' in table 'tblInvertebrateSamples' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.SHIPPING_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SHIPPING_INFO() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.SHIPPING_INFOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHIPPING_INFO' in table 'tblInvertebrateSamples' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.SHIPPING_INFOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblInvertebrateSamples' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblInvertebrateSamples' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblInvertebrateSamples' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblInvertebrateSamples' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblInvertebrateSamples.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblInvertebrateSamples' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInvertebrateSamples.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblEventsRowParent() As tblEventsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblInvertebrateSamples_tblEvents1")),tblEventsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblInvertebrateSamples_tblEvents1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLABSAMPLEIDNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.LABSAMPLEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLABSAMPLEIDNull()
            Me(Me.tabletblInvertebrateSamples.LABSAMPLEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANSECTNUMBERNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.TRANSECTNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANSECTNUMBERNull()
            Me(Me.tabletblInvertebrateSamples.TRANSECTNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSAMPLECOLLECTORSNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.SAMPLECOLLECTORSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSAMPLECOLLECTORSNull()
            Me(Me.tabletblInvertebrateSamples.SAMPLECOLLECTORSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSTANDARDIZEDSWEEPNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.STANDARDIZEDSWEEPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSTANDARDIZEDSWEEPNull()
            Me(Me.tabletblInvertebrateSamples.STANDARDIZEDSWEEPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsQUALITATIVESURVEYNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.QUALITATIVESURVEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetQUALITATIVESURVEYNull()
            Me(Me.tabletblInvertebrateSamples.QUALITATIVESURVEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDOMINANTHABITATNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.DOMINANTHABITATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDOMINANTHABITATNull()
            Me(Me.tabletblInvertebrateSamples.DOMINANTHABITATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWATERDEPTHNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.WATERDEPTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWATERDEPTHNull()
            Me(Me.tabletblInvertebrateSamples.WATERDEPTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDISTANCETOSHORENull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.DISTANCETOSHOREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDISTANCETOSHORENull()
            Me(Me.tabletblInvertebrateSamples.DISTANCETOSHOREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNUM_OF_BOTTLESNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.NUM_OF_BOTTLESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNUM_OF_BOTTLESNull()
            Me(Me.tabletblInvertebrateSamples.NUM_OF_BOTTLESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFRACTIONANALYZEDNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.FRACTIONANALYZEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFRACTIONANALYZEDNull()
            Me(Me.tabletblInvertebrateSamples.FRACTIONANALYZEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCOMMENTSNull()
            Me(Me.tabletblInvertebrateSamples.COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsQUALITATIVESAMPLEHABITATDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.QUALITATIVESAMPLEHABITATDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetQUALITATIVESAMPLEHABITATDESCRIPTIONNull()
            Me(Me.tabletblInvertebrateSamples.QUALITATIVESAMPLEHABITATDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsHABITATDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.HABITATDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetHABITATDESCRIPTIONNull()
            Me(Me.tabletblInvertebrateSamples.HABITATDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSOURCEDBNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.SOURCEDBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSOURCEDBNull()
            Me(Me.tabletblInvertebrateSamples.SOURCEDBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSHIPPING_DATENull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.SHIPPING_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSHIPPING_DATENull()
            Me(Me.tabletblInvertebrateSamples.SHIPPING_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSHIPPING_INFONull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.SHIPPING_INFOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSHIPPING_INFONull()
            Me(Me.tabletblInvertebrateSamples.SHIPPING_INFOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblInvertebrateSamples.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblInvertebrateSamples.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblInvertebrateSamples.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblInvertebrateSamples.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblInvertebrateSamples.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblInvertebrateSamples.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblInvertebratesRows() As tblInvertebratesRow()
            If (Me.Table.ChildRelations("FK_tblInvertebrates_2009_tblInvertebrateSamples") Is Nothing) Then
                Return New tblInvertebratesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblInvertebrates_2009_tblInvertebrateSamples")),tblInvertebratesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblLoonsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblLoons As tblLoonsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblLoons = CType(Me.Table,tblLoonsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Return CType(Me(Me.tabletblLoons.PONDNAMEColumn),String)
            End Get
            Set
                Me(Me.tabletblLoons.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEDATE() As Date
            Get
                Return CType(Me(Me.tabletblLoons.SAMPLEDATEColumn),Date)
            End Get
            Set
                Me(Me.tabletblLoons.SAMPLEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LOONID() As Long
            Get
                Return CType(Me(Me.tabletblLoons.LOONIDColumn),Long)
            End Get
            Set
                Me(Me.tabletblLoons.LOONIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property OBSERVER() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLoons.OBSERVERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OBSERVER' in table 'tblLoons' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLoons.OBSERVERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SPECIES() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLoons.SPECIESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIES' in table 'tblLoons' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLoons.SPECIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NUM_ADULTS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblLoons.NUM_ADULTSColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUM_ADULTS' in table 'tblLoons' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLoons.NUM_ADULTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NUM_YOUNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblLoons.NUM_YOUNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUM_YOUNG' in table 'tblLoons' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLoons.NUM_YOUNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DETECTION_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLoons.DETECTION_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DETECTION_TYPE' in table 'tblLoons' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLoons.DETECTION_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VEG_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLoons.VEG_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VEG_TYPE' in table 'tblLoons' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLoons.VEG_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LATITUDE() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblLoons.LATITUDEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LATITUDE' in table 'tblLoons' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLoons.LATITUDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LONGITUDE() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblLoons.LONGITUDEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LONGITUDE' in table 'tblLoons' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLoons.LONGITUDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property COMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLoons.COMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS' in table 'tblLoons' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLoons.COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SOURCE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLoons.SOURCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SOURCE' in table 'tblLoons' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLoons.SOURCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblLoons.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblLoons' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLoons.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLoons.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblLoons' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLoons.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblLoons.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblLoons' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLoons.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLoons.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblLoons' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLoons.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LoonsID() As Integer
            Get
                Return CType(Me(Me.tabletblLoons.LoonsIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblLoons.LoonsIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblLoons.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblLoons' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLoons.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblEventsRowParent() As tblEventsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblLoons_tblEvents")),tblEventsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblLoons_tblEvents"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsOBSERVERNull() As Boolean
            Return Me.IsNull(Me.tabletblLoons.OBSERVERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetOBSERVERNull()
            Me(Me.tabletblLoons.OBSERVERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSPECIESNull() As Boolean
            Return Me.IsNull(Me.tabletblLoons.SPECIESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSPECIESNull()
            Me(Me.tabletblLoons.SPECIESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNUM_ADULTSNull() As Boolean
            Return Me.IsNull(Me.tabletblLoons.NUM_ADULTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNUM_ADULTSNull()
            Me(Me.tabletblLoons.NUM_ADULTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNUM_YOUNGNull() As Boolean
            Return Me.IsNull(Me.tabletblLoons.NUM_YOUNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNUM_YOUNGNull()
            Me(Me.tabletblLoons.NUM_YOUNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDETECTION_TYPENull() As Boolean
            Return Me.IsNull(Me.tabletblLoons.DETECTION_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDETECTION_TYPENull()
            Me(Me.tabletblLoons.DETECTION_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsVEG_TYPENull() As Boolean
            Return Me.IsNull(Me.tabletblLoons.VEG_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetVEG_TYPENull()
            Me(Me.tabletblLoons.VEG_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLATITUDENull() As Boolean
            Return Me.IsNull(Me.tabletblLoons.LATITUDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLATITUDENull()
            Me(Me.tabletblLoons.LATITUDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLONGITUDENull() As Boolean
            Return Me.IsNull(Me.tabletblLoons.LONGITUDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLONGITUDENull()
            Me(Me.tabletblLoons.LONGITUDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tabletblLoons.COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCOMMENTSNull()
            Me(Me.tabletblLoons.COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSOURCENull() As Boolean
            Return Me.IsNull(Me.tabletblLoons.SOURCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSOURCENull()
            Me(Me.tabletblLoons.SOURCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblLoons.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblLoons.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblLoons.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblLoons.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblLoons.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblLoons.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblLoons.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblLoons.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblLoons.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblLoons.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblMonumentsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblMonuments As tblMonumentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblMonuments = CType(Me.Table,tblMonumentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Return CType(Me(Me.tabletblMonuments.PONDNAMEColumn),String)
            End Get
            Set
                Me(Me.tabletblMonuments.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_DATE() As Date
            Get
                Return CType(Me(Me.tabletblMonuments.M_DATEColumn),Date)
            End Get
            Set
                Me(Me.tabletblMonuments.M_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_LAT_NAD83() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_LAT_NAD83Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_LAT_NAD83' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_LAT_NAD83Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_LON_NAD83() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_LON_NAD83Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_LON_NAD83' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_LON_NAD83Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_LAT_WGS84() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_LAT_WGS84Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_LAT_WGS84' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_LAT_WGS84Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_LON_WGS84() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_LON_WGS84Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_LON_WGS84' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_LON_WGS84Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_ELEVATION() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_ELEVATIONColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_ELEVATION' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_ELEVATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_LOC_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_LOC_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_LOC_TYPE' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_LOC_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_LOC_MATERIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_LOC_MATERIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_LOC_MATERIAL' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_LOC_MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_LOC_NOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_LOC_NOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_LOC_NOTES' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_LOC_NOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_LOC_COMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_LOC_COMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_LOC_COMMENTS' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_LOC_COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_ACCESSTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_ACCESSTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_ACCESSTYPE' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_ACCESSTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_GRTS_NUM() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_GRTS_NUMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_GRTS_NUM' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_GRTS_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_GPSTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_GPSTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_GPSTYPE' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_GPSTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_GPSTIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_GPSTIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_GPSTIME' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_GPSTIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_CORR_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_CORR_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_CORR_TYPE' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_CORR_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_EST_H_ERROR() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_EST_H_ERRORColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_EST_H_ERROR' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_EST_H_ERRORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property M_EST_V_ERROR() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.M_EST_V_ERRORColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M_EST_V_ERROR' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.M_EST_V_ERRORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblMonuments.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblMonuments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblMonuments.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblPondsRow() As tblPondsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblMonuments_tblPonds")),tblPondsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblMonuments_tblPonds"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_LAT_NAD83Null() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_LAT_NAD83Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_LAT_NAD83Null()
            Me(Me.tabletblMonuments.M_LAT_NAD83Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_LON_NAD83Null() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_LON_NAD83Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_LON_NAD83Null()
            Me(Me.tabletblMonuments.M_LON_NAD83Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_LAT_WGS84Null() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_LAT_WGS84Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_LAT_WGS84Null()
            Me(Me.tabletblMonuments.M_LAT_WGS84Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_LON_WGS84Null() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_LON_WGS84Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_LON_WGS84Null()
            Me(Me.tabletblMonuments.M_LON_WGS84Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_ELEVATIONNull() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_ELEVATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_ELEVATIONNull()
            Me(Me.tabletblMonuments.M_ELEVATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_LOC_TYPENull() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_LOC_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_LOC_TYPENull()
            Me(Me.tabletblMonuments.M_LOC_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_LOC_MATERIALNull() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_LOC_MATERIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_LOC_MATERIALNull()
            Me(Me.tabletblMonuments.M_LOC_MATERIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_LOC_NOTESNull() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_LOC_NOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_LOC_NOTESNull()
            Me(Me.tabletblMonuments.M_LOC_NOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_LOC_COMMENTSNull() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_LOC_COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_LOC_COMMENTSNull()
            Me(Me.tabletblMonuments.M_LOC_COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_ACCESSTYPENull() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_ACCESSTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_ACCESSTYPENull()
            Me(Me.tabletblMonuments.M_ACCESSTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_GRTS_NUMNull() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_GRTS_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_GRTS_NUMNull()
            Me(Me.tabletblMonuments.M_GRTS_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_GPSTYPENull() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_GPSTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_GPSTYPENull()
            Me(Me.tabletblMonuments.M_GPSTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_GPSTIMENull() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_GPSTIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_GPSTIMENull()
            Me(Me.tabletblMonuments.M_GPSTIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_CORR_TYPENull() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_CORR_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_CORR_TYPENull()
            Me(Me.tabletblMonuments.M_CORR_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_EST_H_ERRORNull() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_EST_H_ERRORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_EST_H_ERRORNull()
            Me(Me.tabletblMonuments.M_EST_H_ERRORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsM_EST_V_ERRORNull() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.M_EST_V_ERRORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetM_EST_V_ERRORNull()
            Me(Me.tabletblMonuments.M_EST_V_ERRORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblMonuments.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblMonuments.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblPhotosRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblPhotos As tblPhotosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblPhotos = CType(Me.Table,tblPhotosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PHOTO_ID() As Integer
            Get
                Return CType(Me(Me.tabletblPhotos.PHOTO_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblPhotos.PHOTO_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property EVENT_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.EVENT_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EVENT_ID' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.EVENT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DATA_LOCATION_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.DATA_LOCATION_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATA_LOCATION_ID' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.DATA_LOCATION_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property EVENT_GROUP_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.EVENT_GROUP_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EVENT_GROUP_ID' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.EVENT_GROUP_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SITE_ID() As String
            Get
                Return CType(Me(Me.tabletblPhotos.SITE_IDColumn),String)
            End Get
            Set
                Me(Me.tabletblPhotos.SITE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SITE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.SITE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SITE_NAME' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.SITE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UNIT_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.UNIT_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNIT_CODE' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.UNIT_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WAYPOINT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.WAYPOINTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAYPOINT' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.WAYPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LOCATION() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.LOCATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOCATION' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.LOCATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.DESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESCRIPTION' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.TIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIME' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PHOTO_PATH() As String
            Get
                Return CType(Me(Me.tabletblPhotos.PHOTO_PATHColumn),String)
            End Get
            Set
                Me(Me.tabletblPhotos.PHOTO_PATHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SOURCE_FILE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.SOURCE_FILEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SOURCE_FILE' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.SOURCE_FILEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PHOTOGRAPHER() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.PHOTOGRAPHERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHOTOGRAPHER' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.PHOTOGRAPHERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TYPE' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property COLLECTION() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.COLLECTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COLLECTION' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.COLLECTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PUBLISHER() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.PUBLISHERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PUBLISHER' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.PUBLISHERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FORMAT() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.FORMATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FORMAT' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.FORMATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CREDITS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.CREDITSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREDITS' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.CREDITSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DISTRIBUTION_RESTRICTIONS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.DISTRIBUTION_RESTRICTIONSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISTRIBUTION_RESTRICTIONS' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.DISTRIBUTION_RESTRICTIONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property KEYWORDS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.KEYWORDSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KEYWORDS' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.KEYWORDSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DRAWING() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.DRAWINGColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DRAWING' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.DRAWINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FLAGGED() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.FLAGGEDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FLAGGED' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.FLAGGEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.PONDNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PONDNAME' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SOURCEDB() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.SOURCEDBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SOURCEDB' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.SOURCEDBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblPhotos.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblPhotos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPhotos.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsEVENT_IDNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.EVENT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetEVENT_IDNull()
            Me(Me.tabletblPhotos.EVENT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDATA_LOCATION_IDNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.DATA_LOCATION_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDATA_LOCATION_IDNull()
            Me(Me.tabletblPhotos.DATA_LOCATION_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsEVENT_GROUP_IDNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.EVENT_GROUP_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetEVENT_GROUP_IDNull()
            Me(Me.tabletblPhotos.EVENT_GROUP_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSITE_NAMENull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.SITE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSITE_NAMENull()
            Me(Me.tabletblPhotos.SITE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsUNIT_CODENull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.UNIT_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetUNIT_CODENull()
            Me(Me.tabletblPhotos.UNIT_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWAYPOINTNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.WAYPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWAYPOINTNull()
            Me(Me.tabletblPhotos.WAYPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLOCATIONNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.LOCATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLOCATIONNull()
            Me(Me.tabletblPhotos.LOCATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.DESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tabletblPhotos.DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_DATENull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_DATENull()
            Me(Me.tabletblPhotos.DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTIMENull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTIMENull()
            Me(Me.tabletblPhotos.TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSOURCE_FILENull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.SOURCE_FILEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSOURCE_FILENull()
            Me(Me.tabletblPhotos.SOURCE_FILEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPHOTOGRAPHERNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.PHOTOGRAPHERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPHOTOGRAPHERNull()
            Me(Me.tabletblPhotos.PHOTOGRAPHERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTYPENull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTYPENull()
            Me(Me.tabletblPhotos.TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCOLLECTIONNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.COLLECTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCOLLECTIONNull()
            Me(Me.tabletblPhotos.COLLECTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPUBLISHERNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.PUBLISHERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPUBLISHERNull()
            Me(Me.tabletblPhotos.PUBLISHERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFORMATNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.FORMATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFORMATNull()
            Me(Me.tabletblPhotos.FORMATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCREDITSNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.CREDITSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCREDITSNull()
            Me(Me.tabletblPhotos.CREDITSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDISTRIBUTION_RESTRICTIONSNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.DISTRIBUTION_RESTRICTIONSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDISTRIBUTION_RESTRICTIONSNull()
            Me(Me.tabletblPhotos.DISTRIBUTION_RESTRICTIONSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsKEYWORDSNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.KEYWORDSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetKEYWORDSNull()
            Me(Me.tabletblPhotos.KEYWORDSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDRAWINGNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.DRAWINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDRAWINGNull()
            Me(Me.tabletblPhotos.DRAWINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFLAGGEDNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.FLAGGEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFLAGGEDNull()
            Me(Me.tabletblPhotos.FLAGGEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPONDNAMENull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.PONDNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPONDNAMENull()
            Me(Me.tabletblPhotos.PONDNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSOURCEDBNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.SOURCEDBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSOURCEDBNull()
            Me(Me.tabletblPhotos.SOURCEDBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblPhotos.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblPhotos.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblPhotos.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblPhotos.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblPhotos.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblPhotos.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblPondDepthsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblPondDepths As tblPondDepthsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblPondDepths = CType(Me.Table,tblPondDepthsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LAKEDEPTHID() As Long
            Get
                Return CType(Me(Me.tabletblPondDepths.LAKEDEPTHIDColumn),Long)
            End Get
            Set
                Me(Me.tabletblPondDepths.LAKEDEPTHIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEDATE() As Date
            Get
                Return CType(Me(Me.tabletblPondDepths.SAMPLEDATEColumn),Date)
            End Get
            Set
                Me(Me.tabletblPondDepths.SAMPLEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Return CType(Me(Me.tabletblPondDepths.PONDNAMEColumn),String)
            End Get
            Set
                Me(Me.tabletblPondDepths.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property GPS_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.GPS_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GPS_DATE' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.GPS_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property GPS_TIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.GPS_TIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GPS_TIME' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.GPS_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DEPTH() As Double
            Get
                Return CType(Me(Me.tabletblPondDepths.DEPTHColumn),Double)
            End Get
            Set
                Me(Me.tabletblPondDepths.DEPTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LONGITUDE() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.LONGITUDEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LONGITUDE' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.LONGITUDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LATITUDE() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.LATITUDEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LATITUDE' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.LATITUDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property COMMENTS_DEPTHS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.COMMENTS_DEPTHSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS_DEPTHS' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.COMMENTS_DEPTHSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property HEIGHT() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.HEIGHTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEIGHT' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.HEIGHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FEAT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.FEAT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FEAT_NAME' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.FEAT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DATAFILE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.DATAFILEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATAFILE' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.DATAFILEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property GPS_HEIGHT() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.GPS_HEIGHTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GPS_HEIGHT' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.GPS_HEIGHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VERT_PREC() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.VERT_PRECColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VERT_PREC' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.VERT_PRECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property HORZ_PREC() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.HORZ_PRECColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HORZ_PREC' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.HORZ_PRECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property POINT_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.POINT_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POINT_ID' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.POINT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SOURCE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.SOURCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SOURCE' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.SOURCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PondDepthsID() As Integer
            Get
                Return CType(Me(Me.tabletblPondDepths.PondDepthsIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblPondDepths.PondDepthsIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblPondDepths.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblPondDepths' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPondDepths.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblEventsRowParent() As tblEventsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblPondDepths_tblEvents")),tblEventsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblPondDepths_tblEvents"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsGPS_DATENull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.GPS_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetGPS_DATENull()
            Me(Me.tabletblPondDepths.GPS_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsGPS_TIMENull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.GPS_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetGPS_TIMENull()
            Me(Me.tabletblPondDepths.GPS_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLONGITUDENull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.LONGITUDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLONGITUDENull()
            Me(Me.tabletblPondDepths.LONGITUDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLATITUDENull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.LATITUDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLATITUDENull()
            Me(Me.tabletblPondDepths.LATITUDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCOMMENTS_DEPTHSNull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.COMMENTS_DEPTHSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCOMMENTS_DEPTHSNull()
            Me(Me.tabletblPondDepths.COMMENTS_DEPTHSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsHEIGHTNull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.HEIGHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetHEIGHTNull()
            Me(Me.tabletblPondDepths.HEIGHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFEAT_NAMENull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.FEAT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFEAT_NAMENull()
            Me(Me.tabletblPondDepths.FEAT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDATAFILENull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.DATAFILEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDATAFILENull()
            Me(Me.tabletblPondDepths.DATAFILEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsGPS_HEIGHTNull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.GPS_HEIGHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetGPS_HEIGHTNull()
            Me(Me.tabletblPondDepths.GPS_HEIGHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsVERT_PRECNull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.VERT_PRECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetVERT_PRECNull()
            Me(Me.tabletblPondDepths.VERT_PRECColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsHORZ_PRECNull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.HORZ_PRECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetHORZ_PRECNull()
            Me(Me.tabletblPondDepths.HORZ_PRECColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPOINT_IDNull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.POINT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPOINT_IDNull()
            Me(Me.tabletblPondDepths.POINT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSOURCENull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.SOURCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSOURCENull()
            Me(Me.tabletblPondDepths.SOURCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblPondDepths.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblPondDepths.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblPondDepths.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblPondDepths.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblPondDepths.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblPondDepths.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblPondsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblPonds As tblPondsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblPonds = CType(Me.Table,tblPondsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Return CType(Me(Me.tabletblPonds.PONDNAMEColumn),String)
            End Get
            Set
                Me(Me.tabletblPonds.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PARK() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.PARKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PARK' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.PARKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LATITUDE_NAD83() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.LATITUDE_NAD83Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LATITUDE_NAD83' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.LATITUDE_NAD83Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LONGITUDE_NAD83() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.LONGITUDE_NAD83Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LONGITUDE_NAD83' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.LONGITUDE_NAD83Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LATITUDE_WGS84() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.LATITUDE_WGS84Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LATITUDE_WGS84' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.LATITUDE_WGS84Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LONGITUDE_WGS84() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.LONGITUDE_WGS84Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LONGITUDE_WGS84' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.LONGITUDE_WGS84Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ACCESSTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.ACCESSTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCESSTYPE' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.ACCESSTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property GPSTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.GPSTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GPSTYPE' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.GPSTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property GPSDATUM() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.GPSDATUMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GPSDATUM' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.GPSDATUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property GPSDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.GPSDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GPSDATE' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.GPSDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property QUAD() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.QUADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QUAD' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.QUADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property QUADNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.QUADNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QUADNUMBER' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.QUADNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ELEVATION() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.ELEVATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ELEVATION' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.ELEVATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ELEVATION_NUM() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.ELEVATION_NUMColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ELEVATION_NUM' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.ELEVATION_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ELEVATIONSOURCE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.ELEVATIONSOURCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ELEVATIONSOURCE' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.ELEVATIONSOURCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property HYDROLOGIC_REGIME() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.HYDROLOGIC_REGIMEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HYDROLOGIC_REGIME' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.HYDROLOGIC_REGIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property HYDROLOGIC_CLASS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.HYDROLOGIC_CLASSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HYDROLOGIC_CLASS' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.HYDROLOGIC_CLASSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FIRST_SAMPLED_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.FIRST_SAMPLED_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FIRST_SAMPLED_DATE' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.FIRST_SAMPLED_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UPDATED_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.UPDATED_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_DATE' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.UPDATED_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property EST_H_ERROR() As Single
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.EST_H_ERRORColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EST_H_ERROR' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.EST_H_ERRORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property EST_V_ERROR() As Single
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.EST_V_ERRORColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EST_V_ERROR' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.EST_V_ERRORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LOC_NOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.LOC_NOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOC_NOTES' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.LOC_NOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LOC_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.LOC_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOC_TYPE' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.LOC_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LOC_MATERIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.LOC_MATERIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOC_MATERIAL' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.LOC_MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property GRTS_NUM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.GRTS_NUMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GRTS_NUM' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.GRTS_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MAPLAKENUM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.MAPLAKENUMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAPLAKENUM' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.MAPLAKENUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SITESELECTIONNOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.SITESELECTIONNOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SITESELECTIONNOTES' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.SITESELECTIONNOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CONTINUOUS_DATA() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.CONTINUOUS_DATAColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CONTINUOUS_DATA' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.CONTINUOUS_DATAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SALINITY() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.SALINITYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SALINITY' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.SALINITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property EMERGENTS() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.EMERGENTSColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMERGENTS' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.EMERGENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property GENESIS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.GENESISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GENESIS' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.GENESISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ISLANDS() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.ISLANDSColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISLANDS' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.ISLANDSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SHORELINE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.SHORELINEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHORELINE' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.SHORELINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SUBSTRATE_TEXTURE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.SUBSTRATE_TEXTUREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUBSTRATE_TEXTURE' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.SUBSTRATE_TEXTUREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property COMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.COMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ECOREGION() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.ECOREGIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ECOREGION' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.ECOREGIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SUBSECTION() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.SUBSECTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUBSECTION' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.SUBSECTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DETSUBCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.DETSUBCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DETSUBCODE' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.DETSUBCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LAKEGEOLOGY() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.LAKEGEOLOGYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAKEGEOLOGY' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.LAKEGEOLOGYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LAKEGEOLOGYNOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.LAKEGEOLOGYNOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAKEGEOLOGYNOTES' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.LAKEGEOLOGYNOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LAKETYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.LAKETYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAKETYPE' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.LAKETYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LAKTYPE_CONFIRM() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.LAKTYPE_CONFIRMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAKTYPE_CONFIRM' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.LAKTYPE_CONFIRMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LAKETYPE_FIELDNOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.LAKETYPE_FIELDNOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAKETYPE_FIELDNOTES' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.LAKETYPE_FIELDNOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DENA_LAKETYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.DENA_LAKETYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DENA_LAKETYPE' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.DENA_LAKETYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FIREHISTORY() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.FIREHISTORYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FIREHISTORY' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.FIREHISTORYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PERMAFROST() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.PERMAFROSTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERMAFROST' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.PERMAFROSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property zECOREGION() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.zECOREGIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'zECOREGION' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.zECOREGIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property zSUBSECTION() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.zSUBSECTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'zSUBSECTION' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.zSUBSECTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblPonds.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblPonds' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPonds.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPARKNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.PARKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPARKNull()
            Me(Me.tabletblPonds.PARKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLATITUDE_NAD83Null() As Boolean
            Return Me.IsNull(Me.tabletblPonds.LATITUDE_NAD83Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLATITUDE_NAD83Null()
            Me(Me.tabletblPonds.LATITUDE_NAD83Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLONGITUDE_NAD83Null() As Boolean
            Return Me.IsNull(Me.tabletblPonds.LONGITUDE_NAD83Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLONGITUDE_NAD83Null()
            Me(Me.tabletblPonds.LONGITUDE_NAD83Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLATITUDE_WGS84Null() As Boolean
            Return Me.IsNull(Me.tabletblPonds.LATITUDE_WGS84Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLATITUDE_WGS84Null()
            Me(Me.tabletblPonds.LATITUDE_WGS84Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLONGITUDE_WGS84Null() As Boolean
            Return Me.IsNull(Me.tabletblPonds.LONGITUDE_WGS84Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLONGITUDE_WGS84Null()
            Me(Me.tabletblPonds.LONGITUDE_WGS84Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsACCESSTYPENull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.ACCESSTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetACCESSTYPENull()
            Me(Me.tabletblPonds.ACCESSTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsGPSTYPENull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.GPSTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetGPSTYPENull()
            Me(Me.tabletblPonds.GPSTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsGPSDATUMNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.GPSDATUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetGPSDATUMNull()
            Me(Me.tabletblPonds.GPSDATUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsGPSDATENull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.GPSDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetGPSDATENull()
            Me(Me.tabletblPonds.GPSDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsQUADNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.QUADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetQUADNull()
            Me(Me.tabletblPonds.QUADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsQUADNUMBERNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.QUADNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetQUADNUMBERNull()
            Me(Me.tabletblPonds.QUADNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsELEVATIONNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.ELEVATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetELEVATIONNull()
            Me(Me.tabletblPonds.ELEVATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsELEVATION_NUMNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.ELEVATION_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetELEVATION_NUMNull()
            Me(Me.tabletblPonds.ELEVATION_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsELEVATIONSOURCENull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.ELEVATIONSOURCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetELEVATIONSOURCENull()
            Me(Me.tabletblPonds.ELEVATIONSOURCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsHYDROLOGIC_REGIMENull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.HYDROLOGIC_REGIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetHYDROLOGIC_REGIMENull()
            Me(Me.tabletblPonds.HYDROLOGIC_REGIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsHYDROLOGIC_CLASSNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.HYDROLOGIC_CLASSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetHYDROLOGIC_CLASSNull()
            Me(Me.tabletblPonds.HYDROLOGIC_CLASSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFIRST_SAMPLED_DATENull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.FIRST_SAMPLED_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFIRST_SAMPLED_DATENull()
            Me(Me.tabletblPonds.FIRST_SAMPLED_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsUPDATED_DATENull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.UPDATED_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetUPDATED_DATENull()
            Me(Me.tabletblPonds.UPDATED_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsEST_H_ERRORNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.EST_H_ERRORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetEST_H_ERRORNull()
            Me(Me.tabletblPonds.EST_H_ERRORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsEST_V_ERRORNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.EST_V_ERRORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetEST_V_ERRORNull()
            Me(Me.tabletblPonds.EST_V_ERRORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLOC_NOTESNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.LOC_NOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLOC_NOTESNull()
            Me(Me.tabletblPonds.LOC_NOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLOC_TYPENull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.LOC_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLOC_TYPENull()
            Me(Me.tabletblPonds.LOC_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLOC_MATERIALNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.LOC_MATERIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLOC_MATERIALNull()
            Me(Me.tabletblPonds.LOC_MATERIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsGRTS_NUMNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.GRTS_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetGRTS_NUMNull()
            Me(Me.tabletblPonds.GRTS_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMAPLAKENUMNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.MAPLAKENUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMAPLAKENUMNull()
            Me(Me.tabletblPonds.MAPLAKENUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSITESELECTIONNOTESNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.SITESELECTIONNOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSITESELECTIONNOTESNull()
            Me(Me.tabletblPonds.SITESELECTIONNOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCONTINUOUS_DATANull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.CONTINUOUS_DATAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCONTINUOUS_DATANull()
            Me(Me.tabletblPonds.CONTINUOUS_DATAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSALINITYNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.SALINITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSALINITYNull()
            Me(Me.tabletblPonds.SALINITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsEMERGENTSNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.EMERGENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetEMERGENTSNull()
            Me(Me.tabletblPonds.EMERGENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsGENESISNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.GENESISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetGENESISNull()
            Me(Me.tabletblPonds.GENESISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsISLANDSNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.ISLANDSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetISLANDSNull()
            Me(Me.tabletblPonds.ISLANDSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSHORELINENull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.SHORELINEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSHORELINENull()
            Me(Me.tabletblPonds.SHORELINEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSUBSTRATE_TEXTURENull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.SUBSTRATE_TEXTUREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSUBSTRATE_TEXTURENull()
            Me(Me.tabletblPonds.SUBSTRATE_TEXTUREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCOMMENTSNull()
            Me(Me.tabletblPonds.COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsECOREGIONNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.ECOREGIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetECOREGIONNull()
            Me(Me.tabletblPonds.ECOREGIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSUBSECTIONNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.SUBSECTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSUBSECTIONNull()
            Me(Me.tabletblPonds.SUBSECTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDETSUBCODENull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.DETSUBCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDETSUBCODENull()
            Me(Me.tabletblPonds.DETSUBCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLAKEGEOLOGYNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.LAKEGEOLOGYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLAKEGEOLOGYNull()
            Me(Me.tabletblPonds.LAKEGEOLOGYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLAKEGEOLOGYNOTESNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.LAKEGEOLOGYNOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLAKEGEOLOGYNOTESNull()
            Me(Me.tabletblPonds.LAKEGEOLOGYNOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLAKETYPENull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.LAKETYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLAKETYPENull()
            Me(Me.tabletblPonds.LAKETYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLAKTYPE_CONFIRMNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.LAKTYPE_CONFIRMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLAKTYPE_CONFIRMNull()
            Me(Me.tabletblPonds.LAKTYPE_CONFIRMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLAKETYPE_FIELDNOTESNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.LAKETYPE_FIELDNOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLAKETYPE_FIELDNOTESNull()
            Me(Me.tabletblPonds.LAKETYPE_FIELDNOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDENA_LAKETYPENull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.DENA_LAKETYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDENA_LAKETYPENull()
            Me(Me.tabletblPonds.DENA_LAKETYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFIREHISTORYNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.FIREHISTORYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFIREHISTORYNull()
            Me(Me.tabletblPonds.FIREHISTORYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPERMAFROSTNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.PERMAFROSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPERMAFROSTNull()
            Me(Me.tabletblPonds.PERMAFROSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblPonds.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblPonds.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblPonds.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblPonds.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IszECOREGIONNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.zECOREGIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetzECOREGIONNull()
            Me(Me.tabletblPonds.zECOREGIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IszSUBSECTIONNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.zSUBSECTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetzSUBSECTIONNull()
            Me(Me.tabletblPonds.zSUBSECTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblPonds.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblPonds.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblContinuousDataSitesRows() As tblContinuousDataSitesRow()
            If (Me.Table.ChildRelations("FK_tblContinuousDataSites_tblPonds") Is Nothing) Then
                Return New tblContinuousDataSitesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblContinuousDataSites_tblPonds")),tblContinuousDataSitesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblEventsRows() As tblEventsRow()
            If (Me.Table.ChildRelations("FK_tblEvents_tblPonds") Is Nothing) Then
                Return New tblEventsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblEvents_tblPonds")),tblEventsRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblMonumentsRows() As tblMonumentsRow()
            If (Me.Table.ChildRelations("FK_tblMonuments_tblPonds") Is Nothing) Then
                Return New tblMonumentsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblMonuments_tblPonds")),tblMonumentsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblTransQuadratsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblTransQuadrats As tblTransQuadratsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblTransQuadrats = CType(Me.Table,tblTransQuadratsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDTRANSID() As Long
            Get
                Return CType(Me(Me.tabletblTransQuadrats.PONDTRANSIDColumn),Long)
            End Get
            Set
                Me(Me.tabletblTransQuadrats.PONDTRANSIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Return CType(Me(Me.tabletblTransQuadrats.PONDNAMEColumn),String)
            End Get
            Set
                Me(Me.tabletblTransQuadrats.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEDATE() As Date
            Get
                Return CType(Me(Me.tabletblTransQuadrats.SAMPLEDATEColumn),Date)
            End Get
            Set
                Me(Me.tabletblTransQuadrats.SAMPLEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSECTNUM() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANSECTNUMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSECTNUM' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANSECTNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSECT() As Integer
            Get
                Return CType(Me(Me.tabletblTransQuadrats.TRANSECTColumn),Integer)
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANSECTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property OBSERVERS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.OBSERVERSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OBSERVERS' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.OBSERVERSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SPECIES() As String
            Get
                Return CType(Me(Me.tabletblTransQuadrats.SPECIESColumn),String)
            End Get
            Set
                Me(Me.tabletblTransQuadrats.SPECIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SPECIESOTHER() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.SPECIESOTHERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIESOTHER' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.SPECIESOTHERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ANALYSIS_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.ANALYSIS_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANALYSIS_CODE' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.ANALYSIS_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property EXCLUDE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.EXCLUDEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCLUDE' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.EXCLUDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NUMQUADRATSPRESENT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.NUMQUADRATSPRESENTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMQUADRATSPRESENT' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.NUMQUADRATSPRESENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_1A() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_1AColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_1A' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_1AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_1B() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_1BColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_1B' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_1BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_1C() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_1CColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_1C' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_1CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_2A() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_2AColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_2A' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_2AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_2B() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_2BColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_2B' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_2BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_2C() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_2CColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_2C' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_2CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_3A() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_3AColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_3A' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_3AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_3B() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_3BColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_3B' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_3BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_3C() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_3CColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_3C' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_3CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_4A() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_4AColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_4A' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_4AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_4B() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_4BColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_4B' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_4BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_4C() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_4CColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_4C' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_4CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_5A() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_5AColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_5A' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_5AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_5B() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_5BColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_5B' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_5BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_5C() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_5CColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_5C' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_5CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_6A() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_6AColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_6A' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_6AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_6B() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_6BColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_6B' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_6BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_6C() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_6CColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_6C' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_6CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_7A() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_7AColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_7A' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_7AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_7B() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_7BColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_7B' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_7BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_7C() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_7CColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_7C' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_7CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_8A() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_8AColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_8A' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_8AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_8B() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_8BColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_8B' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_8BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_8C() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_8CColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_8C' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_8CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_9A() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_9AColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_9A' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_9AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_9B() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_9BColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_9B' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_9BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_9C() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_9CColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_9C' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_9CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_10A() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_10AColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_10A' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_10AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_10B() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_10BColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_10B' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_10BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_10C() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_10CColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_10C' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_10CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_11A() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_11AColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_11A' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_11AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_11B() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_11BColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_11B' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_11BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_11C() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_11CColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_11C' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_11CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_12A() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_12AColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_12A' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_12AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_12B() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_12BColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_12B' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_12BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_12C() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_12CColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_12C' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_12CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_13A() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_13AColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_13A' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_13AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_13B() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_13BColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_13B' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_13BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_13C() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_13CColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_13C' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_13CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_14A() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_14AColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_14A' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_14AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_14B() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_14BColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_14B' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_14BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANS_14C() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.TRANS_14CColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANS_14C' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TRANS_14CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property QUADNOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.QUADNOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QUADNOTES' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.QUADNOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DEVICE_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.DEVICE_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEVICE_ID' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.DEVICE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLETIME() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.SAMPLETIMEColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAMPLETIME' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.SAMPLETIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TransTransectsID() As Integer
            Get
                Return CType(Me(Me.tabletblTransQuadrats.TransTransectsIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblTransQuadrats.TransTransectsIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblTransQuadrats.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblTransQuadrats' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransQuadrats.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblEventsRowParent() As tblEventsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblTransQuadrats_tblEvents")),tblEventsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblTransQuadrats_tblEvents"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANSECTNUMNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANSECTNUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANSECTNUMNull()
            Me(Me.tabletblTransQuadrats.TRANSECTNUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsOBSERVERSNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.OBSERVERSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetOBSERVERSNull()
            Me(Me.tabletblTransQuadrats.OBSERVERSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSPECIESOTHERNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.SPECIESOTHERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSPECIESOTHERNull()
            Me(Me.tabletblTransQuadrats.SPECIESOTHERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsANALYSIS_CODENull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.ANALYSIS_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetANALYSIS_CODENull()
            Me(Me.tabletblTransQuadrats.ANALYSIS_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsEXCLUDENull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.EXCLUDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetEXCLUDENull()
            Me(Me.tabletblTransQuadrats.EXCLUDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNUMQUADRATSPRESENTNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.NUMQUADRATSPRESENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNUMQUADRATSPRESENTNull()
            Me(Me.tabletblTransQuadrats.NUMQUADRATSPRESENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_1ANull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_1AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_1ANull()
            Me(Me.tabletblTransQuadrats.TRANS_1AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_1BNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_1BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_1BNull()
            Me(Me.tabletblTransQuadrats.TRANS_1BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_1CNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_1CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_1CNull()
            Me(Me.tabletblTransQuadrats.TRANS_1CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_2ANull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_2AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_2ANull()
            Me(Me.tabletblTransQuadrats.TRANS_2AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_2BNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_2BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_2BNull()
            Me(Me.tabletblTransQuadrats.TRANS_2BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_2CNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_2CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_2CNull()
            Me(Me.tabletblTransQuadrats.TRANS_2CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_3ANull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_3AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_3ANull()
            Me(Me.tabletblTransQuadrats.TRANS_3AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_3BNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_3BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_3BNull()
            Me(Me.tabletblTransQuadrats.TRANS_3BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_3CNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_3CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_3CNull()
            Me(Me.tabletblTransQuadrats.TRANS_3CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_4ANull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_4AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_4ANull()
            Me(Me.tabletblTransQuadrats.TRANS_4AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_4BNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_4BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_4BNull()
            Me(Me.tabletblTransQuadrats.TRANS_4BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_4CNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_4CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_4CNull()
            Me(Me.tabletblTransQuadrats.TRANS_4CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_5ANull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_5AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_5ANull()
            Me(Me.tabletblTransQuadrats.TRANS_5AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_5BNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_5BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_5BNull()
            Me(Me.tabletblTransQuadrats.TRANS_5BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_5CNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_5CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_5CNull()
            Me(Me.tabletblTransQuadrats.TRANS_5CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_6ANull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_6AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_6ANull()
            Me(Me.tabletblTransQuadrats.TRANS_6AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_6BNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_6BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_6BNull()
            Me(Me.tabletblTransQuadrats.TRANS_6BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_6CNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_6CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_6CNull()
            Me(Me.tabletblTransQuadrats.TRANS_6CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_7ANull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_7AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_7ANull()
            Me(Me.tabletblTransQuadrats.TRANS_7AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_7BNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_7BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_7BNull()
            Me(Me.tabletblTransQuadrats.TRANS_7BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_7CNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_7CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_7CNull()
            Me(Me.tabletblTransQuadrats.TRANS_7CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_8ANull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_8AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_8ANull()
            Me(Me.tabletblTransQuadrats.TRANS_8AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_8BNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_8BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_8BNull()
            Me(Me.tabletblTransQuadrats.TRANS_8BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_8CNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_8CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_8CNull()
            Me(Me.tabletblTransQuadrats.TRANS_8CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_9ANull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_9AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_9ANull()
            Me(Me.tabletblTransQuadrats.TRANS_9AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_9BNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_9BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_9BNull()
            Me(Me.tabletblTransQuadrats.TRANS_9BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_9CNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_9CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_9CNull()
            Me(Me.tabletblTransQuadrats.TRANS_9CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_10ANull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_10AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_10ANull()
            Me(Me.tabletblTransQuadrats.TRANS_10AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_10BNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_10BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_10BNull()
            Me(Me.tabletblTransQuadrats.TRANS_10BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_10CNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_10CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_10CNull()
            Me(Me.tabletblTransQuadrats.TRANS_10CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_11ANull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_11AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_11ANull()
            Me(Me.tabletblTransQuadrats.TRANS_11AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_11BNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_11BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_11BNull()
            Me(Me.tabletblTransQuadrats.TRANS_11BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_11CNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_11CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_11CNull()
            Me(Me.tabletblTransQuadrats.TRANS_11CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_12ANull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_12AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_12ANull()
            Me(Me.tabletblTransQuadrats.TRANS_12AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_12BNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_12BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_12BNull()
            Me(Me.tabletblTransQuadrats.TRANS_12BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_12CNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_12CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_12CNull()
            Me(Me.tabletblTransQuadrats.TRANS_12CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_13ANull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_13AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_13ANull()
            Me(Me.tabletblTransQuadrats.TRANS_13AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_13BNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_13BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_13BNull()
            Me(Me.tabletblTransQuadrats.TRANS_13BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_13CNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_13CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_13CNull()
            Me(Me.tabletblTransQuadrats.TRANS_13CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_14ANull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_14AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_14ANull()
            Me(Me.tabletblTransQuadrats.TRANS_14AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_14BNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_14BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_14BNull()
            Me(Me.tabletblTransQuadrats.TRANS_14BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANS_14CNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.TRANS_14CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANS_14CNull()
            Me(Me.tabletblTransQuadrats.TRANS_14CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsQUADNOTESNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.QUADNOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetQUADNOTESNull()
            Me(Me.tabletblTransQuadrats.QUADNOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDEVICE_IDNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.DEVICE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDEVICE_IDNull()
            Me(Me.tabletblTransQuadrats.DEVICE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSAMPLETIMENull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.SAMPLETIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSAMPLETIMENull()
            Me(Me.tabletblTransQuadrats.SAMPLETIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblTransQuadrats.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblTransQuadrats.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblTransQuadrats.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblTransQuadrats.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblTransQuadrats.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblTransQuadrats.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblTransSpeciesPointInterceptsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblTransSpeciesPointIntercepts As tblTransSpeciesPointInterceptsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblTransSpeciesPointIntercepts = CType(Me.Table,tblTransSpeciesPointInterceptsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SPPNTINTID() As Long
            Get
                Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.SPPNTINTIDColumn),Long)
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.SPPNTINTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.PONDNAMEColumn),String)
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEDATE() As Date
            Get
                Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.SAMPLEDATEColumn),Date)
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.SAMPLEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSECTNUM() As String
            Get
                Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.TRANSECTNUMColumn),String)
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.TRANSECTNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DISTANCE_CM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.DISTANCE_CMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISTANCE_CM' in table 'tblTransSpeciesPointIntercepts' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.DISTANCE_CMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DEPTH_CM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.DEPTH_CMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEPTH_CM' in table 'tblTransSpeciesPointIntercepts' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.DEPTH_CMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SPECIES_1() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.SPECIES_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIES_1' in table 'tblTransSpeciesPointIntercepts' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.SPECIES_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SPECIES_2() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.SPECIES_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIES_2' in table 'tblTransSpeciesPointIntercepts' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.SPECIES_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SPECIES_3() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.SPECIES_3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIES_3' in table 'tblTransSpeciesPointIntercepts' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.SPECIES_3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SPECIES_4() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.SPECIES_4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIES_4' in table 'tblTransSpeciesPointIntercepts' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.SPECIES_4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SPECIES_5() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.SPECIES_5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIES_5' in table 'tblTransSpeciesPointIntercepts' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.SPECIES_5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property COMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.COMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS' in table 'tblTransSpeciesPointIntercepts' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblTransSpeciesPointIntercept"& _ 
                            "s' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblTransSpeciesPointIntercepts'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblTransSpeciesPointIntercepts"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblTransSpeciesPointIntercepts' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TransSpeciesPointInterceptsID() As Integer
            Get
                Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.TransSpeciesPointInterceptsIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.TransSpeciesPointInterceptsIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblTransSpeciesPointIntercepts.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblTransSpeciesPointIntercepts' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTransSpeciesPointIntercepts.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblEventsRowParent() As tblEventsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblTransSpeciesPointIntercepts_tblEvents")),tblEventsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblTransSpeciesPointIntercepts_tblEvents"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDISTANCE_CMNull() As Boolean
            Return Me.IsNull(Me.tabletblTransSpeciesPointIntercepts.DISTANCE_CMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDISTANCE_CMNull()
            Me(Me.tabletblTransSpeciesPointIntercepts.DISTANCE_CMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDEPTH_CMNull() As Boolean
            Return Me.IsNull(Me.tabletblTransSpeciesPointIntercepts.DEPTH_CMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDEPTH_CMNull()
            Me(Me.tabletblTransSpeciesPointIntercepts.DEPTH_CMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSPECIES_1Null() As Boolean
            Return Me.IsNull(Me.tabletblTransSpeciesPointIntercepts.SPECIES_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSPECIES_1Null()
            Me(Me.tabletblTransSpeciesPointIntercepts.SPECIES_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSPECIES_2Null() As Boolean
            Return Me.IsNull(Me.tabletblTransSpeciesPointIntercepts.SPECIES_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSPECIES_2Null()
            Me(Me.tabletblTransSpeciesPointIntercepts.SPECIES_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSPECIES_3Null() As Boolean
            Return Me.IsNull(Me.tabletblTransSpeciesPointIntercepts.SPECIES_3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSPECIES_3Null()
            Me(Me.tabletblTransSpeciesPointIntercepts.SPECIES_3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSPECIES_4Null() As Boolean
            Return Me.IsNull(Me.tabletblTransSpeciesPointIntercepts.SPECIES_4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSPECIES_4Null()
            Me(Me.tabletblTransSpeciesPointIntercepts.SPECIES_4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSPECIES_5Null() As Boolean
            Return Me.IsNull(Me.tabletblTransSpeciesPointIntercepts.SPECIES_5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSPECIES_5Null()
            Me(Me.tabletblTransSpeciesPointIntercepts.SPECIES_5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tabletblTransSpeciesPointIntercepts.COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCOMMENTSNull()
            Me(Me.tabletblTransSpeciesPointIntercepts.COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblTransSpeciesPointIntercepts.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblTransSpeciesPointIntercepts.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblTransSpeciesPointIntercepts.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblTransSpeciesPointIntercepts.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblTransSpeciesPointIntercepts.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblTransSpeciesPointIntercepts.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblTransSpeciesPointIntercepts.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblTransSpeciesPointIntercepts.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblTransSpeciesPointIntercepts.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblTransSpeciesPointIntercepts.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblUSGSLabDataRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblUSGSLabData As tblUSGSLabDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblUSGSLabData = CType(Me.Table,tblUSGSLabDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Master_Num() As Long
            Get
                Return CType(Me(Me.tabletblUSGSLabData.Master_NumColumn),Long)
            End Get
            Set
                Me(Me.tabletblUSGSLabData.Master_NumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SiteName() As String
            Get
                Return CType(Me(Me.tabletblUSGSLabData.SiteNameColumn),String)
            End Get
            Set
                Me(Me.tabletblUSGSLabData.SiteNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SiteDate() As Date
            Get
                Return CType(Me(Me.tabletblUSGSLabData.SiteDateColumn),Date)
            End Get
            Set
                Me(Me.tabletblUSGSLabData.SiteDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SampleNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.SampleNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleNumber' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.SampleNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property AnalysisLab() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.AnalysisLabColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnalysisLab' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.AnalysisLabColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DOC_WW() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.DOC_WWColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOC_WW' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.DOC_WWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UV_WW() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.UV_WWColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UV_WW' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.UV_WWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SUVA_WW() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.SUVA_WWColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUVA_WW' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.SUVA_WWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Delta_H2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.Delta_H2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Delta_H2' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.Delta_H2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property d2H_StdDev() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.d2H_StdDevColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'd2H_StdDev' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.d2H_StdDevColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Delta_O18() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.Delta_O18Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Delta_O18' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.Delta_O18Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property d18O_StdDev() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.d18O_StdDevColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'd18O_StdDev' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.d18O_StdDevColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NumReplicates() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.NumReplicatesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumReplicates' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.NumReplicatesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CO2_ppm() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.CO2_ppmColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CO2_ppm' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.CO2_ppmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CH4_ppm() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.CH4_ppmColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CH4_ppm' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.CH4_ppmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DIC_umolesL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.DIC_umolesLColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIC_umolesL' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.DIC_umolesLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DateAnalyzed() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.DateAnalyzedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateAnalyzed' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.DateAnalyzedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property USGSLabDataID() As Integer
            Get
                Return CType(Me(Me.tabletblUSGSLabData.USGSLabDataIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblUSGSLabData.USGSLabDataIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblUSGSLabData.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblUSGSLabData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUSGSLabData.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblEventsRowParent() As tblEventsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblUSGSLabData_tblEvents")),tblEventsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblUSGSLabData_tblEvents"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSampleNumberNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.SampleNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSampleNumberNull()
            Me(Me.tabletblUSGSLabData.SampleNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsAnalysisLabNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.AnalysisLabColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetAnalysisLabNull()
            Me(Me.tabletblUSGSLabData.AnalysisLabColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDOC_WWNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.DOC_WWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDOC_WWNull()
            Me(Me.tabletblUSGSLabData.DOC_WWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsUV_WWNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.UV_WWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetUV_WWNull()
            Me(Me.tabletblUSGSLabData.UV_WWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSUVA_WWNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.SUVA_WWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSUVA_WWNull()
            Me(Me.tabletblUSGSLabData.SUVA_WWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDelta_H2Null() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.Delta_H2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDelta_H2Null()
            Me(Me.tabletblUSGSLabData.Delta_H2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isd2H_StdDevNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.d2H_StdDevColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setd2H_StdDevNull()
            Me(Me.tabletblUSGSLabData.d2H_StdDevColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDelta_O18Null() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.Delta_O18Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDelta_O18Null()
            Me(Me.tabletblUSGSLabData.Delta_O18Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isd18O_StdDevNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.d18O_StdDevColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setd18O_StdDevNull()
            Me(Me.tabletblUSGSLabData.d18O_StdDevColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNumReplicatesNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.NumReplicatesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNumReplicatesNull()
            Me(Me.tabletblUSGSLabData.NumReplicatesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCO2_ppmNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.CO2_ppmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCO2_ppmNull()
            Me(Me.tabletblUSGSLabData.CO2_ppmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCH4_ppmNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.CH4_ppmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCH4_ppmNull()
            Me(Me.tabletblUSGSLabData.CH4_ppmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDIC_umolesLNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.DIC_umolesLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDIC_umolesLNull()
            Me(Me.tabletblUSGSLabData.DIC_umolesLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDateAnalyzedNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.DateAnalyzedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDateAnalyzedNull()
            Me(Me.tabletblUSGSLabData.DateAnalyzedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCommentsNull()
            Me(Me.tabletblUSGSLabData.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblUSGSLabData.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblUSGSLabData.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblUSGSLabData.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblUSGSLabData.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblUSGSLabData.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblUSGSLabData.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblVegProfilesRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblVegProfiles As tblVegProfilesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblVegProfiles = CType(Me.Table,tblVegProfilesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PROFILEID() As Long
            Get
                Return CType(Me(Me.tabletblVegProfiles.PROFILEIDColumn),Long)
            End Get
            Set
                Me(Me.tabletblVegProfiles.PROFILEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Return CType(Me(Me.tabletblVegProfiles.PONDNAMEColumn),String)
            End Get
            Set
                Me(Me.tabletblVegProfiles.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEDATE() As Date
            Get
                Return CType(Me(Me.tabletblVegProfiles.SAMPLEDATEColumn),Date)
            End Get
            Set
                Me(Me.tabletblVegProfiles.SAMPLEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLE_TIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.SAMPLE_TIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAMPLE_TIME' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.SAMPLE_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSECT_POINT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.TRANSECT_POINTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSECT_POINT' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.TRANSECT_POINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WATER_DEPTH() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.WATER_DEPTHColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WATER_DEPTH' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.WATER_DEPTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MAT_DEPTH() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.MAT_DEPTHColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_DEPTH' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.MAT_DEPTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BOTTOM_DEPTH() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.BOTTOM_DEPTHColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BOTTOM_DEPTH' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.BOTTOM_DEPTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MAX_PENETRATION() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.MAX_PENETRATIONColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAX_PENETRATION' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.MAX_PENETRATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SUBSTRATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.SUBSTRATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUBSTRATE' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.SUBSTRATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property GPS_TIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.GPS_TIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GPS_TIME' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.GPS_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LONGITUDE() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.LONGITUDEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LONGITUDE' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.LONGITUDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LATITUDE() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.LATITUDEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LATITUDE' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.LATITUDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property HEIGHT() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.HEIGHTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEIGHT' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.HEIGHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSECT_NUM() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.TRANSECT_NUMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSECT_NUM' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.TRANSECT_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property FEAT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.FEAT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FEAT_NAME' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.FEAT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DATAFILE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.DATAFILEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATAFILE' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.DATAFILEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property GPS_HEIGHT() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.GPS_HEIGHTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GPS_HEIGHT' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.GPS_HEIGHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VERT_PREC() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.VERT_PRECColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VERT_PREC' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.VERT_PRECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property HORZ_PREC() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.HORZ_PRECColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HORZ_PREC' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.HORZ_PRECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property POINT_ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.POINT_IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POINT_ID' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.POINT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SOURCE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.SOURCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SOURCE' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.SOURCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property COMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.COMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MANUAL_MM() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.MANUAL_MMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MANUAL_MM' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.MANUAL_MMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordCertifiedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.RecordCertifiedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordCertifiedDate' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.RecordCertifiedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordCertifiedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.RecordCertifiedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordCertifiedBy' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.RecordCertifiedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VegProfilesID() As Integer
            Get
                Return CType(Me(Me.tabletblVegProfiles.VegProfilesIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblVegProfiles.VegProfilesIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblVegProfiles.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblVegProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegProfiles.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblEventsRowParent() As tblEventsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblVegProfiles_tblEvents")),tblEventsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblVegProfiles_tblEvents"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSAMPLE_TIMENull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.SAMPLE_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSAMPLE_TIMENull()
            Me(Me.tabletblVegProfiles.SAMPLE_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANSECT_POINTNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.TRANSECT_POINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANSECT_POINTNull()
            Me(Me.tabletblVegProfiles.TRANSECT_POINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWATER_DEPTHNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.WATER_DEPTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWATER_DEPTHNull()
            Me(Me.tabletblVegProfiles.WATER_DEPTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMAT_DEPTHNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.MAT_DEPTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMAT_DEPTHNull()
            Me(Me.tabletblVegProfiles.MAT_DEPTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsBOTTOM_DEPTHNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.BOTTOM_DEPTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetBOTTOM_DEPTHNull()
            Me(Me.tabletblVegProfiles.BOTTOM_DEPTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMAX_PENETRATIONNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.MAX_PENETRATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMAX_PENETRATIONNull()
            Me(Me.tabletblVegProfiles.MAX_PENETRATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSUBSTRATENull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.SUBSTRATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSUBSTRATENull()
            Me(Me.tabletblVegProfiles.SUBSTRATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsGPS_TIMENull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.GPS_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetGPS_TIMENull()
            Me(Me.tabletblVegProfiles.GPS_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLONGITUDENull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.LONGITUDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLONGITUDENull()
            Me(Me.tabletblVegProfiles.LONGITUDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLATITUDENull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.LATITUDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLATITUDENull()
            Me(Me.tabletblVegProfiles.LATITUDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsHEIGHTNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.HEIGHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetHEIGHTNull()
            Me(Me.tabletblVegProfiles.HEIGHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTRANSECT_NUMNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.TRANSECT_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTRANSECT_NUMNull()
            Me(Me.tabletblVegProfiles.TRANSECT_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsFEAT_NAMENull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.FEAT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetFEAT_NAMENull()
            Me(Me.tabletblVegProfiles.FEAT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDATAFILENull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.DATAFILEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDATAFILENull()
            Me(Me.tabletblVegProfiles.DATAFILEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsGPS_HEIGHTNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.GPS_HEIGHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetGPS_HEIGHTNull()
            Me(Me.tabletblVegProfiles.GPS_HEIGHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsVERT_PRECNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.VERT_PRECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetVERT_PRECNull()
            Me(Me.tabletblVegProfiles.VERT_PRECColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsHORZ_PRECNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.HORZ_PRECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetHORZ_PRECNull()
            Me(Me.tabletblVegProfiles.HORZ_PRECColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPOINT_IDNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.POINT_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPOINT_IDNull()
            Me(Me.tabletblVegProfiles.POINT_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSOURCENull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.SOURCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSOURCENull()
            Me(Me.tabletblVegProfiles.SOURCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCOMMENTSNull()
            Me(Me.tabletblVegProfiles.COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMANUAL_MMNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.MANUAL_MMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMANUAL_MMNull()
            Me(Me.tabletblVegProfiles.MANUAL_MMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblVegProfiles.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblVegProfiles.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblVegProfiles.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblVegProfiles.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordCertifiedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.RecordCertifiedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordCertifiedDateNull()
            Me(Me.tabletblVegProfiles.RecordCertifiedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordCertifiedByNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.RecordCertifiedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordCertifiedByNull()
            Me(Me.tabletblVegProfiles.RecordCertifiedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblVegProfiles.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblVegProfiles.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblVegTransectsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblVegTransects As tblVegTransectsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblVegTransects = CType(Me.Table,tblVegTransectsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDVEGTRANSSPPID() As Long
            Get
                Return CType(Me(Me.tabletblVegTransects.PONDVEGTRANSSPPIDColumn),Long)
            End Get
            Set
                Me(Me.tabletblVegTransects.PONDVEGTRANSSPPIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Return CType(Me(Me.tabletblVegTransects.PONDNAMEColumn),String)
            End Get
            Set
                Me(Me.tabletblVegTransects.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEDATE() As Date
            Get
                Return CType(Me(Me.tabletblVegTransects.SAMPLEDATEColumn),Date)
            End Get
            Set
                Me(Me.tabletblVegTransects.SAMPLEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TRANSECT() As Integer
            Get
                Return CType(Me(Me.tabletblVegTransects.TRANSECTColumn),Integer)
            End Get
            Set
                Me(Me.tabletblVegTransects.TRANSECTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property OBSERVERS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblVegTransects.OBSERVERSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OBSERVERS' in table 'tblVegTransects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegTransects.OBSERVERSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SPECIES() As String
            Get
                Return CType(Me(Me.tabletblVegTransects.SPECIESColumn),String)
            End Get
            Set
                Me(Me.tabletblVegTransects.SPECIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SPECIESOTHER() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblVegTransects.SPECIESOTHERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIESOTHER' in table 'tblVegTransects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegTransects.SPECIESOTHERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SPECIESSTART() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblVegTransects.SPECIESSTARTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIESSTART' in table 'tblVegTransects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegTransects.SPECIESSTARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SPECIESSTOP() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblVegTransects.SPECIESSTOPColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIESSTOP' in table 'tblVegTransects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegTransects.SPECIESSTOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SPECIESDISTANCE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblVegTransects.SPECIESDISTANCEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIESDISTANCE' in table 'tblVegTransects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegTransects.SPECIESDISTANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VEGTRANSNOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblVegTransects.VEGTRANSNOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VEGTRANSNOTES' in table 'tblVegTransects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegTransects.VEGTRANSNOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ESTDISTANCE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblVegTransects.ESTDISTANCEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ESTDISTANCE' in table 'tblVegTransects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegTransects.ESTDISTANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property EXCLUDE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblVegTransects.EXCLUDEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCLUDE' in table 'tblVegTransects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegTransects.EXCLUDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ANALYSIS_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblVegTransects.ANALYSIS_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANALYSIS_CODE' in table 'tblVegTransects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegTransects.ANALYSIS_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLETIME() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tabletblVegTransects.SAMPLETIMEColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAMPLETIME' in table 'tblVegTransects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegTransects.SAMPLETIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DEVICE_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblVegTransects.DEVICE_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEVICE_ID' in table 'tblVegTransects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegTransects.DEVICE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Return CType(Me(Me.tabletblVegTransects.RecordInsertedDateColumn),Date)
            End Get
            Set
                Me(Me.tabletblVegTransects.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Return CType(Me(Me.tabletblVegTransects.RecordInsertedByColumn),String)
            End Get
            Set
                Me(Me.tabletblVegTransects.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Return CType(Me(Me.tabletblVegTransects.RecordUpdatedDateColumn),Date)
            End Get
            Set
                Me(Me.tabletblVegTransects.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Return CType(Me(Me.tabletblVegTransects.RecordUpdatedByColumn),String)
            End Get
            Set
                Me(Me.tabletblVegTransects.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VegTransectsID() As Integer
            Get
                Return CType(Me(Me.tabletblVegTransects.VegTransectsIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblVegTransects.VegTransectsIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblVegTransects.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblVegTransects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegTransects.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property QC_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblVegTransects.QC_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QC_Notes' in table 'tblVegTransects' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblVegTransects.QC_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblEventsRowParent() As tblEventsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblVegTransSpp_tblEvents")),tblEventsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblVegTransSpp_tblEvents"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsOBSERVERSNull() As Boolean
            Return Me.IsNull(Me.tabletblVegTransects.OBSERVERSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetOBSERVERSNull()
            Me(Me.tabletblVegTransects.OBSERVERSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSPECIESOTHERNull() As Boolean
            Return Me.IsNull(Me.tabletblVegTransects.SPECIESOTHERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSPECIESOTHERNull()
            Me(Me.tabletblVegTransects.SPECIESOTHERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSPECIESSTARTNull() As Boolean
            Return Me.IsNull(Me.tabletblVegTransects.SPECIESSTARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSPECIESSTARTNull()
            Me(Me.tabletblVegTransects.SPECIESSTARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSPECIESSTOPNull() As Boolean
            Return Me.IsNull(Me.tabletblVegTransects.SPECIESSTOPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSPECIESSTOPNull()
            Me(Me.tabletblVegTransects.SPECIESSTOPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSPECIESDISTANCENull() As Boolean
            Return Me.IsNull(Me.tabletblVegTransects.SPECIESDISTANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSPECIESDISTANCENull()
            Me(Me.tabletblVegTransects.SPECIESDISTANCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsVEGTRANSNOTESNull() As Boolean
            Return Me.IsNull(Me.tabletblVegTransects.VEGTRANSNOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetVEGTRANSNOTESNull()
            Me(Me.tabletblVegTransects.VEGTRANSNOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsESTDISTANCENull() As Boolean
            Return Me.IsNull(Me.tabletblVegTransects.ESTDISTANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetESTDISTANCENull()
            Me(Me.tabletblVegTransects.ESTDISTANCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsEXCLUDENull() As Boolean
            Return Me.IsNull(Me.tabletblVegTransects.EXCLUDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetEXCLUDENull()
            Me(Me.tabletblVegTransects.EXCLUDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsANALYSIS_CODENull() As Boolean
            Return Me.IsNull(Me.tabletblVegTransects.ANALYSIS_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetANALYSIS_CODENull()
            Me(Me.tabletblVegTransects.ANALYSIS_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSAMPLETIMENull() As Boolean
            Return Me.IsNull(Me.tabletblVegTransects.SAMPLETIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSAMPLETIMENull()
            Me(Me.tabletblVegTransects.SAMPLETIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDEVICE_IDNull() As Boolean
            Return Me.IsNull(Me.tabletblVegTransects.DEVICE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDEVICE_IDNull()
            Me(Me.tabletblVegTransects.DEVICE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblVegTransects.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblVegTransects.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsQC_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblVegTransects.QC_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetQC_NotesNull()
            Me(Me.tabletblVegTransects.QC_NotesColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblWaterChemistryRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblWaterChemistry As tblWaterChemistryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblWaterChemistry = CType(Me.Table,tblWaterChemistryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WaterChemistryID() As System.Guid
            Get
                Return CType(Me(Me.tabletblWaterChemistry.WaterChemistryIDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblWaterChemistry.WaterChemistryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Return CType(Me(Me.tabletblWaterChemistry.PONDNAMEColumn),String)
            End Get
            Set
                Me(Me.tabletblWaterChemistry.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEDATE() As Date
            Get
                Return CType(Me(Me.tabletblWaterChemistry.SAMPLEDATEColumn),Date)
            End Get
            Set
                Me(Me.tabletblWaterChemistry.SAMPLEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLENUMBER() As String
            Get
                Return CType(Me(Me.tabletblWaterChemistry.SAMPLENUMBERColumn),String)
            End Get
            Set
                Me(Me.tabletblWaterChemistry.SAMPLENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CHEM_LAB() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.CHEM_LABColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHEM_LAB' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.CHEM_LABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CHEM_METHOD() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.CHEM_METHODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHEM_METHOD' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.CHEM_METHODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LAB_SAMPLE_NUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.LAB_SAMPLE_NUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAB_SAMPLE_NUMBER' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.LAB_SAMPLE_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property LAB_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.LAB_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAB_DATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.LAB_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DELIVERY_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.DELIVERY_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DELIVERY_DATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.DELIVERY_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property THAW_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.THAW_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THAW_DATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.THAW_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DUPLICATED_CHEM_ANALYSIS() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.DUPLICATED_CHEM_ANALYSISColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DUPLICATED_CHEM_ANALYSIS' in table 'tblWaterChemistry' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.DUPLICATED_CHEM_ANALYSISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PH() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.PHColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PH' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.PHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PH_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.PH_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PH_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.PH_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PH_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.PH_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PH_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.PH_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PH_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.PH_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PH_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.PH_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PH_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.PH_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PH_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.PH_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TOTAL_ALKALINITY() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TOTAL_ALKALINITYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_ALKALINITY' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TOTAL_ALKALINITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TOTAL_ALKALINITY_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TOTAL_ALKALINITY_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_ALKALINITY_Notes' in table 'tblWaterChemistry' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TOTAL_ALKALINITY_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ALKALINITY_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.ALKALINITY_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ALKALINITY_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.ALKALINITY_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ALKALINITY_MG_L_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.ALKALINITY_MG_L_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ALKALINITY_MG_L_Notes' in table 'tblWaterChemistry' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.ALKALINITY_MG_L_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ALK_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.ALK_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ALK_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.ALK_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ALK_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.ALK_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ALK_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.ALK_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ALK_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.ALK_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ALK_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.ALK_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CONDUCTIVITY_AES() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.CONDUCTIVITY_AESColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CONDUCTIVITY_AES' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.CONDUCTIVITY_AESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CONDUCTIVITY_AES_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.CONDUCTIVITY_AES_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CONDUCTIVITY_AES_Notes' in table 'tblWaterChemistry' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.CONDUCTIVITY_AES_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property COND_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.COND_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COND_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.COND_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property COND_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.COND_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COND_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.COND_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property COND_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.COND_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COND_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.COND_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TKN_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TKN_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TKN_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TKN_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TKN_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TKN_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TKN_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TKN_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TKN_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TKN_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TKN_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TKN_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TKN_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TKN_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TKN_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TKN_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TN_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TN_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TN_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TN_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TN_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TN_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TN_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TN_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TN_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TN_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TN_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TN_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TN_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TN_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TN_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TN_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TN_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TN_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TN_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TN_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TDN_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TDN_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDN_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TDN_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TDN_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TDN_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDN_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TDN_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TDN_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TDN_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDN_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TDN_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TDN_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TDN_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDN_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TDN_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TDN_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TDN_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDN_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TDN_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TP_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TP_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TP_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TP_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TP_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TP_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TP_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TP_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TP_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TP_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TP_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TP_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TP_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TP_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TP_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TP_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TP_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TP_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TP_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TP_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TDP_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TDP_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDP_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TDP_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TDP_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TDP_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDP_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TDP_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TDP_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TDP_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDP_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TDP_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TDP_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TDP_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDP_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TDP_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TDP_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.TDP_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TDP_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.TDP_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PO4_P_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.PO4_P_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO4_P_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.PO4_P_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PO4_P_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.PO4_P_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO4_P_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.PO4_P_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PO4_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.PO4_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO4_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.PO4_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PO4_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.PO4_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO4_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.PO4_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PO4_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.PO4_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO4_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.PO4_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NO3_N_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NO3_N_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NO3_N_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NO3_N_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NO3_N_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NO3_N_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NO3_N_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NO3_N_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NO3_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NO3_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NO3_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NO3_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NO3_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NO3_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NO3_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NO3_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NO3_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NO3_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NO3_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NO3_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NH3_N_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NH3_N_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NH3_N_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NH3_N_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NH3_N_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NH3_N_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NH3_N_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NH3_N_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NH3_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NH3_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NH3_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NH3_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NH3_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NH3_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NH3_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NH3_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NH3_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NH3_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NH3_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NH3_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SI_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.SI_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SI_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.SI_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SI_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.SI_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SI_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.SI_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SI_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.SI_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SI_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.SI_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SI_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.SI_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SI_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.SI_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SI_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.SI_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SI_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.SI_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NA_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NA_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NA_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NA_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NA_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NA_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NA_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NA_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NA_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NA_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NA_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NA_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NA_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NA_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NA_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NA_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NA_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NA_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NA_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NA_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property K_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.K_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'K_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.K_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property K_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.K_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'K_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.K_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property K_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.K_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'K_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.K_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property K_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.K_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'K_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.K_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property K_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.K_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'K_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.K_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CA_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.CA_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CA_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.CA_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CA_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.CA_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CA_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.CA_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CA_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.CA_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CA_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.CA_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CA_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.CA_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CA_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.CA_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CA_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.CA_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CA_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.CA_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MG_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.MG_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MG_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.MG_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MG_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.MG_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MG_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.MG_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MG_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.MG_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MG_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.MG_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MG_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.MG_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MG_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.MG_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MG_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.MG_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MG_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.MG_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SO4_S_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.SO4_S_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SO4_S_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.SO4_S_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SO4_S_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.SO4_S_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SO4_S_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.SO4_S_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SO4_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.SO4_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SO4_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.SO4_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SO4_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.SO4_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SO4_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.SO4_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SO4_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.SO4_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SO4_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.SO4_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CL_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.CL_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CL_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.CL_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CL_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.CL_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CL_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.CL_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CL_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.CL_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CL_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.CL_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CL_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.CL_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CL_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.CL_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CL_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.CL_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CL_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.CL_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DOC_MG_L() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.DOC_MG_LColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOC_MG_L' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.DOC_MG_LColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DOC_Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.DOC_NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOC_Notes' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.DOC_NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DOC_MDL_LEVEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.DOC_MDL_LEVELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOC_MDL_LEVEL' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.DOC_MDL_LEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DOC_MDL_YN() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.DOC_MDL_YNColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOC_MDL_YN' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.DOC_MDL_YNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DOC_LABDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.DOC_LABDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOC_LABDATE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.DOC_LABDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.NOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOTES' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.NOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property COMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.COMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SOURCE() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.SOURCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SOURCE' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.SOURCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblWaterChemistry' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordCertifiedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.RecordCertifiedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordCertifiedDate' in table 'tblWaterChemistry' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.RecordCertifiedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordCertifiedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.RecordCertifiedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordCertifiedBy' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.RecordCertifiedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterChemistry.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblWaterChemistry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterChemistry.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblWaterSamplesRowParent() As tblWaterSamplesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblWaterChemistry_tblWaterSamples")),tblWaterSamplesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblWaterChemistry_tblWaterSamples"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCHEM_LABNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.CHEM_LABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCHEM_LABNull()
            Me(Me.tabletblWaterChemistry.CHEM_LABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCHEM_METHODNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.CHEM_METHODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCHEM_METHODNull()
            Me(Me.tabletblWaterChemistry.CHEM_METHODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLAB_SAMPLE_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.LAB_SAMPLE_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLAB_SAMPLE_NUMBERNull()
            Me(Me.tabletblWaterChemistry.LAB_SAMPLE_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsLAB_DATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.LAB_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetLAB_DATENull()
            Me(Me.tabletblWaterChemistry.LAB_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDELIVERY_DATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.DELIVERY_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDELIVERY_DATENull()
            Me(Me.tabletblWaterChemistry.DELIVERY_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTHAW_DATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.THAW_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTHAW_DATENull()
            Me(Me.tabletblWaterChemistry.THAW_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDUPLICATED_CHEM_ANALYSISNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.DUPLICATED_CHEM_ANALYSISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDUPLICATED_CHEM_ANALYSISNull()
            Me(Me.tabletblWaterChemistry.DUPLICATED_CHEM_ANALYSISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPHNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.PHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPHNull()
            Me(Me.tabletblWaterChemistry.PHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPH_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.PH_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPH_NotesNull()
            Me(Me.tabletblWaterChemistry.PH_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPH_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.PH_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPH_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.PH_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPH_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.PH_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPH_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.PH_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPH_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.PH_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPH_LABDATENull()
            Me(Me.tabletblWaterChemistry.PH_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTOTAL_ALKALINITYNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TOTAL_ALKALINITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTOTAL_ALKALINITYNull()
            Me(Me.tabletblWaterChemistry.TOTAL_ALKALINITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTOTAL_ALKALINITY_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TOTAL_ALKALINITY_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTOTAL_ALKALINITY_NotesNull()
            Me(Me.tabletblWaterChemistry.TOTAL_ALKALINITY_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsALKALINITY_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.ALKALINITY_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetALKALINITY_MG_LNull()
            Me(Me.tabletblWaterChemistry.ALKALINITY_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsALKALINITY_MG_L_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.ALKALINITY_MG_L_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetALKALINITY_MG_L_NotesNull()
            Me(Me.tabletblWaterChemistry.ALKALINITY_MG_L_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsALK_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.ALK_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetALK_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.ALK_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsALK_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.ALK_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetALK_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.ALK_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsALK_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.ALK_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetALK_LABDATENull()
            Me(Me.tabletblWaterChemistry.ALK_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCONDUCTIVITY_AESNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.CONDUCTIVITY_AESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCONDUCTIVITY_AESNull()
            Me(Me.tabletblWaterChemistry.CONDUCTIVITY_AESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCONDUCTIVITY_AES_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.CONDUCTIVITY_AES_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCONDUCTIVITY_AES_NotesNull()
            Me(Me.tabletblWaterChemistry.CONDUCTIVITY_AES_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCOND_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.COND_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCOND_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.COND_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCOND_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.COND_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCOND_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.COND_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCOND_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.COND_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCOND_LABDATENull()
            Me(Me.tabletblWaterChemistry.COND_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTKN_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TKN_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTKN_MG_LNull()
            Me(Me.tabletblWaterChemistry.TKN_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTKN_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TKN_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTKN_NotesNull()
            Me(Me.tabletblWaterChemistry.TKN_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTKN_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TKN_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTKN_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.TKN_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTKN_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TKN_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTKN_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.TKN_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTN_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TN_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTN_MG_LNull()
            Me(Me.tabletblWaterChemistry.TN_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTN_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TN_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTN_NotesNull()
            Me(Me.tabletblWaterChemistry.TN_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTN_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TN_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTN_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.TN_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTN_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TN_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTN_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.TN_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTN_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TN_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTN_LABDATENull()
            Me(Me.tabletblWaterChemistry.TN_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTDN_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TDN_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTDN_MG_LNull()
            Me(Me.tabletblWaterChemistry.TDN_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTDN_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TDN_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTDN_NotesNull()
            Me(Me.tabletblWaterChemistry.TDN_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTDN_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TDN_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTDN_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.TDN_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTDN_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TDN_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTDN_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.TDN_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTDN_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TDN_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTDN_LABDATENull()
            Me(Me.tabletblWaterChemistry.TDN_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTP_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TP_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTP_MG_LNull()
            Me(Me.tabletblWaterChemistry.TP_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTP_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TP_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTP_NotesNull()
            Me(Me.tabletblWaterChemistry.TP_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTP_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TP_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTP_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.TP_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTP_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TP_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTP_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.TP_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTP_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TP_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTP_LABDATENull()
            Me(Me.tabletblWaterChemistry.TP_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTDP_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TDP_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTDP_MG_LNull()
            Me(Me.tabletblWaterChemistry.TDP_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTDP_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TDP_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTDP_NotesNull()
            Me(Me.tabletblWaterChemistry.TDP_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTDP_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TDP_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTDP_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.TDP_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTDP_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TDP_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTDP_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.TDP_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTDP_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.TDP_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTDP_LABDATENull()
            Me(Me.tabletblWaterChemistry.TDP_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPO4_P_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.PO4_P_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPO4_P_MG_LNull()
            Me(Me.tabletblWaterChemistry.PO4_P_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPO4_P_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.PO4_P_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPO4_P_NotesNull()
            Me(Me.tabletblWaterChemistry.PO4_P_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPO4_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.PO4_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPO4_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.PO4_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPO4_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.PO4_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPO4_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.PO4_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPO4_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.PO4_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPO4_LABDATENull()
            Me(Me.tabletblWaterChemistry.PO4_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNO3_N_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NO3_N_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNO3_N_MG_LNull()
            Me(Me.tabletblWaterChemistry.NO3_N_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNO3_N_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NO3_N_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNO3_N_NotesNull()
            Me(Me.tabletblWaterChemistry.NO3_N_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNO3_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NO3_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNO3_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.NO3_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNO3_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NO3_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNO3_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.NO3_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNO3_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NO3_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNO3_LABDATENull()
            Me(Me.tabletblWaterChemistry.NO3_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNH3_N_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NH3_N_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNH3_N_MG_LNull()
            Me(Me.tabletblWaterChemistry.NH3_N_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNH3_N_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NH3_N_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNH3_N_NotesNull()
            Me(Me.tabletblWaterChemistry.NH3_N_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNH3_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NH3_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNH3_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.NH3_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNH3_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NH3_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNH3_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.NH3_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNH3_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NH3_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNH3_LABDATENull()
            Me(Me.tabletblWaterChemistry.NH3_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSI_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.SI_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSI_MG_LNull()
            Me(Me.tabletblWaterChemistry.SI_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSI_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.SI_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSI_NotesNull()
            Me(Me.tabletblWaterChemistry.SI_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSI_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.SI_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSI_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.SI_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSI_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.SI_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSI_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.SI_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSI_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.SI_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSI_LABDATENull()
            Me(Me.tabletblWaterChemistry.SI_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNA_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NA_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNA_MG_LNull()
            Me(Me.tabletblWaterChemistry.NA_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNA_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NA_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNA_NotesNull()
            Me(Me.tabletblWaterChemistry.NA_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNA_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NA_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNA_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.NA_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNA_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NA_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNA_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.NA_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNA_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NA_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNA_LABDATENull()
            Me(Me.tabletblWaterChemistry.NA_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsK_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.K_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetK_MG_LNull()
            Me(Me.tabletblWaterChemistry.K_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsK_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.K_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetK_NotesNull()
            Me(Me.tabletblWaterChemistry.K_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsK_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.K_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetK_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.K_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsK_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.K_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetK_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.K_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsK_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.K_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetK_LABDATENull()
            Me(Me.tabletblWaterChemistry.K_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCA_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.CA_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCA_MG_LNull()
            Me(Me.tabletblWaterChemistry.CA_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCA_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.CA_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCA_NotesNull()
            Me(Me.tabletblWaterChemistry.CA_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCA_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.CA_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCA_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.CA_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCA_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.CA_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCA_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.CA_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCA_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.CA_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCA_LABDATENull()
            Me(Me.tabletblWaterChemistry.CA_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMG_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.MG_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMG_MG_LNull()
            Me(Me.tabletblWaterChemistry.MG_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMG_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.MG_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMG_NotesNull()
            Me(Me.tabletblWaterChemistry.MG_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMG_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.MG_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMG_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.MG_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMG_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.MG_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMG_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.MG_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMG_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.MG_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMG_LABDATENull()
            Me(Me.tabletblWaterChemistry.MG_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSO4_S_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.SO4_S_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSO4_S_MG_LNull()
            Me(Me.tabletblWaterChemistry.SO4_S_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSO4_S_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.SO4_S_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSO4_S_NotesNull()
            Me(Me.tabletblWaterChemistry.SO4_S_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSO4_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.SO4_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSO4_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.SO4_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSO4_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.SO4_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSO4_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.SO4_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSO4_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.SO4_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSO4_LABDATENull()
            Me(Me.tabletblWaterChemistry.SO4_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCL_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.CL_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCL_MG_LNull()
            Me(Me.tabletblWaterChemistry.CL_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCL_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.CL_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCL_NotesNull()
            Me(Me.tabletblWaterChemistry.CL_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCL_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.CL_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCL_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.CL_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCL_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.CL_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCL_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.CL_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCL_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.CL_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCL_LABDATENull()
            Me(Me.tabletblWaterChemistry.CL_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDOC_MG_LNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.DOC_MG_LColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDOC_MG_LNull()
            Me(Me.tabletblWaterChemistry.DOC_MG_LColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDOC_NotesNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.DOC_NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDOC_NotesNull()
            Me(Me.tabletblWaterChemistry.DOC_NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDOC_MDL_LEVELNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.DOC_MDL_LEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDOC_MDL_LEVELNull()
            Me(Me.tabletblWaterChemistry.DOC_MDL_LEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDOC_MDL_YNNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.DOC_MDL_YNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDOC_MDL_YNNull()
            Me(Me.tabletblWaterChemistry.DOC_MDL_YNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDOC_LABDATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.DOC_LABDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDOC_LABDATENull()
            Me(Me.tabletblWaterChemistry.DOC_LABDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNOTESNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.NOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNOTESNull()
            Me(Me.tabletblWaterChemistry.NOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCOMMENTSNull()
            Me(Me.tabletblWaterChemistry.COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSOURCENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.SOURCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSOURCENull()
            Me(Me.tabletblWaterChemistry.SOURCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblWaterChemistry.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblWaterChemistry.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblWaterChemistry.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblWaterChemistry.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordCertifiedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.RecordCertifiedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordCertifiedDateNull()
            Me(Me.tabletblWaterChemistry.RecordCertifiedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordCertifiedByNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.RecordCertifiedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordCertifiedByNull()
            Me(Me.tabletblWaterChemistry.RecordCertifiedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterChemistry.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblWaterChemistry.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblWaterProfilesRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblWaterProfiles As tblWaterProfilesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblWaterProfiles = CType(Me.Table,tblWaterProfilesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Return CType(Me(Me.tabletblWaterProfiles.PONDNAMEColumn),String)
            End Get
            Set
                Me(Me.tabletblWaterProfiles.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEDATE() As Date
            Get
                Return CType(Me(Me.tabletblWaterProfiles.SAMPLEDATEColumn),Date)
            End Get
            Set
                Me(Me.tabletblWaterProfiles.SAMPLEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLENUMBER() As String
            Get
                Return CType(Me(Me.tabletblWaterProfiles.SAMPLENUMBERColumn),String)
            End Get
            Set
                Me(Me.tabletblWaterProfiles.SAMPLENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLETIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.SAMPLETIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAMPLETIME' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.SAMPLETIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEDEPTH() As Double
            Get
                Return CType(Me(Me.tabletblWaterProfiles.SAMPLEDEPTHColumn),Double)
            End Get
            Set
                Me(Me.tabletblWaterProfiles.SAMPLEDEPTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DEPTH_SENSORCALC() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.DEPTH_SENSORCALCColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEPTH_SENSORCALC' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.DEPTH_SENSORCALCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TEMPERATURE() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.TEMPERATUREColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEMPERATURE' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.TEMPERATUREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PH() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.PHColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PH' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.PHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property pH_mV() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.pH_mVColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pH_mV' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.pH_mVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SPECIFICCONDUCTANCE() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.SPECIFICCONDUCTANCEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPECIFICCONDUCTANCE' in table 'tblWaterProfiles' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.SPECIFICCONDUCTANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property _DO() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.DOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DO' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.DOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DO_PCT() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.DO_PCTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DO_PCT' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.DO_PCTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DO_Charge() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.DO_ChargeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DO_Charge' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.DO_ChargeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PROFILE_COMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.PROFILE_COMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROFILE_COMMENTS' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.PROFILE_COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DO_METHOD() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.DO_METHODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DO_METHOD' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.DO_METHODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ODO_PCT_LOCALB() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterProfiles.ODO_PCT_LOCALBColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ODO_PCT_LOCALB' in table 'tblWaterProfiles' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterProfiles.ODO_PCT_LOCALBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblWaterSamplesRowParent() As tblWaterSamplesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblWaterProfiles_tblWaterSamples")),tblWaterSamplesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblWaterProfiles_tblWaterSamples"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSAMPLETIMENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.SAMPLETIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSAMPLETIMENull()
            Me(Me.tabletblWaterProfiles.SAMPLETIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDEPTH_SENSORCALCNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.DEPTH_SENSORCALCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDEPTH_SENSORCALCNull()
            Me(Me.tabletblWaterProfiles.DEPTH_SENSORCALCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTEMPERATURENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.TEMPERATUREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTEMPERATURENull()
            Me(Me.tabletblWaterProfiles.TEMPERATUREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPHNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.PHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPHNull()
            Me(Me.tabletblWaterProfiles.PHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IspH_mVNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.pH_mVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetpH_mVNull()
            Me(Me.tabletblWaterProfiles.pH_mVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSPECIFICCONDUCTANCENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.SPECIFICCONDUCTANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSPECIFICCONDUCTANCENull()
            Me(Me.tabletblWaterProfiles.SPECIFICCONDUCTANCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Is_DONull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.DOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Set_DONull()
            Me(Me.tabletblWaterProfiles.DOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDO_PCTNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.DO_PCTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDO_PCTNull()
            Me(Me.tabletblWaterProfiles.DO_PCTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDO_ChargeNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.DO_ChargeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDO_ChargeNull()
            Me(Me.tabletblWaterProfiles.DO_ChargeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPROFILE_COMMENTSNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.PROFILE_COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPROFILE_COMMENTSNull()
            Me(Me.tabletblWaterProfiles.PROFILE_COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblWaterProfiles.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblWaterProfiles.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblWaterProfiles.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblWaterProfiles.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblWaterProfiles.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDO_METHODNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.DO_METHODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDO_METHODNull()
            Me(Me.tabletblWaterProfiles.DO_METHODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsODO_PCT_LOCALBNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterProfiles.ODO_PCT_LOCALBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetODO_PCT_LOCALBNull()
            Me(Me.tabletblWaterProfiles.ODO_PCT_LOCALBColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tblWaterSamplesRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblWaterSamples As tblWaterSamplesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblWaterSamples = CType(Me.Table,tblWaterSamplesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property PONDNAME() As String
            Get
                Return CType(Me(Me.tabletblWaterSamples.PONDNAMEColumn),String)
            End Get
            Set
                Me(Me.tabletblWaterSamples.PONDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEDATE() As Date
            Get
                Return CType(Me(Me.tabletblWaterSamples.SAMPLEDATEColumn),Date)
            End Get
            Set
                Me(Me.tabletblWaterSamples.SAMPLEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLENUMBER() As String
            Get
                Return CType(Me(Me.tabletblWaterSamples.SAMPLENUMBERColumn),String)
            End Get
            Set
                Me(Me.tabletblWaterSamples.SAMPLENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLEDEPTH() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.SAMPLEDEPTHColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAMPLEDEPTH' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.SAMPLEDEPTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SAMPLETIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.SAMPLETIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAMPLETIME' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.SAMPLETIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DEPTH() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.DEPTHColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEPTH' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.DEPTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property WATERCOLOR() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.WATERCOLORColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WATERCOLOR' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.WATERCOLORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ALKALINITY() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.ALKALINITYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ALKALINITY' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.ALKALINITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property VOLUMEFILTERED() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.VOLUMEFILTEREDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VOLUMEFILTERED' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.VOLUMEFILTEREDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property COMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.COMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SHIPPING_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.SHIPPING_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHIPPING_DATE' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.SHIPPING_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SHIPPING_INFO() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.SHIPPING_INFOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHIPPING_INFO' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.SHIPPING_INFOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Methane() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.MethaneColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Methane' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.MethaneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DOC_COLL() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.DOC_COLLColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOC_COLL' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.DOC_COLLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property O18_COLL() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.O18_COLLColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'O18_COLL' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.O18_COLLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property SI_DOC_COLL() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.SI_DOC_COLLColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SI_DOC_COLL' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.SI_DOC_COLLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property IONS_COLL() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.IONS_COLLColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IONS_COLL' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.IONS_COLLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property TN_TP_COLL() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.TN_TP_COLLColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TN_TP_COLL' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.TN_TP_COLLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property CHLA_COLL() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.CHLA_COLLColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHLA_COLL' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.CHLA_COLLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property NOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.NOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOTES' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.NOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property DISTFROMSHORE() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.DISTFROMSHOREColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISTFROMSHORE' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.DISTFROMSHOREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.RecordInsertedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedDate' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.RecordInsertedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordInsertedBy' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.RecordUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedDate' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.RecordUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property RecordUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.RecordUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordUpdatedBy' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.RecordUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property row_timestamp() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblWaterSamples.row_timestampColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'row_timestamp' in table 'tblWaterSamples' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblWaterSamples.row_timestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property tblEventsRowParent() As tblEventsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblWaterSamples_tblEvents")),tblEventsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblWaterSamples_tblEvents"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSAMPLEDEPTHNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.SAMPLEDEPTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSAMPLEDEPTHNull()
            Me(Me.tabletblWaterSamples.SAMPLEDEPTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSAMPLETIMENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.SAMPLETIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSAMPLETIMENull()
            Me(Me.tabletblWaterSamples.SAMPLETIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDEPTHNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.DEPTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDEPTHNull()
            Me(Me.tabletblWaterSamples.DEPTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWATERCOLORNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.WATERCOLORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWATERCOLORNull()
            Me(Me.tabletblWaterSamples.WATERCOLORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsALKALINITYNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.ALKALINITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetALKALINITYNull()
            Me(Me.tabletblWaterSamples.ALKALINITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsVOLUMEFILTEREDNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.VOLUMEFILTEREDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetVOLUMEFILTEREDNull()
            Me(Me.tabletblWaterSamples.VOLUMEFILTEREDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCOMMENTSNull()
            Me(Me.tabletblWaterSamples.COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSHIPPING_DATENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.SHIPPING_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSHIPPING_DATENull()
            Me(Me.tabletblWaterSamples.SHIPPING_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSHIPPING_INFONull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.SHIPPING_INFOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSHIPPING_INFONull()
            Me(Me.tabletblWaterSamples.SHIPPING_INFOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMethaneNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.MethaneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMethaneNull()
            Me(Me.tabletblWaterSamples.MethaneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDOC_COLLNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.DOC_COLLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDOC_COLLNull()
            Me(Me.tabletblWaterSamples.DOC_COLLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsO18_COLLNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.O18_COLLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetO18_COLLNull()
            Me(Me.tabletblWaterSamples.O18_COLLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSI_DOC_COLLNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.SI_DOC_COLLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSI_DOC_COLLNull()
            Me(Me.tabletblWaterSamples.SI_DOC_COLLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsIONS_COLLNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.IONS_COLLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetIONS_COLLNull()
            Me(Me.tabletblWaterSamples.IONS_COLLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsTN_TP_COLLNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.TN_TP_COLLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetTN_TP_COLLNull()
            Me(Me.tabletblWaterSamples.TN_TP_COLLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsCHLA_COLLNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.CHLA_COLLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetCHLA_COLLNull()
            Me(Me.tabletblWaterSamples.CHLA_COLLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsNOTESNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.NOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetNOTESNull()
            Me(Me.tabletblWaterSamples.NOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDISTFROMSHORENull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.DISTFROMSHOREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDISTFROMSHORENull()
            Me(Me.tabletblWaterSamples.DISTFROMSHOREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.RecordInsertedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedDateNull()
            Me(Me.tabletblWaterSamples.RecordInsertedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordInsertedByNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.RecordInsertedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordInsertedByNull()
            Me(Me.tabletblWaterSamples.RecordInsertedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.RecordUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedDateNull()
            Me(Me.tabletblWaterSamples.RecordUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsRecordUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.RecordUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetRecordUpdatedByNull()
            Me(Me.tabletblWaterSamples.RecordUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Isrow_timestampNull() As Boolean
            Return Me.IsNull(Me.tabletblWaterSamples.row_timestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Setrow_timestampNull()
            Me(Me.tabletblWaterSamples.row_timestampColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblChlorophyllRows() As tblChlorophyllRow()
            If (Me.Table.ChildRelations("FK_tblChlorophyll_tblWaterSamples") Is Nothing) Then
                Return New tblChlorophyllRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblChlorophyll_tblWaterSamples")),tblChlorophyllRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblWaterChemistryRows() As tblWaterChemistryRow()
            If (Me.Table.ChildRelations("FK_tblWaterChemistry_tblWaterSamples") Is Nothing) Then
                Return New tblWaterChemistryRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblWaterChemistry_tblWaterSamples")),tblWaterChemistryRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GettblWaterProfilesRows() As tblWaterProfilesRow()
            If (Me.Table.ChildRelations("FK_tblWaterProfiles_tblWaterSamples") Is Nothing) Then
                Return New tblWaterProfilesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblWaterProfiles_tblWaterSamples")),tblWaterProfilesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tbl_ContinuousTLLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbl_ContinuousTLLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tbl_ContinuousTLLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tbl_ContinuousTLLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tbl_ContinuousWLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbl_ContinuousWLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tbl_ContinuousWLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tbl_ContinuousWLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tbl_ContinuousYSIRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbl_ContinuousYSIRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tbl_ContinuousYSIRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tbl_ContinuousYSIRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblChlorophyllRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblChlorophyllRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblChlorophyllRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblChlorophyllRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblContinuousDataDeploymentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblContinuousDataDeploymentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblContinuousDataDeploymentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblContinuousDataDeploymentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblContinuousDataLoggersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblContinuousDataLoggersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblContinuousDataLoggersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblContinuousDataLoggersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblContinuousDataSitesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblContinuousDataSitesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblContinuousDataSitesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblContinuousDataSitesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblDBEditsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblDBEditsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblDBEditsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblDBEditsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblDBIssuesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblDBIssuesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblDBIssuesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblDBIssuesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblEventsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblEventsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblEventsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblEventsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblFrogMonitorsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblFrogMonitorsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblFrogMonitorsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblFrogMonitorsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblInvertebratesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblInvertebratesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblInvertebratesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblInvertebratesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblInvertebrateSamplesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblInvertebrateSamplesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblInvertebrateSamplesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblInvertebrateSamplesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblLoonsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblLoonsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblLoonsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblLoonsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblMonumentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblMonumentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblMonumentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblMonumentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblPhotosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblPhotosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblPhotosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblPhotosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblPondDepthsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblPondDepthsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblPondDepthsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblPondDepthsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblPondsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblPondsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblPondsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblPondsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblTransQuadratsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblTransQuadratsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblTransQuadratsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblTransQuadratsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblTransSpeciesPointInterceptsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblTransSpeciesPointInterceptsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblTransSpeciesPointInterceptsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblTransSpeciesPointInterceptsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblUSGSLabDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblUSGSLabDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblUSGSLabDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblUSGSLabDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblVegProfilesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblVegProfilesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblVegProfilesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblVegProfilesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblVegTransectsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblVegTransectsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblVegTransectsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblVegTransectsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblWaterChemistryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblWaterChemistryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblWaterChemistryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblWaterChemistryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblWaterProfilesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblWaterProfilesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblWaterProfilesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblWaterProfilesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class tblWaterSamplesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblWaterSamplesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As tblWaterSamplesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As tblWaterSamplesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace AK_ShallowLakesDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbl_ContinuousTLLTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbl_ContinuousTLL"
            tableMapping.ColumnMappings.Add("Filename", "Filename")
            tableMapping.ColumnMappings.Add("LogNum", "LogNum")
            tableMapping.ColumnMappings.Add("DateTime", "DateTime")
            tableMapping.ColumnMappings.Add("Temp_C", "Temp_C")
            tableMapping.ColumnMappings.Add("Intensity_Lux", "Intensity_Lux")
            tableMapping.ColumnMappings.Add("Batt_V", "Batt_V")
            tableMapping.ColumnMappings.Add("SiteName", "SiteName")
            tableMapping.ColumnMappings.Add("DateTimeDeployed", "DateTimeDeployed")
            tableMapping.ColumnMappings.Add("Exclude", "Exclude")
            tableMapping.ColumnMappings.Add("ExclusionReason", "ExclusionReason")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tbl_ContinuousTLL] WHERE (([Filename] = @Original_Filename) AN"& _ 
                "D ([DateTime] = @Original_DateTime) AND ([SiteName] = @Original_SiteName) AND (["& _ 
                "DateTimeDeployed] = @Original_DateTimeDeployed) AND ([row_timestamp] = @Original"& _ 
                "_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tbl_ContinuousTLL] ([Filename], [LogNum], [DateTime], [Temp_C]"& _ 
                ", [Intensity_Lux], [Batt_V], [SiteName], [DateTimeDeployed], [Exclude], [Exclusi"& _ 
                "onReason], [Comments], [RecordInsertedDate], [RecordInsertedBy], [RecordUpdatedD"& _ 
                "ate], [RecordUpdatedBy]) VALUES (@Filename, @LogNum, @DateTime, @Temp_C, @Intens"& _ 
                "ity_Lux, @Batt_V, @SiteName, @DateTimeDeployed, @Exclude, @ExclusionReason, @Com"& _ 
                "ments, @RecordInsertedDate, @RecordInsertedBy, @RecordUpdatedDate, @RecordUpdate"& _ 
                "dBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Filename, LogNum, DateTime, Temp_C, Intensity_Lux, Batt_V, SiteNam"& _ 
                "e, DateTimeDeployed, Exclude, ExclusionReason, Comments, RecordInsertedDate, Rec"& _ 
                "ordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM tbl_Contin"& _ 
                "uousTLL WHERE (DateTime = @DateTime) AND (DateTimeDeployed = @DateTimeDeployed) "& _ 
                "AND (Filename = @Filename) AND (SiteName = @SiteName)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LogNum", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LogNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Temp_C", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "Temp_C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Intensity_Lux", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "Intensity_Lux", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Batt_V", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Batt_V", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Exclude", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exclude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExclusionReason", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExclusionReason", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comments", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tbl_ContinuousTLL] SET [Filename] = @Filename, [LogNum] = @LogNum, "& _ 
                "[DateTime] = @DateTime, [Temp_C] = @Temp_C, [Intensity_Lux] = @Intensity_Lux, [B"& _ 
                "att_V] = @Batt_V, [SiteName] = @SiteName, [DateTimeDeployed] = @DateTimeDeployed"& _ 
                ", [Exclude] = @Exclude, [ExclusionReason] = @ExclusionReason, [Comments] = @Comm"& _ 
                "ents, [RecordInsertedDate] = @RecordInsertedDate, [RecordInsertedBy] = @RecordIn"& _ 
                "sertedBy, [RecordUpdatedDate] = @RecordUpdatedDate, [RecordUpdatedBy] = @RecordU"& _ 
                "pdatedBy WHERE (([Filename] = @Original_Filename) AND ([DateTime] = @Original_Da"& _ 
                "teTime) AND ([SiteName] = @Original_SiteName) AND ([DateTimeDeployed] = @Origina"& _ 
                "l_DateTimeDeployed) AND ([row_timestamp] = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Fi"& _ 
                "lename, LogNum, DateTime, Temp_C, Intensity_Lux, Batt_V, SiteName, DateTimeDeplo"& _ 
                "yed, Exclude, ExclusionReason, Comments, RecordInsertedDate, RecordInsertedBy, R"& _ 
                "ecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM tbl_ContinuousTLL WHERE (D"& _ 
                "ateTime = @DateTime) AND (DateTimeDeployed = @DateTimeDeployed) AND (Filename = "& _ 
                "@Filename) AND (SiteName = @SiteName)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LogNum", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LogNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Temp_C", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "Temp_C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Intensity_Lux", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "Intensity_Lux", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Batt_V", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Batt_V", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Exclude", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exclude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExclusionReason", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExclusionReason", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comments", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Filename, LogNum, DateTime, Temp_C, Intensity_Lux, Batt_V, SiteName, DateT"& _ 
                "imeDeployed, Exclude, ExclusionReason, Comments, RecordInsertedDate, RecordInser"& _ 
                "tedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM dbo.tbl_Continuous"& _ 
                "TLL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tbl_ContinuousTLLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tbl_ContinuousTLLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tbl_ContinuousTLLDataTable = New AK_ShallowLakesDataSet.tbl_ContinuousTLLDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tbl_ContinuousTLLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tbl_ContinuousTLL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Filename As String, ByVal Original_DateTime As Date, ByVal Original_SiteName As String, ByVal Original_DateTimeDeployed As Date, ByVal Original_row_timestamp() As Byte) As Integer
            If (Original_Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Filename")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Filename,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DateTime,Date)
            If (Original_SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SiteName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SiteName,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DateTimeDeployed,Date)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Filename As String, ByVal LogNum As String, ByVal DateTime As Date, ByVal Temp_C As Global.System.Nullable(Of Decimal), ByVal Intensity_Lux As Global.System.Nullable(Of Decimal), ByVal Batt_V As Global.System.Nullable(Of Decimal), ByVal SiteName As String, ByVal DateTimeDeployed As Date, ByVal Exclude As Boolean, ByVal ExclusionReason As String, ByVal Comments As String, ByVal RecordInsertedDate As Global.System.Nullable(Of Date), ByVal RecordInsertedBy As String, ByVal RecordUpdatedDate As Global.System.Nullable(Of Date), ByVal RecordUpdatedBy As String) As Integer
            If (Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Filename")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Filename,String)
            End If
            If (LogNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(LogNum,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(DateTime,Date)
            If (Temp_C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Temp_C.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Intensity_Lux.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Intensity_Lux.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Batt_V.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Batt_V.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SiteName")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SiteName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(DateTimeDeployed,Date)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Exclude,Boolean)
            If (ExclusionReason Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ExclusionReason,String)
            End If
            If (Comments Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Comments,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Filename As String,  _
                    ByVal LogNum As String,  _
                    ByVal DateTime As Date,  _
                    ByVal Temp_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Intensity_Lux As Global.System.Nullable(Of Decimal),  _
                    ByVal Batt_V As Global.System.Nullable(Of Decimal),  _
                    ByVal SiteName As String,  _
                    ByVal DateTimeDeployed As Date,  _
                    ByVal Exclude As Boolean,  _
                    ByVal ExclusionReason As String,  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_Filename As String,  _
                    ByVal Original_DateTime As Date,  _
                    ByVal Original_SiteName As String,  _
                    ByVal Original_DateTimeDeployed As Date,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            If (Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Filename")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Filename,String)
            End If
            If (LogNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(LogNum,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DateTime,Date)
            If (Temp_C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Temp_C.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Intensity_Lux.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Intensity_Lux.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Batt_V.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Batt_V.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SiteName")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SiteName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(DateTimeDeployed,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Exclude,Boolean)
            If (ExclusionReason Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ExclusionReason,String)
            End If
            If (Comments Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Comments,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(RecordUpdatedBy,String)
            End If
            If (Original_Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Filename")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Filename,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_DateTime,Date)
            If (Original_SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SiteName")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_SiteName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_DateTimeDeployed,Date)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LogNum As String,  _
                    ByVal Temp_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Intensity_Lux As Global.System.Nullable(Of Decimal),  _
                    ByVal Batt_V As Global.System.Nullable(Of Decimal),  _
                    ByVal Exclude As Boolean,  _
                    ByVal ExclusionReason As String,  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_Filename As String,  _
                    ByVal Original_DateTime As Date,  _
                    ByVal Original_SiteName As String,  _
                    ByVal Original_DateTimeDeployed As Date,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_Filename, LogNum, Original_DateTime, Temp_C, Intensity_Lux, Batt_V, Original_SiteName, Original_DateTimeDeployed, Exclude, ExclusionReason, Comments, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_Filename, Original_DateTime, Original_SiteName, Original_DateTimeDeployed, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbl_ContinuousWLTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbl_ContinuousWL"
            tableMapping.ColumnMappings.Add("Filename", "Filename")
            tableMapping.ColumnMappings.Add("LogNum", "LogNum")
            tableMapping.ColumnMappings.Add("DateTime", "DateTime")
            tableMapping.ColumnMappings.Add("AbsPres_kPa", "AbsPres_kPa")
            tableMapping.ColumnMappings.Add("Temp_C", "Temp_C")
            tableMapping.ColumnMappings.Add("Batt_V", "Batt_V")
            tableMapping.ColumnMappings.Add("AbsPresBarom_kPa", "AbsPresBarom_kPa")
            tableMapping.ColumnMappings.Add("SensorDepth", "SensorDepth")
            tableMapping.ColumnMappings.Add("SiteName", "SiteName")
            tableMapping.ColumnMappings.Add("DateTimeDeployed", "DateTimeDeployed")
            tableMapping.ColumnMappings.Add("Exclude", "Exclude")
            tableMapping.ColumnMappings.Add("ExclusionReason", "ExclusionReason")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tbl_ContinuousWL] WHERE (([Filename] = @Original_Filename) AND"& _ 
                " ([DateTime] = @Original_DateTime) AND ([SiteName] = @Original_SiteName) AND ([D"& _ 
                "ateTimeDeployed] = @Original_DateTimeDeployed) AND ([row_timestamp] = @Original_"& _ 
                "row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tbl_ContinuousWL] ([Filename], [LogNum], [DateTime], [AbsPres_"& _ 
                "kPa], [Temp_C], [Batt_V], [AbsPresBarom_kPa], [SensorDepth], [SiteName], [DateTi"& _ 
                "meDeployed], [Exclude], [ExclusionReason], [Comments], [RecordInsertedDate], [Re"& _ 
                "cordInsertedBy], [RecordUpdatedDate], [RecordUpdatedBy]) VALUES (@Filename, @Log"& _ 
                "Num, @DateTime, @AbsPres_kPa, @Temp_C, @Batt_V, @AbsPresBarom_kPa, @SensorDepth,"& _ 
                " @SiteName, @DateTimeDeployed, @Exclude, @ExclusionReason, @Comments, @RecordIns"& _ 
                "ertedDate, @RecordInsertedBy, @RecordUpdatedDate, @RecordUpdatedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Fil"& _ 
                "ename, LogNum, DateTime, AbsPres_kPa, Temp_C, Batt_V, AbsPresBarom_kPa, SensorDe"& _ 
                "pth, SiteName, DateTimeDeployed, Exclude, ExclusionReason, Comments, RecordInser"& _ 
                "tedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FRO"& _ 
                "M tbl_ContinuousWL WHERE (DateTime = @DateTime) AND (DateTimeDeployed = @DateTim"& _ 
                "eDeployed) AND (Filename = @Filename) AND (SiteName = @SiteName)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LogNum", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LogNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AbsPres_kPa", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "AbsPres_kPa", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Temp_C", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "Temp_C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Batt_V", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Batt_V", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AbsPresBarom_kPa", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "AbsPresBarom_kPa", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SensorDepth", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "SensorDepth", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Exclude", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exclude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExclusionReason", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExclusionReason", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comments", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tbl_ContinuousWL] SET [Filename] = @Filename, [LogNum] = @LogNum, ["& _ 
                "DateTime] = @DateTime, [AbsPres_kPa] = @AbsPres_kPa, [Temp_C] = @Temp_C, [Batt_V"& _ 
                "] = @Batt_V, [AbsPresBarom_kPa] = @AbsPresBarom_kPa, [SensorDepth] = @SensorDept"& _ 
                "h, [SiteName] = @SiteName, [DateTimeDeployed] = @DateTimeDeployed, [Exclude] = @"& _ 
                "Exclude, [ExclusionReason] = @ExclusionReason, [Comments] = @Comments, [RecordIn"& _ 
                "sertedDate] = @RecordInsertedDate, [RecordInsertedBy] = @RecordInsertedBy, [Reco"& _ 
                "rdUpdatedDate] = @RecordUpdatedDate, [RecordUpdatedBy] = @RecordUpdatedBy WHERE "& _ 
                "(([Filename] = @Original_Filename) AND ([DateTime] = @Original_DateTime) AND ([S"& _ 
                "iteName] = @Original_SiteName) AND ([DateTimeDeployed] = @Original_DateTimeDeplo"& _ 
                "yed) AND ([row_timestamp] = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Filename, LogNum,"& _ 
                " DateTime, AbsPres_kPa, Temp_C, Batt_V, AbsPresBarom_kPa, SensorDepth, SiteName,"& _ 
                " DateTimeDeployed, Exclude, ExclusionReason, Comments, RecordInsertedDate, Recor"& _ 
                "dInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM tbl_Continuo"& _ 
                "usWL WHERE (DateTime = @DateTime) AND (DateTimeDeployed = @DateTimeDeployed) AND"& _ 
                " (Filename = @Filename) AND (SiteName = @SiteName)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LogNum", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LogNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AbsPres_kPa", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "AbsPres_kPa", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Temp_C", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "Temp_C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Batt_V", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Batt_V", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AbsPresBarom_kPa", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "AbsPresBarom_kPa", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SensorDepth", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 3, "SensorDepth", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Exclude", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exclude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExclusionReason", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExclusionReason", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comments", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Filename, LogNum, DateTime, AbsPres_kPa, Temp_C, Batt_V, AbsPresBarom_kPa,"& _ 
                " SensorDepth, SiteName, DateTimeDeployed, Exclude, ExclusionReason, Comments, Re"& _ 
                "cordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_time"& _ 
                "stamp FROM dbo.tbl_ContinuousWL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tbl_ContinuousWLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tbl_ContinuousWLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tbl_ContinuousWLDataTable = New AK_ShallowLakesDataSet.tbl_ContinuousWLDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tbl_ContinuousWLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tbl_ContinuousWL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Filename As String, ByVal Original_DateTime As Date, ByVal Original_SiteName As String, ByVal Original_DateTimeDeployed As Date, ByVal Original_row_timestamp() As Byte) As Integer
            If (Original_Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Filename")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Filename,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DateTime,Date)
            If (Original_SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SiteName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SiteName,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DateTimeDeployed,Date)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Filename As String,  _
                    ByVal LogNum As String,  _
                    ByVal DateTime As Date,  _
                    ByVal AbsPres_kPa As Global.System.Nullable(Of Decimal),  _
                    ByVal Temp_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Batt_V As Global.System.Nullable(Of Decimal),  _
                    ByVal AbsPresBarom_kPa As Global.System.Nullable(Of Decimal),  _
                    ByVal SensorDepth As Global.System.Nullable(Of Decimal),  _
                    ByVal SiteName As String,  _
                    ByVal DateTimeDeployed As Date,  _
                    ByVal Exclude As Boolean,  _
                    ByVal ExclusionReason As String,  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String) As Integer
            If (Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Filename")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Filename,String)
            End If
            If (LogNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(LogNum,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(DateTime,Date)
            If (AbsPres_kPa.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(AbsPres_kPa.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Temp_C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Temp_C.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Batt_V.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Batt_V.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (AbsPresBarom_kPa.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(AbsPresBarom_kPa.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (SensorDepth.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SensorDepth.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SiteName")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SiteName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(DateTimeDeployed,Date)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(Exclude,Boolean)
            If (ExclusionReason Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ExclusionReason,String)
            End If
            If (Comments Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Comments,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Filename As String,  _
                    ByVal LogNum As String,  _
                    ByVal DateTime As Date,  _
                    ByVal AbsPres_kPa As Global.System.Nullable(Of Decimal),  _
                    ByVal Temp_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Batt_V As Global.System.Nullable(Of Decimal),  _
                    ByVal AbsPresBarom_kPa As Global.System.Nullable(Of Decimal),  _
                    ByVal SensorDepth As Global.System.Nullable(Of Decimal),  _
                    ByVal SiteName As String,  _
                    ByVal DateTimeDeployed As Date,  _
                    ByVal Exclude As Boolean,  _
                    ByVal ExclusionReason As String,  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_Filename As String,  _
                    ByVal Original_DateTime As Date,  _
                    ByVal Original_SiteName As String,  _
                    ByVal Original_DateTimeDeployed As Date,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            If (Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Filename")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Filename,String)
            End If
            If (LogNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(LogNum,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DateTime,Date)
            If (AbsPres_kPa.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(AbsPres_kPa.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Temp_C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Temp_C.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Batt_V.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Batt_V.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (AbsPresBarom_kPa.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(AbsPresBarom_kPa.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (SensorDepth.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SensorDepth.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SiteName")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SiteName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(DateTimeDeployed,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Exclude,Boolean)
            If (ExclusionReason Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ExclusionReason,String)
            End If
            If (Comments Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Comments,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(RecordUpdatedBy,String)
            End If
            If (Original_Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Filename")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Filename,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_DateTime,Date)
            If (Original_SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SiteName")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_SiteName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_DateTimeDeployed,Date)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LogNum As String,  _
                    ByVal AbsPres_kPa As Global.System.Nullable(Of Decimal),  _
                    ByVal Temp_C As Global.System.Nullable(Of Decimal),  _
                    ByVal Batt_V As Global.System.Nullable(Of Decimal),  _
                    ByVal AbsPresBarom_kPa As Global.System.Nullable(Of Decimal),  _
                    ByVal SensorDepth As Global.System.Nullable(Of Decimal),  _
                    ByVal Exclude As Boolean,  _
                    ByVal ExclusionReason As String,  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_Filename As String,  _
                    ByVal Original_DateTime As Date,  _
                    ByVal Original_SiteName As String,  _
                    ByVal Original_DateTimeDeployed As Date,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_Filename, LogNum, Original_DateTime, AbsPres_kPa, Temp_C, Batt_V, AbsPresBarom_kPa, SensorDepth, Original_SiteName, Original_DateTimeDeployed, Exclude, ExclusionReason, Comments, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_Filename, Original_DateTime, Original_SiteName, Original_DateTimeDeployed, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbl_ContinuousYSITableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbl_ContinuousYSI"
            tableMapping.ColumnMappings.Add("SiteName", "SiteName")
            tableMapping.ColumnMappings.Add("DateTimeDeployed", "DateTimeDeployed")
            tableMapping.ColumnMappings.Add("Filename", "Filename")
            tableMapping.ColumnMappings.Add("DateTime", "DateTime")
            tableMapping.ColumnMappings.Add("Temp_C", "Temp_C")
            tableMapping.ColumnMappings.Add("SpCond_uScm", "SpCond_uScm")
            tableMapping.ColumnMappings.Add("pH", "pH")
            tableMapping.ColumnMappings.Add("pHmV", "pHmV")
            tableMapping.ColumnMappings.Add("DOpct", "DOpct")
            tableMapping.ColumnMappings.Add("DO_mgL", "DO_mgL")
            tableMapping.ColumnMappings.Add("DOchrg", "DOchrg")
            tableMapping.ColumnMappings.Add("ODOpct", "ODOpct")
            tableMapping.ColumnMappings.Add("ODO_mgL", "ODO_mgL")
            tableMapping.ColumnMappings.Add("Turbidity_NTU", "Turbidity_NTU")
            tableMapping.ColumnMappings.Add("ORP_mV", "ORP_mV")
            tableMapping.ColumnMappings.Add("Battery_V", "Battery_V")
            tableMapping.ColumnMappings.Add("Exclude", "Exclude")
            tableMapping.ColumnMappings.Add("ExclusionReason", "ExclusionReason")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tbl_ContinuousYSI] WHERE (([SiteName] = @Original_SiteName) AN"& _ 
                "D ([DateTimeDeployed] = @Original_DateTimeDeployed) AND ([Filename] = @Original_"& _ 
                "Filename) AND ([DateTime] = @Original_DateTime) AND ([row_timestamp] = @Original"& _ 
                "_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tbl_ContinuousYSI] ([SiteName], [DateTimeDeployed], [Filename]"& _ 
                ", [DateTime], [Temp_C], [SpCond_uScm], [pH], [pHmV], [DOpct], [DO_mgL], [DOchrg]"& _ 
                ", [ODOpct], [ODO_mgL], [Turbidity_NTU], [ORP_mV], [Battery_V], [Exclude], [Exclu"& _ 
                "sionReason], [Comments], [RecordInsertedDate], [RecordInsertedBy], [RecordUpdate"& _ 
                "dDate], [RecordUpdatedBy]) VALUES (@SiteName, @DateTimeDeployed, @Filename, @Dat"& _ 
                "eTime, @Temp_C, @SpCond_uScm, @pH, @pHmV, @DOpct, @DO_mgL, @DOchrg, @ODOpct, @OD"& _ 
                "O_mgL, @Turbidity_NTU, @ORP_mV, @Battery_V, @Exclude, @ExclusionReason, @Comment"& _ 
                "s, @RecordInsertedDate, @RecordInsertedBy, @RecordUpdatedDate, @RecordUpdatedBy)"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SiteName, DateTimeDeployed, Filename, DateTime, Temp_C, SpCond_uScm, p"& _ 
                "H, pHmV, DOpct, DO_mgL, DOchrg, ODOpct, ODO_mgL, Turbidity_NTU, ORP_mV, Battery_"& _ 
                "V, Exclude, ExclusionReason, Comments, RecordInsertedDate, RecordInsertedBy, Rec"& _ 
                "ordUpdatedDate, RecordUpdatedBy, row_timestamp FROM tbl_ContinuousYSI WHERE (Dat"& _ 
                "eTime = @DateTime) AND (DateTimeDeployed = @DateTimeDeployed) AND (Filename = @F"& _ 
                "ilename) AND (SiteName = @SiteName)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Temp_C", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Temp_C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpCond_uScm", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "SpCond_uScm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pH", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "pH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pHmV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "pHmV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOpct", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "DOpct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DO_mgL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DO_mgL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOchrg", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "DOchrg", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ODOpct", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "ODOpct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ODO_mgL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ODO_mgL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Turbidity_NTU", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "Turbidity_NTU", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORP_mV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "ORP_mV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Battery_V", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "Battery_V", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Exclude", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exclude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExclusionReason", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExclusionReason", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comments", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tbl_ContinuousYSI] SET [SiteName] = @SiteName, [DateTimeDeployed] ="& _ 
                " @DateTimeDeployed, [Filename] = @Filename, [DateTime] = @DateTime, [Temp_C] = @"& _ 
                "Temp_C, [SpCond_uScm] = @SpCond_uScm, [pH] = @pH, [pHmV] = @pHmV, [DOpct] = @DOp"& _ 
                "ct, [DO_mgL] = @DO_mgL, [DOchrg] = @DOchrg, [ODOpct] = @ODOpct, [ODO_mgL] = @ODO"& _ 
                "_mgL, [Turbidity_NTU] = @Turbidity_NTU, [ORP_mV] = @ORP_mV, [Battery_V] = @Batte"& _ 
                "ry_V, [Exclude] = @Exclude, [ExclusionReason] = @ExclusionReason, [Comments] = @"& _ 
                "Comments, [RecordInsertedDate] = @RecordInsertedDate, [RecordInsertedBy] = @Reco"& _ 
                "rdInsertedBy, [RecordUpdatedDate] = @RecordUpdatedDate, [RecordUpdatedBy] = @Rec"& _ 
                "ordUpdatedBy WHERE (([SiteName] = @Original_SiteName) AND ([DateTimeDeployed] = "& _ 
                "@Original_DateTimeDeployed) AND ([Filename] = @Original_Filename) AND ([DateTime"& _ 
                "] = @Original_DateTime) AND ([row_timestamp] = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T SiteName, DateTimeDeployed, Filename, DateTime, Temp_C, SpCond_uScm, pH, pHmV,"& _ 
                " DOpct, DO_mgL, DOchrg, ODOpct, ODO_mgL, Turbidity_NTU, ORP_mV, Battery_V, Exclu"& _ 
                "de, ExclusionReason, Comments, RecordInsertedDate, RecordInsertedBy, RecordUpdat"& _ 
                "edDate, RecordUpdatedBy, row_timestamp FROM tbl_ContinuousYSI WHERE (DateTime = "& _ 
                "@DateTime) AND (DateTimeDeployed = @DateTimeDeployed) AND (Filename = @Filename)"& _ 
                " AND (SiteName = @SiteName)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Temp_C", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Temp_C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpCond_uScm", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "SpCond_uScm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pH", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "pH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pHmV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "pHmV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOpct", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "DOpct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DO_mgL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DO_mgL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOchrg", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "DOchrg", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ODOpct", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "ODOpct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ODO_mgL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "ODO_mgL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Turbidity_NTU", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "Turbidity_NTU", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORP_mV", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "ORP_mV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Battery_V", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "Battery_V", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Exclude", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Exclude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExclusionReason", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ExclusionReason", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comments", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SiteName, DateTimeDeployed, Filename, DateTime, Temp_C, SpCond_uScm, pH, p"& _ 
                "HmV, DOpct, DO_mgL, DOchrg, ODOpct, ODO_mgL, Turbidity_NTU, ORP_mV, Battery_V, E"& _ 
                "xclude, ExclusionReason, Comments, RecordInsertedDate, RecordInsertedBy, RecordU"& _ 
                "pdatedDate, RecordUpdatedBy, row_timestamp FROM dbo.tbl_ContinuousYSI"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tbl_ContinuousYSIDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tbl_ContinuousYSIDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tbl_ContinuousYSIDataTable = New AK_ShallowLakesDataSet.tbl_ContinuousYSIDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tbl_ContinuousYSIDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tbl_ContinuousYSI")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SiteName As String, ByVal Original_DateTimeDeployed As Date, ByVal Original_Filename As String, ByVal Original_DateTime As Date, ByVal Original_row_timestamp() As Byte) As Integer
            If (Original_SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SiteName")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SiteName,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DateTimeDeployed,Date)
            If (Original_Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Filename")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Filename,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DateTime,Date)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal SiteName As String,  _
                    ByVal DateTimeDeployed As Date,  _
                    ByVal Filename As String,  _
                    ByVal DateTime As Date,  _
                    ByVal Temp_C As Global.System.Nullable(Of Decimal),  _
                    ByVal SpCond_uScm As Global.System.Nullable(Of Decimal),  _
                    ByVal pH As Global.System.Nullable(Of Decimal),  _
                    ByVal pHmV As Global.System.Nullable(Of Decimal),  _
                    ByVal DOpct As Global.System.Nullable(Of Decimal),  _
                    ByVal DO_mgL As Global.System.Nullable(Of Decimal),  _
                    ByVal DOchrg As Global.System.Nullable(Of Decimal),  _
                    ByVal ODOpct As Global.System.Nullable(Of Decimal),  _
                    ByVal ODO_mgL As Global.System.Nullable(Of Decimal),  _
                    ByVal Turbidity_NTU As Global.System.Nullable(Of Decimal),  _
                    ByVal ORP_mV As Global.System.Nullable(Of Decimal),  _
                    ByVal Battery_V As Global.System.Nullable(Of Decimal),  _
                    ByVal Exclude As Boolean,  _
                    ByVal ExclusionReason As String,  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String) As Integer
            If (SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SiteName")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SiteName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(DateTimeDeployed,Date)
            If (Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Filename")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Filename,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(DateTime,Date)
            If (Temp_C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Temp_C.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (SpCond_uScm.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SpCond_uScm.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (pH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(pH.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (pHmV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(pHmV.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (DOpct.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(DOpct.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (DO_mgL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(DO_mgL.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (DOchrg.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(DOchrg.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ODOpct.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ODOpct.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ODO_mgL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(ODO_mgL.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Turbidity_NTU.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Turbidity_NTU.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (ORP_mV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(ORP_mV.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Battery_V.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Battery_V.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(Exclude,Boolean)
            If (ExclusionReason Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(ExclusionReason,String)
            End If
            If (Comments Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Comments,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SiteName As String,  _
                    ByVal DateTimeDeployed As Date,  _
                    ByVal Filename As String,  _
                    ByVal DateTime As Date,  _
                    ByVal Temp_C As Global.System.Nullable(Of Decimal),  _
                    ByVal SpCond_uScm As Global.System.Nullable(Of Decimal),  _
                    ByVal pH As Global.System.Nullable(Of Decimal),  _
                    ByVal pHmV As Global.System.Nullable(Of Decimal),  _
                    ByVal DOpct As Global.System.Nullable(Of Decimal),  _
                    ByVal DO_mgL As Global.System.Nullable(Of Decimal),  _
                    ByVal DOchrg As Global.System.Nullable(Of Decimal),  _
                    ByVal ODOpct As Global.System.Nullable(Of Decimal),  _
                    ByVal ODO_mgL As Global.System.Nullable(Of Decimal),  _
                    ByVal Turbidity_NTU As Global.System.Nullable(Of Decimal),  _
                    ByVal ORP_mV As Global.System.Nullable(Of Decimal),  _
                    ByVal Battery_V As Global.System.Nullable(Of Decimal),  _
                    ByVal Exclude As Boolean,  _
                    ByVal ExclusionReason As String,  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_SiteName As String,  _
                    ByVal Original_DateTimeDeployed As Date,  _
                    ByVal Original_Filename As String,  _
                    ByVal Original_DateTime As Date,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            If (SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SiteName")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SiteName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DateTimeDeployed,Date)
            If (Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Filename")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Filename,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DateTime,Date)
            If (Temp_C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Temp_C.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (SpCond_uScm.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SpCond_uScm.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (pH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(pH.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (pHmV.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(pHmV.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (DOpct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(DOpct.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (DO_mgL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(DO_mgL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (DOchrg.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(DOchrg.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ODOpct.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ODOpct.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ODO_mgL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ODO_mgL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Turbidity_NTU.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Turbidity_NTU.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (ORP_mV.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ORP_mV.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Battery_V.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Battery_V.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Exclude,Boolean)
            If (ExclusionReason Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(ExclusionReason,String)
            End If
            If (Comments Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Comments,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(RecordUpdatedBy,String)
            End If
            If (Original_SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SiteName")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_SiteName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_DateTimeDeployed,Date)
            If (Original_Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Filename")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Filename,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_DateTime,Date)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Temp_C As Global.System.Nullable(Of Decimal),  _
                    ByVal SpCond_uScm As Global.System.Nullable(Of Decimal),  _
                    ByVal pH As Global.System.Nullable(Of Decimal),  _
                    ByVal pHmV As Global.System.Nullable(Of Decimal),  _
                    ByVal DOpct As Global.System.Nullable(Of Decimal),  _
                    ByVal DO_mgL As Global.System.Nullable(Of Decimal),  _
                    ByVal DOchrg As Global.System.Nullable(Of Decimal),  _
                    ByVal ODOpct As Global.System.Nullable(Of Decimal),  _
                    ByVal ODO_mgL As Global.System.Nullable(Of Decimal),  _
                    ByVal Turbidity_NTU As Global.System.Nullable(Of Decimal),  _
                    ByVal ORP_mV As Global.System.Nullable(Of Decimal),  _
                    ByVal Battery_V As Global.System.Nullable(Of Decimal),  _
                    ByVal Exclude As Boolean,  _
                    ByVal ExclusionReason As String,  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_SiteName As String,  _
                    ByVal Original_DateTimeDeployed As Date,  _
                    ByVal Original_Filename As String,  _
                    ByVal Original_DateTime As Date,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_SiteName, Original_DateTimeDeployed, Original_Filename, Original_DateTime, Temp_C, SpCond_uScm, pH, pHmV, DOpct, DO_mgL, DOchrg, ODOpct, ODO_mgL, Turbidity_NTU, ORP_mV, Battery_V, Exclude, ExclusionReason, Comments, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_SiteName, Original_DateTimeDeployed, Original_Filename, Original_DateTime, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblChlorophyllTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblChlorophyll"
            tableMapping.ColumnMappings.Add("ChlorophyllID", "ChlorophyllID")
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("SAMPLEDATE", "SAMPLEDATE")
            tableMapping.ColumnMappings.Add("SAMPLENUMBER", "SAMPLENUMBER")
            tableMapping.ColumnMappings.Add("CHLA_LAB", "CHLA_LAB")
            tableMapping.ColumnMappings.Add("CHLA_METHOD", "CHLA_METHOD")
            tableMapping.ColumnMappings.Add("CHLA_LABSAMPLENUM", "CHLA_LABSAMPLENUM")
            tableMapping.ColumnMappings.Add("CHLA_CORRECTED_UG_L", "CHLA_CORRECTED_UG_L")
            tableMapping.ColumnMappings.Add("CHLA_Corrected_Notes", "CHLA_Corrected_Notes")
            tableMapping.ColumnMappings.Add("CHLA_MDL_YN", "CHLA_MDL_YN")
            tableMapping.ColumnMappings.Add("CHLA_MDL_LEVEL", "CHLA_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("CHLA_UNCORRECTED_UG_L", "CHLA_UNCORRECTED_UG_L")
            tableMapping.ColumnMappings.Add("CHLA_Uncorrected_Notes", "CHLA_Uncorrected_Notes")
            tableMapping.ColumnMappings.Add("REPEATED_CHLA_SAMPLE", "REPEATED_CHLA_SAMPLE")
            tableMapping.ColumnMappings.Add("COMMENTS", "COMMENTS")
            tableMapping.ColumnMappings.Add("SOURCE", "SOURCE")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblChlorophyll] WHERE (([ChlorophyllID] = @Original_Chlorophyl"& _ 
                "lID) AND ([PONDNAME] = @Original_PONDNAME) AND ([SAMPLEDATE] = @Original_SAMPLED"& _ 
                "ATE) AND ([SAMPLENUMBER] = @Original_SAMPLENUMBER) AND ([row_timestamp] = @Origi"& _ 
                "nal_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChlorophyllID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChlorophyllID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblChlorophyll] ([ChlorophyllID], [PONDNAME], [SAMPLEDATE], [S"& _ 
                "AMPLENUMBER], [CHLA_LAB], [CHLA_METHOD], [CHLA_LABSAMPLENUM], [CHLA_CORRECTED_UG"& _ 
                "_L], [CHLA_Corrected_Notes], [CHLA_MDL_YN], [CHLA_MDL_LEVEL], [CHLA_UNCORRECTED_"& _ 
                "UG_L], [CHLA_Uncorrected_Notes], [REPEATED_CHLA_SAMPLE], [COMMENTS], [SOURCE], ["& _ 
                "RecordInsertedDate], [RecordInsertedBy], [RecordUpdatedDate], [RecordUpdatedBy])"& _ 
                " VALUES (@ChlorophyllID, @PONDNAME, @SAMPLEDATE, @SAMPLENUMBER, @CHLA_LAB, @CHLA"& _ 
                "_METHOD, @CHLA_LABSAMPLENUM, @CHLA_CORRECTED_UG_L, @CHLA_Corrected_Notes, @CHLA_"& _ 
                "MDL_YN, @CHLA_MDL_LEVEL, @CHLA_UNCORRECTED_UG_L, @CHLA_Uncorrected_Notes, @REPEA"& _ 
                "TED_CHLA_SAMPLE, @COMMENTS, @SOURCE, @RecordInsertedDate, @RecordInsertedBy, @Re"& _ 
                "cordUpdatedDate, @RecordUpdatedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ChlorophyllID, PONDNAME, SAMPLEDATE,"& _ 
                " SAMPLENUMBER, CHLA_LAB, CHLA_METHOD, CHLA_LABSAMPLENUM, CHLA_CORRECTED_UG_L, CH"& _ 
                "LA_Corrected_Notes, CHLA_MDL_YN, CHLA_MDL_LEVEL, CHLA_UNCORRECTED_UG_L, CHLA_Unc"& _ 
                "orrected_Notes, REPEATED_CHLA_SAMPLE, COMMENTS, SOURCE, RecordInsertedDate, Reco"& _ 
                "rdInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM tblChloroph"& _ 
                "yll WHERE (ChlorophyllID = @ChlorophyllID) AND (PONDNAME = @PONDNAME) AND (SAMPL"& _ 
                "EDATE = @SAMPLEDATE) AND (SAMPLENUMBER = @SAMPLENUMBER)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChlorophyllID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChlorophyllID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_LAB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_LAB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_METHOD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_METHOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_LABSAMPLENUM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_LABSAMPLENUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_CORRECTED_UG_L", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CHLA_CORRECTED_UG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_Corrected_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_Corrected_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_MDL_YN", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_MDL_YN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_UNCORRECTED_UG_L", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CHLA_UNCORRECTED_UG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_Uncorrected_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_Uncorrected_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REPEATED_CHLA_SAMPLE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEATED_CHLA_SAMPLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblChlorophyll] SET [ChlorophyllID] = @ChlorophyllID, [PONDNAME] = "& _ 
                "@PONDNAME, [SAMPLEDATE] = @SAMPLEDATE, [SAMPLENUMBER] = @SAMPLENUMBER, [CHLA_LAB"& _ 
                "] = @CHLA_LAB, [CHLA_METHOD] = @CHLA_METHOD, [CHLA_LABSAMPLENUM] = @CHLA_LABSAMP"& _ 
                "LENUM, [CHLA_CORRECTED_UG_L] = @CHLA_CORRECTED_UG_L, [CHLA_Corrected_Notes] = @C"& _ 
                "HLA_Corrected_Notes, [CHLA_MDL_YN] = @CHLA_MDL_YN, [CHLA_MDL_LEVEL] = @CHLA_MDL_"& _ 
                "LEVEL, [CHLA_UNCORRECTED_UG_L] = @CHLA_UNCORRECTED_UG_L, [CHLA_Uncorrected_Notes"& _ 
                "] = @CHLA_Uncorrected_Notes, [REPEATED_CHLA_SAMPLE] = @REPEATED_CHLA_SAMPLE, [CO"& _ 
                "MMENTS] = @COMMENTS, [SOURCE] = @SOURCE, [RecordInsertedDate] = @RecordInsertedD"& _ 
                "ate, [RecordInsertedBy] = @RecordInsertedBy, [RecordUpdatedDate] = @RecordUpdate"& _ 
                "dDate, [RecordUpdatedBy] = @RecordUpdatedBy WHERE (([ChlorophyllID] = @Original_"& _ 
                "ChlorophyllID) AND ([PONDNAME] = @Original_PONDNAME) AND ([SAMPLEDATE] = @Origin"& _ 
                "al_SAMPLEDATE) AND ([SAMPLENUMBER] = @Original_SAMPLENUMBER) AND ([row_timestamp"& _ 
                "] = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ChlorophyllID, PONDNAME, SAMPLEDATE, SAMP"& _ 
                "LENUMBER, CHLA_LAB, CHLA_METHOD, CHLA_LABSAMPLENUM, CHLA_CORRECTED_UG_L, CHLA_Co"& _ 
                "rrected_Notes, CHLA_MDL_YN, CHLA_MDL_LEVEL, CHLA_UNCORRECTED_UG_L, CHLA_Uncorrec"& _ 
                "ted_Notes, REPEATED_CHLA_SAMPLE, COMMENTS, SOURCE, RecordInsertedDate, RecordIns"& _ 
                "ertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM tblChlorophyll W"& _ 
                "HERE (ChlorophyllID = @ChlorophyllID) AND (PONDNAME = @PONDNAME) AND (SAMPLEDATE"& _ 
                " = @SAMPLEDATE) AND (SAMPLENUMBER = @SAMPLENUMBER)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChlorophyllID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChlorophyllID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_LAB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_LAB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_METHOD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_METHOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_LABSAMPLENUM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_LABSAMPLENUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_CORRECTED_UG_L", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CHLA_CORRECTED_UG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_Corrected_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_Corrected_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_MDL_YN", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_MDL_YN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_UNCORRECTED_UG_L", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CHLA_UNCORRECTED_UG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_Uncorrected_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_Uncorrected_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REPEATED_CHLA_SAMPLE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REPEATED_CHLA_SAMPLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChlorophyllID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChlorophyllID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ChlorophyllID, PONDNAME, SAMPLEDATE, SAMPLENUMBER, CHLA_LAB, CHLA_METHOD, "& _ 
                "CHLA_LABSAMPLENUM, CHLA_CORRECTED_UG_L, CHLA_Corrected_Notes, CHLA_MDL_YN, CHLA_"& _ 
                "MDL_LEVEL, CHLA_UNCORRECTED_UG_L, CHLA_Uncorrected_Notes, REPEATED_CHLA_SAMPLE, "& _ 
                "COMMENTS, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, Recor"& _ 
                "dUpdatedBy, row_timestamp FROM dbo.tblChlorophyll"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblChlorophyllDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblChlorophyllDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblChlorophyllDataTable = New AK_ShallowLakesDataSet.tblChlorophyllDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblChlorophyllDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblChlorophyll")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ChlorophyllID As System.Guid, ByVal Original_PONDNAME As String, ByVal Original_SAMPLEDATE As Date, ByVal Original_SAMPLENUMBER As String, ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ChlorophyllID,System.Guid)
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SAMPLEDATE,Date)
            If (Original_SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAMPLENUMBER")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SAMPLENUMBER,String)
            End If
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ChlorophyllID As System.Guid,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal CHLA_LAB As String,  _
                    ByVal CHLA_METHOD As String,  _
                    ByVal CHLA_LABSAMPLENUM As String,  _
                    ByVal CHLA_CORRECTED_UG_L As Global.System.Nullable(Of Decimal),  _
                    ByVal CHLA_Corrected_Notes As String,  _
                    ByVal CHLA_MDL_YN As Global.System.Nullable(Of Boolean),  _
                    ByVal CHLA_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal CHLA_UNCORRECTED_UG_L As Global.System.Nullable(Of Decimal),  _
                    ByVal CHLA_Uncorrected_Notes As String,  _
                    ByVal REPEATED_CHLA_SAMPLE As Global.System.Nullable(Of Boolean),  _
                    ByVal COMMENTS As String,  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ChlorophyllID,System.Guid)
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAMPLEDATE,Date)
            If (SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAMPLENUMBER")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SAMPLENUMBER,String)
            End If
            If (CHLA_LAB Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CHLA_LAB,String)
            End If
            If (CHLA_METHOD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CHLA_METHOD,String)
            End If
            If (CHLA_LABSAMPLENUM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CHLA_LABSAMPLENUM,String)
            End If
            If (CHLA_CORRECTED_UG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CHLA_CORRECTED_UG_L.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (CHLA_Corrected_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CHLA_Corrected_Notes,String)
            End If
            If (CHLA_MDL_YN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(CHLA_MDL_YN.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (CHLA_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(CHLA_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (CHLA_UNCORRECTED_UG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(CHLA_UNCORRECTED_UG_L.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CHLA_Uncorrected_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(CHLA_Uncorrected_Notes,String)
            End If
            If (REPEATED_CHLA_SAMPLE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(REPEATED_CHLA_SAMPLE.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(COMMENTS,String)
            End If
            If (SOURCE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(SOURCE,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ChlorophyllID As System.Guid,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal CHLA_LAB As String,  _
                    ByVal CHLA_METHOD As String,  _
                    ByVal CHLA_LABSAMPLENUM As String,  _
                    ByVal CHLA_CORRECTED_UG_L As Global.System.Nullable(Of Decimal),  _
                    ByVal CHLA_Corrected_Notes As String,  _
                    ByVal CHLA_MDL_YN As Global.System.Nullable(Of Boolean),  _
                    ByVal CHLA_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal CHLA_UNCORRECTED_UG_L As Global.System.Nullable(Of Decimal),  _
                    ByVal CHLA_Uncorrected_Notes As String,  _
                    ByVal REPEATED_CHLA_SAMPLE As Global.System.Nullable(Of Boolean),  _
                    ByVal COMMENTS As String,  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_ChlorophyllID As System.Guid,  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_SAMPLEDATE As Date,  _
                    ByVal Original_SAMPLENUMBER As String,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ChlorophyllID,System.Guid)
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAMPLEDATE,Date)
            If (SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAMPLENUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SAMPLENUMBER,String)
            End If
            If (CHLA_LAB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CHLA_LAB,String)
            End If
            If (CHLA_METHOD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CHLA_METHOD,String)
            End If
            If (CHLA_LABSAMPLENUM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CHLA_LABSAMPLENUM,String)
            End If
            If (CHLA_CORRECTED_UG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CHLA_CORRECTED_UG_L.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (CHLA_Corrected_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CHLA_Corrected_Notes,String)
            End If
            If (CHLA_MDL_YN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(CHLA_MDL_YN.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (CHLA_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(CHLA_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (CHLA_UNCORRECTED_UG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(CHLA_UNCORRECTED_UG_L.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CHLA_Uncorrected_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(CHLA_Uncorrected_Notes,String)
            End If
            If (REPEATED_CHLA_SAMPLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(REPEATED_CHLA_SAMPLE.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(COMMENTS,String)
            End If
            If (SOURCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(SOURCE,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(RecordUpdatedBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ChlorophyllID,System.Guid)
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_SAMPLEDATE,Date)
            If (Original_SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAMPLENUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_SAMPLENUMBER,String)
            End If
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CHLA_LAB As String,  _
                    ByVal CHLA_METHOD As String,  _
                    ByVal CHLA_LABSAMPLENUM As String,  _
                    ByVal CHLA_CORRECTED_UG_L As Global.System.Nullable(Of Decimal),  _
                    ByVal CHLA_Corrected_Notes As String,  _
                    ByVal CHLA_MDL_YN As Global.System.Nullable(Of Boolean),  _
                    ByVal CHLA_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal CHLA_UNCORRECTED_UG_L As Global.System.Nullable(Of Decimal),  _
                    ByVal CHLA_Uncorrected_Notes As String,  _
                    ByVal REPEATED_CHLA_SAMPLE As Global.System.Nullable(Of Boolean),  _
                    ByVal COMMENTS As String,  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_ChlorophyllID As System.Guid,  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_SAMPLEDATE As Date,  _
                    ByVal Original_SAMPLENUMBER As String,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_ChlorophyllID, Original_PONDNAME, Original_SAMPLEDATE, Original_SAMPLENUMBER, CHLA_LAB, CHLA_METHOD, CHLA_LABSAMPLENUM, CHLA_CORRECTED_UG_L, CHLA_Corrected_Notes, CHLA_MDL_YN, CHLA_MDL_LEVEL, CHLA_UNCORRECTED_UG_L, CHLA_Uncorrected_Notes, REPEATED_CHLA_SAMPLE, COMMENTS, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_ChlorophyllID, Original_PONDNAME, Original_SAMPLEDATE, Original_SAMPLENUMBER, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblContinuousDataDeploymentsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblContinuousDataDeployments"
            tableMapping.ColumnMappings.Add("SiteName", "SiteName")
            tableMapping.ColumnMappings.Add("DateDeployed", "DateDeployed")
            tableMapping.ColumnMappings.Add("TimeDeployed", "TimeDeployed")
            tableMapping.ColumnMappings.Add("DateRetrieved", "DateRetrieved")
            tableMapping.ColumnMappings.Add("TimeRetrieved", "TimeRetrieved")
            tableMapping.ColumnMappings.Add("DeploymentType", "DeploymentType")
            tableMapping.ColumnMappings.Add("DeployLatitude", "DeployLatitude")
            tableMapping.ColumnMappings.Add("DeployLongitude", "DeployLongitude")
            tableMapping.ColumnMappings.Add("DeploymentNotes", "DeploymentNotes")
            tableMapping.ColumnMappings.Add("RetrieveLatitude", "RetrieveLatitude")
            tableMapping.ColumnMappings.Add("RetrieveLongitude", "RetrieveLongitude")
            tableMapping.ColumnMappings.Add("RetrievalNotes", "RetrievalNotes")
            tableMapping.ColumnMappings.Add("DataProcessingNotes", "DataProcessingNotes")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblContinuousDataDeployments] WHERE (([SiteName] = @Original_S"& _ 
                "iteName) AND ([DateDeployed] = @Original_DateDeployed) AND ([row_timestamp] = @O"& _ 
                "riginal_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateDeployed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblContinuousDataDeployments] ([SiteName], [DateDeployed], [Ti"& _ 
                "meDeployed], [DateRetrieved], [TimeRetrieved], [DeploymentType], [DeployLatitude"& _ 
                "], [DeployLongitude], [DeploymentNotes], [RetrieveLatitude], [RetrieveLongitude]"& _ 
                ", [RetrievalNotes], [DataProcessingNotes], [RecordInsertedDate], [RecordInserted"& _ 
                "By], [RecordUpdatedDate], [RecordUpdatedBy]) VALUES (@SiteName, @DateDeployed, @"& _ 
                "TimeDeployed, @DateRetrieved, @TimeRetrieved, @DeploymentType, @DeployLatitude, "& _ 
                "@DeployLongitude, @DeploymentNotes, @RetrieveLatitude, @RetrieveLongitude, @Retr"& _ 
                "ievalNotes, @DataProcessingNotes, @RecordInsertedDate, @RecordInsertedBy, @Recor"& _ 
                "dUpdatedDate, @RecordUpdatedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SiteName, DateDeployed, TimeDeployed, D"& _ 
                "ateRetrieved, TimeRetrieved, DeploymentType, DeployLatitude, DeployLongitude, De"& _ 
                "ploymentNotes, RetrieveLatitude, RetrieveLongitude, RetrievalNotes, DataProcessi"& _ 
                "ngNotes, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedB"& _ 
                "y, row_timestamp FROM tblContinuousDataDeployments WHERE (DateDeployed = @DateDe"& _ 
                "ployed) AND (SiteName = @SiteName)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateDeployed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeDeployed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRetrieved", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRetrieved", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeRetrieved", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeRetrieved", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DeploymentType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeploymentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DeployLatitude", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeployLatitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DeployLongitude", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeployLongitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DeploymentNotes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeploymentNotes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RetrieveLatitude", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RetrieveLatitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RetrieveLongitude", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RetrieveLongitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RetrievalNotes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RetrievalNotes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DataProcessingNotes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DataProcessingNotes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblContinuousDataDeployments] SET [SiteName] = @SiteName, [DateDepl"& _ 
                "oyed] = @DateDeployed, [TimeDeployed] = @TimeDeployed, [DateRetrieved] = @DateRe"& _ 
                "trieved, [TimeRetrieved] = @TimeRetrieved, [DeploymentType] = @DeploymentType, ["& _ 
                "DeployLatitude] = @DeployLatitude, [DeployLongitude] = @DeployLongitude, [Deploy"& _ 
                "mentNotes] = @DeploymentNotes, [RetrieveLatitude] = @RetrieveLatitude, [Retrieve"& _ 
                "Longitude] = @RetrieveLongitude, [RetrievalNotes] = @RetrievalNotes, [DataProces"& _ 
                "singNotes] = @DataProcessingNotes, [RecordInsertedDate] = @RecordInsertedDate, ["& _ 
                "RecordInsertedBy] = @RecordInsertedBy, [RecordUpdatedDate] = @RecordUpdatedDate,"& _ 
                " [RecordUpdatedBy] = @RecordUpdatedBy WHERE (([SiteName] = @Original_SiteName) A"& _ 
                "ND ([DateDeployed] = @Original_DateDeployed) AND ([row_timestamp] = @Original_ro"& _ 
                "w_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SiteName, DateDeployed, TimeDeployed, DateRetrieved, Time"& _ 
                "Retrieved, DeploymentType, DeployLatitude, DeployLongitude, DeploymentNotes, Ret"& _ 
                "rieveLatitude, RetrieveLongitude, RetrievalNotes, DataProcessingNotes, RecordIns"& _ 
                "ertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp F"& _ 
                "ROM tblContinuousDataDeployments WHERE (DateDeployed = @DateDeployed) AND (SiteN"& _ 
                "ame = @SiteName)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateDeployed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeDeployed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateRetrieved", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateRetrieved", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeRetrieved", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeRetrieved", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DeploymentType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeploymentType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DeployLatitude", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeployLatitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DeployLongitude", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeployLongitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DeploymentNotes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeploymentNotes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RetrieveLatitude", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RetrieveLatitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RetrieveLongitude", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RetrieveLongitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RetrievalNotes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RetrievalNotes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DataProcessingNotes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DataProcessingNotes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateDeployed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SiteName, DateDeployed, TimeDeployed, DateRetrieved, TimeRetrieved, Deploy"& _ 
                "mentType, DeployLatitude, DeployLongitude, DeploymentNotes, RetrieveLatitude, Re"& _ 
                "trieveLongitude, RetrievalNotes, DataProcessingNotes, RecordInsertedDate, Record"& _ 
                "InsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM dbo.tblContin"& _ 
                "uousDataDeployments"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblContinuousDataDeploymentsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblContinuousDataDeploymentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblContinuousDataDeploymentsDataTable = New AK_ShallowLakesDataSet.tblContinuousDataDeploymentsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblContinuousDataDeploymentsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblContinuousDataDeployments")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SiteName As String, ByVal Original_DateDeployed As Date, ByVal Original_row_timestamp() As Byte) As Integer
            If (Original_SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SiteName")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SiteName,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DateDeployed,Date)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal SiteName As String,  _
                    ByVal DateDeployed As Date,  _
                    ByVal TimeDeployed As Global.System.Nullable(Of Date),  _
                    ByVal DateRetrieved As Global.System.Nullable(Of Date),  _
                    ByVal TimeRetrieved As Global.System.Nullable(Of Date),  _
                    ByVal DeploymentType As String,  _
                    ByVal DeployLatitude As Global.System.Nullable(Of Double),  _
                    ByVal DeployLongitude As Global.System.Nullable(Of Double),  _
                    ByVal DeploymentNotes As String,  _
                    ByVal RetrieveLatitude As Global.System.Nullable(Of Double),  _
                    ByVal RetrieveLongitude As Global.System.Nullable(Of Double),  _
                    ByVal RetrievalNotes As String,  _
                    ByVal DataProcessingNotes As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String) As Integer
            If (SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SiteName")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SiteName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(DateDeployed,Date)
            If (TimeDeployed.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TimeDeployed.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (DateRetrieved.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DateRetrieved.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TimeRetrieved.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TimeRetrieved.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DeploymentType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DeploymentType,String)
            End If
            If (DeployLatitude.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DeployLatitude.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DeployLongitude.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DeployLongitude.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (DeploymentNotes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(DeploymentNotes,String)
            End If
            If (RetrieveLatitude.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(RetrieveLatitude.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (RetrieveLongitude.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(RetrieveLongitude.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (RetrievalNotes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(RetrievalNotes,String)
            End If
            If (DataProcessingNotes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(DataProcessingNotes,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SiteName As String,  _
                    ByVal DateDeployed As Date,  _
                    ByVal TimeDeployed As Global.System.Nullable(Of Date),  _
                    ByVal DateRetrieved As Global.System.Nullable(Of Date),  _
                    ByVal TimeRetrieved As Global.System.Nullable(Of Date),  _
                    ByVal DeploymentType As String,  _
                    ByVal DeployLatitude As Global.System.Nullable(Of Double),  _
                    ByVal DeployLongitude As Global.System.Nullable(Of Double),  _
                    ByVal DeploymentNotes As String,  _
                    ByVal RetrieveLatitude As Global.System.Nullable(Of Double),  _
                    ByVal RetrieveLongitude As Global.System.Nullable(Of Double),  _
                    ByVal RetrievalNotes As String,  _
                    ByVal DataProcessingNotes As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_SiteName As String,  _
                    ByVal Original_DateDeployed As Date,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            If (SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SiteName")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SiteName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DateDeployed,Date)
            If (TimeDeployed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TimeDeployed.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (DateRetrieved.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DateRetrieved.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TimeRetrieved.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TimeRetrieved.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DeploymentType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DeploymentType,String)
            End If
            If (DeployLatitude.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DeployLatitude.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DeployLongitude.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(DeployLongitude.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (DeploymentNotes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(DeploymentNotes,String)
            End If
            If (RetrieveLatitude.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(RetrieveLatitude.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (RetrieveLongitude.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(RetrieveLongitude.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (RetrievalNotes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(RetrievalNotes,String)
            End If
            If (DataProcessingNotes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(DataProcessingNotes,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(RecordUpdatedBy,String)
            End If
            If (Original_SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SiteName")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_SiteName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_DateDeployed,Date)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TimeDeployed As Global.System.Nullable(Of Date),  _
                    ByVal DateRetrieved As Global.System.Nullable(Of Date),  _
                    ByVal TimeRetrieved As Global.System.Nullable(Of Date),  _
                    ByVal DeploymentType As String,  _
                    ByVal DeployLatitude As Global.System.Nullable(Of Double),  _
                    ByVal DeployLongitude As Global.System.Nullable(Of Double),  _
                    ByVal DeploymentNotes As String,  _
                    ByVal RetrieveLatitude As Global.System.Nullable(Of Double),  _
                    ByVal RetrieveLongitude As Global.System.Nullable(Of Double),  _
                    ByVal RetrievalNotes As String,  _
                    ByVal DataProcessingNotes As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_SiteName As String,  _
                    ByVal Original_DateDeployed As Date,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_SiteName, Original_DateDeployed, TimeDeployed, DateRetrieved, TimeRetrieved, DeploymentType, DeployLatitude, DeployLongitude, DeploymentNotes, RetrieveLatitude, RetrieveLongitude, RetrievalNotes, DataProcessingNotes, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_SiteName, Original_DateDeployed, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblContinuousDataLoggersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblContinuousDataLoggers"
            tableMapping.ColumnMappings.Add("SiteName", "SiteName")
            tableMapping.ColumnMappings.Add("DateTimeDeployed", "DateTimeDeployed")
            tableMapping.ColumnMappings.Add("SerialNumber", "SerialNumber")
            tableMapping.ColumnMappings.Add("LoggerType", "LoggerType")
            tableMapping.ColumnMappings.Add("LoggerModel", "LoggerModel")
            tableMapping.ColumnMappings.Add("PctBattConfig", "PctBattConfig")
            tableMapping.ColumnMappings.Add("PctBattDwnld", "PctBattDwnld")
            tableMapping.ColumnMappings.Add("LoggerName", "LoggerName")
            tableMapping.ColumnMappings.Add("Filename", "Filename")
            tableMapping.ColumnMappings.Add("DataProcessingNotes", "DataProcessingNotes")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblContinuousDataLoggers] WHERE (([SiteName] = @Original_SiteN"& _ 
                "ame) AND ([DateTimeDeployed] = @Original_DateTimeDeployed) AND ([Filename] = @Or"& _ 
                "iginal_Filename) AND ([row_timestamp] = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblContinuousDataLoggers] ([SiteName], [DateTimeDeployed], [Se"& _ 
                "rialNumber], [LoggerType], [LoggerModel], [PctBattConfig], [PctBattDwnld], [Logg"& _ 
                "erName], [Filename], [DataProcessingNotes], [RecordInsertedDate], [RecordInserte"& _ 
                "dBy], [RecordUpdatedDate], [RecordUpdatedBy]) VALUES (@SiteName, @DateTimeDeploy"& _ 
                "ed, @SerialNumber, @LoggerType, @LoggerModel, @PctBattConfig, @PctBattDwnld, @Lo"& _ 
                "ggerName, @Filename, @DataProcessingNotes, @RecordInsertedDate, @RecordInsertedB"& _ 
                "y, @RecordUpdatedDate, @RecordUpdatedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SiteName, DateTimeDeployed, Se"& _ 
                "rialNumber, LoggerType, LoggerModel, PctBattConfig, PctBattDwnld, LoggerName, Fi"& _ 
                "lename, DataProcessingNotes, RecordInsertedDate, RecordInsertedBy, RecordUpdated"& _ 
                "Date, RecordUpdatedBy, row_timestamp FROM tblContinuousDataLoggers WHERE (DateTi"& _ 
                "meDeployed = @DateTimeDeployed) AND (Filename = @Filename) AND (SiteName = @Site"& _ 
                "Name)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SerialNumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SerialNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoggerType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoggerType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoggerModel", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoggerModel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PctBattConfig", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PctBattConfig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PctBattDwnld", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PctBattDwnld", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoggerName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoggerName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DataProcessingNotes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DataProcessingNotes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblContinuousDataLoggers] SET [SiteName] = @SiteName, [DateTimeDepl"& _ 
                "oyed] = @DateTimeDeployed, [SerialNumber] = @SerialNumber, [LoggerType] = @Logge"& _ 
                "rType, [LoggerModel] = @LoggerModel, [PctBattConfig] = @PctBattConfig, [PctBattD"& _ 
                "wnld] = @PctBattDwnld, [LoggerName] = @LoggerName, [Filename] = @Filename, [Data"& _ 
                "ProcessingNotes] = @DataProcessingNotes, [RecordInsertedDate] = @RecordInsertedD"& _ 
                "ate, [RecordInsertedBy] = @RecordInsertedBy, [RecordUpdatedDate] = @RecordUpdate"& _ 
                "dDate, [RecordUpdatedBy] = @RecordUpdatedBy WHERE (([SiteName] = @Original_SiteN"& _ 
                "ame) AND ([DateTimeDeployed] = @Original_DateTimeDeployed) AND ([Filename] = @Or"& _ 
                "iginal_Filename) AND ([row_timestamp] = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SiteN"& _ 
                "ame, DateTimeDeployed, SerialNumber, LoggerType, LoggerModel, PctBattConfig, Pct"& _ 
                "BattDwnld, LoggerName, Filename, DataProcessingNotes, RecordInsertedDate, Record"& _ 
                "InsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM tblContinuous"& _ 
                "DataLoggers WHERE (DateTimeDeployed = @DateTimeDeployed) AND (Filename = @Filena"& _ 
                "me) AND (SiteName = @SiteName)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SerialNumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SerialNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoggerType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoggerType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoggerModel", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoggerModel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PctBattConfig", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PctBattConfig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PctBattDwnld", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PctBattDwnld", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoggerName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoggerName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DataProcessingNotes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DataProcessingNotes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTimeDeployed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTimeDeployed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Filename", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Filename", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SiteName, DateTimeDeployed, SerialNumber, LoggerType, LoggerModel, PctBatt"& _ 
                "Config, PctBattDwnld, LoggerName, Filename, DataProcessingNotes, RecordInsertedD"& _ 
                "ate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM db"& _ 
                "o.tblContinuousDataLoggers"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblContinuousDataLoggersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblContinuousDataLoggersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblContinuousDataLoggersDataTable = New AK_ShallowLakesDataSet.tblContinuousDataLoggersDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblContinuousDataLoggersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblContinuousDataLoggers")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SiteName As String, ByVal Original_DateTimeDeployed As Date, ByVal Original_Filename As String, ByVal Original_row_timestamp() As Byte) As Integer
            If (Original_SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SiteName")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SiteName,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DateTimeDeployed,Date)
            If (Original_Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Filename")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Filename,String)
            End If
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SiteName As String, ByVal DateTimeDeployed As Date, ByVal SerialNumber As String, ByVal LoggerType As String, ByVal LoggerModel As String, ByVal PctBattConfig As Global.System.Nullable(Of Double), ByVal PctBattDwnld As Global.System.Nullable(Of Double), ByVal LoggerName As String, ByVal Filename As String, ByVal DataProcessingNotes As String, ByVal RecordInsertedDate As Global.System.Nullable(Of Date), ByVal RecordInsertedBy As String, ByVal RecordUpdatedDate As Global.System.Nullable(Of Date), ByVal RecordUpdatedBy As String) As Integer
            If (SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SiteName")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SiteName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(DateTimeDeployed,Date)
            If (SerialNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SerialNumber")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SerialNumber,String)
            End If
            If (LoggerType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LoggerType,String)
            End If
            If (LoggerModel Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(LoggerModel,String)
            End If
            If (PctBattConfig.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PctBattConfig.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PctBattDwnld.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PctBattDwnld.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (LoggerName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(LoggerName,String)
            End If
            If (Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Filename")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Filename,String)
            End If
            If (DataProcessingNotes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(DataProcessingNotes,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SiteName As String,  _
                    ByVal DateTimeDeployed As Date,  _
                    ByVal SerialNumber As String,  _
                    ByVal LoggerType As String,  _
                    ByVal LoggerModel As String,  _
                    ByVal PctBattConfig As Global.System.Nullable(Of Double),  _
                    ByVal PctBattDwnld As Global.System.Nullable(Of Double),  _
                    ByVal LoggerName As String,  _
                    ByVal Filename As String,  _
                    ByVal DataProcessingNotes As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_SiteName As String,  _
                    ByVal Original_DateTimeDeployed As Date,  _
                    ByVal Original_Filename As String,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            If (SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SiteName")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SiteName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DateTimeDeployed,Date)
            If (SerialNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SerialNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SerialNumber,String)
            End If
            If (LoggerType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LoggerType,String)
            End If
            If (LoggerModel Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(LoggerModel,String)
            End If
            If (PctBattConfig.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PctBattConfig.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PctBattDwnld.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PctBattDwnld.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (LoggerName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(LoggerName,String)
            End If
            If (Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Filename")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Filename,String)
            End If
            If (DataProcessingNotes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(DataProcessingNotes,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(RecordUpdatedBy,String)
            End If
            If (Original_SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SiteName")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_SiteName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_DateTimeDeployed,Date)
            If (Original_Filename Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Filename")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Filename,String)
            End If
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SerialNumber As String, ByVal LoggerType As String, ByVal LoggerModel As String, ByVal PctBattConfig As Global.System.Nullable(Of Double), ByVal PctBattDwnld As Global.System.Nullable(Of Double), ByVal LoggerName As String, ByVal DataProcessingNotes As String, ByVal RecordInsertedDate As Global.System.Nullable(Of Date), ByVal RecordInsertedBy As String, ByVal RecordUpdatedDate As Global.System.Nullable(Of Date), ByVal RecordUpdatedBy As String, ByVal Original_SiteName As String, ByVal Original_DateTimeDeployed As Date, ByVal Original_Filename As String, ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_SiteName, Original_DateTimeDeployed, SerialNumber, LoggerType, LoggerModel, PctBattConfig, PctBattDwnld, LoggerName, Original_Filename, DataProcessingNotes, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_SiteName, Original_DateTimeDeployed, Original_Filename, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblContinuousDataSitesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblContinuousDataSites"
            tableMapping.ColumnMappings.Add("SiteName", "SiteName")
            tableMapping.ColumnMappings.Add("SiteType", "SiteType")
            tableMapping.ColumnMappings.Add("Latitude", "Latitude")
            tableMapping.ColumnMappings.Add("Longitude", "Longitude")
            tableMapping.ColumnMappings.Add("LocationNotes", "LocationNotes")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblContinuousDataSites] WHERE (([SiteName] = @Original_SiteNam"& _ 
                "e) AND ([row_timestamp] = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblContinuousDataSites] ([SiteName], [SiteType], [Latitude], ["& _ 
                "Longitude], [LocationNotes], [RecordInsertedDate], [RecordInsertedBy], [RecordUp"& _ 
                "datedDate], [RecordUpdatedBy]) VALUES (@SiteName, @SiteType, @Latitude, @Longitu"& _ 
                "de, @LocationNotes, @RecordInsertedDate, @RecordInsertedBy, @RecordUpdatedDate, "& _ 
                "@RecordUpdatedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SiteName, SiteType, Latitude, Longitude, LocationNote"& _ 
                "s, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row"& _ 
                "_timestamp FROM tblContinuousDataSites WHERE (SiteName = @SiteName)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Latitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 8, "Latitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Longitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 8, "Longitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LocationNotes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LocationNotes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblContinuousDataSites] SET [SiteName] = @SiteName, [SiteType] = @S"& _ 
                "iteType, [Latitude] = @Latitude, [Longitude] = @Longitude, [LocationNotes] = @Lo"& _ 
                "cationNotes, [RecordInsertedDate] = @RecordInsertedDate, [RecordInsertedBy] = @R"& _ 
                "ecordInsertedBy, [RecordUpdatedDate] = @RecordUpdatedDate, [RecordUpdatedBy] = @"& _ 
                "RecordUpdatedBy WHERE (([SiteName] = @Original_SiteName) AND ([row_timestamp] = "& _ 
                "@Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SiteName, SiteType, Latitude, Longitude, Loca"& _ 
                "tionNotes, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdate"& _ 
                "dBy, row_timestamp FROM tblContinuousDataSites WHERE (SiteName = @SiteName)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteType", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Latitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 8, "Latitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Longitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 8, "Longitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LocationNotes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LocationNotes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SiteName, SiteType, Latitude, Longitude, LocationNotes, RecordInsertedDate"& _ 
                ", RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM dbo.t"& _ 
                "blContinuousDataSites"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblContinuousDataSitesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblContinuousDataSitesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblContinuousDataSitesDataTable = New AK_ShallowLakesDataSet.tblContinuousDataSitesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblContinuousDataSitesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblContinuousDataSites")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SiteName As String, ByVal Original_row_timestamp() As Byte) As Integer
            If (Original_SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SiteName")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SiteName,String)
            End If
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SiteName As String, ByVal SiteType As String, ByVal Latitude As Global.System.Nullable(Of Decimal), ByVal Longitude As Global.System.Nullable(Of Decimal), ByVal LocationNotes As String, ByVal RecordInsertedDate As Global.System.Nullable(Of Date), ByVal RecordInsertedBy As String, ByVal RecordUpdatedDate As Global.System.Nullable(Of Date), ByVal RecordUpdatedBy As String) As Integer
            If (SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SiteName")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SiteName,String)
            End If
            If (SiteType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SiteType,String)
            End If
            If (Latitude.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Latitude.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Longitude.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Longitude.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (LocationNotes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(LocationNotes,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SiteName As String, ByVal SiteType As String, ByVal Latitude As Global.System.Nullable(Of Decimal), ByVal Longitude As Global.System.Nullable(Of Decimal), ByVal LocationNotes As String, ByVal RecordInsertedDate As Global.System.Nullable(Of Date), ByVal RecordInsertedBy As String, ByVal RecordUpdatedDate As Global.System.Nullable(Of Date), ByVal RecordUpdatedBy As String, ByVal Original_SiteName As String, ByVal Original_row_timestamp() As Byte) As Integer
            If (SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SiteName")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SiteName,String)
            End If
            If (SiteType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SiteType,String)
            End If
            If (Latitude.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Latitude.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Longitude.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Longitude.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (LocationNotes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(LocationNotes,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(RecordUpdatedBy,String)
            End If
            If (Original_SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SiteName")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SiteName,String)
            End If
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SiteType As String, ByVal Latitude As Global.System.Nullable(Of Decimal), ByVal Longitude As Global.System.Nullable(Of Decimal), ByVal LocationNotes As String, ByVal RecordInsertedDate As Global.System.Nullable(Of Date), ByVal RecordInsertedBy As String, ByVal RecordUpdatedDate As Global.System.Nullable(Of Date), ByVal RecordUpdatedBy As String, ByVal Original_SiteName As String, ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_SiteName, SiteType, Latitude, Longitude, LocationNotes, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_SiteName, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblDBEditsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblDBEdits"
            tableMapping.ColumnMappings.Add("EditDescription", "EditDescription")
            tableMapping.ColumnMappings.Add("Editor", "Editor")
            tableMapping.ColumnMappings.Add("DateTime", "DateTime")
            tableMapping.ColumnMappings.Add("PrevVersion", "PrevVersion")
            tableMapping.ColumnMappings.Add("NewVersion", "NewVersion")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblDBEdits] WHERE (([DateTime] = @Original_DateTime) AND ([row"& _ 
                "_timestamp] = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblDBEdits] ([EditDescription], [Editor], [DateTime], [PrevVer"& _ 
                "sion], [NewVersion]) VALUES (@EditDescription, @Editor, @DateTime, @PrevVersion,"& _ 
                " @NewVersion);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT EditDescription, Editor, DateTime, PrevVersion, NewVersio"& _ 
                "n, row_timestamp FROM tblDBEdits WHERE (DateTime = @DateTime)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EditDescription", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EditDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Editor", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Editor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrevVersion", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrevVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NewVersion", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NewVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblDBEdits] SET [EditDescription] = @EditDescription, [Editor] = @E"& _ 
                "ditor, [DateTime] = @DateTime, [PrevVersion] = @PrevVersion, [NewVersion] = @New"& _ 
                "Version WHERE (([DateTime] = @Original_DateTime) AND ([row_timestamp] = @Origina"& _ 
                "l_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT EditDescription, Editor, DateTime, PrevVersion, NewVe"& _ 
                "rsion, row_timestamp FROM tblDBEdits WHERE (DateTime = @DateTime)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EditDescription", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EditDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Editor", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Editor", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrevVersion", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrevVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NewVersion", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NewVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT EditDescription, Editor, DateTime, PrevVersion, NewVersion, row_timestamp "& _ 
                "FROM dbo.tblDBEdits"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblDBEditsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblDBEditsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblDBEditsDataTable = New AK_ShallowLakesDataSet.tblDBEditsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblDBEditsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblDBEdits")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_DateTime As Date, ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_DateTime,Date)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal EditDescription As String, ByVal Editor As String, ByVal DateTime As Date, ByVal PrevVersion As Global.System.Nullable(Of Double), ByVal NewVersion As Global.System.Nullable(Of Double)) As Integer
            If (EditDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(EditDescription,String)
            End If
            If (Editor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Editor,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(DateTime,Date)
            If (PrevVersion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PrevVersion.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (NewVersion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(NewVersion.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal EditDescription As String, ByVal Editor As String, ByVal DateTime As Date, ByVal PrevVersion As Global.System.Nullable(Of Double), ByVal NewVersion As Global.System.Nullable(Of Double), ByVal Original_DateTime As Date, ByVal Original_row_timestamp() As Byte) As Integer
            If (EditDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(EditDescription,String)
            End If
            If (Editor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Editor,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DateTime,Date)
            If (PrevVersion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PrevVersion.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (NewVersion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(NewVersion.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_DateTime,Date)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal EditDescription As String, ByVal Editor As String, ByVal PrevVersion As Global.System.Nullable(Of Double), ByVal NewVersion As Global.System.Nullable(Of Double), ByVal Original_DateTime As Date, ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(EditDescription, Editor, Original_DateTime, PrevVersion, NewVersion, Original_DateTime, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblDBIssuesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblDBIssues"
            tableMapping.ColumnMappings.Add("IssueID", "IssueID")
            tableMapping.ColumnMappings.Add("Issue", "Issue")
            tableMapping.ColumnMappings.Add("IsResolved", "IsResolved")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblDBIssues] WHERE (([IssueID] = @Original_IssueID) AND ([row_"& _ 
                "timestamp] = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IssueID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IssueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblDBIssues] ([IssueID], [Issue], [IsResolved], [RecordInserte"& _ 
                "dDate], [RecordInsertedBy], [RecordUpdatedDate], [RecordUpdatedBy]) VALUES (@Iss"& _ 
                "ueID, @Issue, @IsResolved, @RecordInsertedDate, @RecordInsertedBy, @RecordUpdate"& _ 
                "dDate, @RecordUpdatedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IssueID, Issue, IsResolved, RecordInsertedDate"& _ 
                ", RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM tblDB"& _ 
                "Issues WHERE (IssueID = @IssueID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IssueID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IssueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Issue", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Issue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsResolved", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsResolved", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblDBIssues] SET [IssueID] = @IssueID, [Issue] = @Issue, [IsResolve"& _ 
                "d] = @IsResolved, [RecordInsertedDate] = @RecordInsertedDate, [RecordInsertedBy]"& _ 
                " = @RecordInsertedBy, [RecordUpdatedDate] = @RecordUpdatedDate, [RecordUpdatedBy"& _ 
                "] = @RecordUpdatedBy WHERE (([IssueID] = @Original_IssueID) AND ([row_timestamp]"& _ 
                " = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IssueID, Issue, IsResolved, RecordInserted"& _ 
                "Date, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM t"& _ 
                "blDBIssues WHERE (IssueID = @IssueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IssueID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IssueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Issue", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Issue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsResolved", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsResolved", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IssueID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IssueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IssueID, Issue, IsResolved, RecordInsertedDate, RecordInsertedBy, RecordUp"& _ 
                "datedDate, RecordUpdatedBy, row_timestamp FROM dbo.tblDBIssues"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblDBIssuesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblDBIssuesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblDBIssuesDataTable = New AK_ShallowLakesDataSet.tblDBIssuesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblDBIssuesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblDBIssues")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IssueID As System.Guid, ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IssueID,System.Guid)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IssueID As System.Guid, ByVal Issue As String, ByVal IsResolved As Global.System.Nullable(Of Boolean), ByVal RecordInsertedDate As Global.System.Nullable(Of Date), ByVal RecordInsertedBy As String, ByVal RecordUpdatedDate As Global.System.Nullable(Of Date), ByVal RecordUpdatedBy As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IssueID,System.Guid)
            If (Issue Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Issue,String)
            End If
            If (IsResolved.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IsResolved.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IssueID As System.Guid, ByVal Issue As String, ByVal IsResolved As Global.System.Nullable(Of Boolean), ByVal RecordInsertedDate As Global.System.Nullable(Of Date), ByVal RecordInsertedBy As String, ByVal RecordUpdatedDate As Global.System.Nullable(Of Date), ByVal RecordUpdatedBy As String, ByVal Original_IssueID As System.Guid, ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IssueID,System.Guid)
            If (Issue Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Issue,String)
            End If
            If (IsResolved.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IsResolved.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(RecordUpdatedBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IssueID,System.Guid)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Issue As String, ByVal IsResolved As Global.System.Nullable(Of Boolean), ByVal RecordInsertedDate As Global.System.Nullable(Of Date), ByVal RecordInsertedBy As String, ByVal RecordUpdatedDate As Global.System.Nullable(Of Date), ByVal RecordUpdatedBy As String, ByVal Original_IssueID As System.Guid, ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_IssueID, Issue, IsResolved, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_IssueID, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblEventsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblEvents"
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("SAMPLEDATE", "SAMPLEDATE")
            tableMapping.ColumnMappings.Add("START_TIME", "START_TIME")
            tableMapping.ColumnMappings.Add("YEAR", "YEAR")
            tableMapping.ColumnMappings.Add("CONTMONVISIT", "CONTMONVISIT")
            tableMapping.ColumnMappings.Add("SAMPLEMETHOD", "SAMPLEMETHOD")
            tableMapping.ColumnMappings.Add("OBSERVERS", "OBSERVERS")
            tableMapping.ColumnMappings.Add("SECCHIDEPTH", "SECCHIDEPTH")
            tableMapping.ColumnMappings.Add("SECCHINOTES", "SECCHINOTES")
            tableMapping.ColumnMappings.Add("SECCHIONBOTTOM", "SECCHIONBOTTOM")
            tableMapping.ColumnMappings.Add("ISSHOREBURNED", "ISSHOREBURNED")
            tableMapping.ColumnMappings.Add("BURNNOTES", "BURNNOTES")
            tableMapping.ColumnMappings.Add("BURNDATE", "BURNDATE")
            tableMapping.ColumnMappings.Add("THERMOKARSTEVIDENCE", "THERMOKARSTEVIDENCE")
            tableMapping.ColumnMappings.Add("THERMOKARSTLOCATION", "THERMOKARSTLOCATION")
            tableMapping.ColumnMappings.Add("THERMOKARSTEXTENT", "THERMOKARSTEXTENT")
            tableMapping.ColumnMappings.Add("THERMOKARSTACTIVE", "THERMOKARSTACTIVE")
            tableMapping.ColumnMappings.Add("THERMOKARSTMATERIAL", "THERMOKARSTMATERIAL")
            tableMapping.ColumnMappings.Add("WOODFROGPRESENT", "WOODFROGPRESENT")
            tableMapping.ColumnMappings.Add("PERCENTCLOUDS", "PERCENTCLOUDS")
            tableMapping.ColumnMappings.Add("WIND", "WIND")
            tableMapping.ColumnMappings.Add("PRECIPITATION", "PRECIPITATION")
            tableMapping.ColumnMappings.Add("PRECIPITATIONINTENSITY", "PRECIPITATIONINTENSITY")
            tableMapping.ColumnMappings.Add("WEATHERCOMMENTS", "WEATHERCOMMENTS")
            tableMapping.ColumnMappings.Add("SITECONDITIONSCOMMENTS", "SITECONDITIONSCOMMENTS")
            tableMapping.ColumnMappings.Add("BIRD_ANIMAL_ACTIVITY", "BIRD_ANIMAL_ACTIVITY")
            tableMapping.ColumnMappings.Add("UPLAND_VIERECK_CLASS", "UPLAND_VIERECK_CLASS")
            tableMapping.ColumnMappings.Add("EMERGENT_VIERECK_CLASS", "EMERGENT_VIERECK_CLASS")
            tableMapping.ColumnMappings.Add("SUBMERGENT_VIERECK_CLASS", "SUBMERGENT_VIERECK_CLASS")
            tableMapping.ColumnMappings.Add("SUBMERGENT_COVER", "SUBMERGENT_COVER")
            tableMapping.ColumnMappings.Add("ELODEA_SURVEYED", "ELODEA_SURVEYED")
            tableMapping.ColumnMappings.Add("ELODEA_PRESENT", "ELODEA_PRESENT")
            tableMapping.ColumnMappings.Add("ELODEA_NOTES", "ELODEA_NOTES")
            tableMapping.ColumnMappings.Add("FISHPRESENT", "FISHPRESENT")
            tableMapping.ColumnMappings.Add("WL_L_TO_S", "WL_L_TO_S")
            tableMapping.ColumnMappings.Add("WL_L_TO_G", "WL_L_TO_G")
            tableMapping.ColumnMappings.Add("WATERLEVEL_CM", "WATERLEVEL_CM")
            tableMapping.ColumnMappings.Add("MON_MOVED", "MON_MOVED")
            tableMapping.ColumnMappings.Add("LAKE_LEVEL_NOTES", "LAKE_LEVEL_NOTES")
            tableMapping.ColumnMappings.Add("STRATCLASS", "STRATCLASS")
            tableMapping.ColumnMappings.Add("TURBIDITY_FIELD", "TURBIDITY_FIELD")
            tableMapping.ColumnMappings.Add("EMERGENT_WIDTH", "EMERGENT_WIDTH")
            tableMapping.ColumnMappings.Add("SUBMERGENT_WIDTH", "SUBMERGENT_WIDTH")
            tableMapping.ColumnMappings.Add("LOONSPRESENT", "LOONSPRESENT")
            tableMapping.ColumnMappings.Add("RUSTYBBIRDSPRESENT", "RUSTYBBIRDSPRESENT")
            tableMapping.ColumnMappings.Add("SDI", "SDI")
            tableMapping.ColumnMappings.Add("LAKEVOLUME_GIS_M3", "LAKEVOLUME_GIS_M3")
            tableMapping.ColumnMappings.Add("LAKEAREA_GIS_M2", "LAKEAREA_GIS_M2")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblEvents] WHERE (([PONDNAME] = @Original_PONDNAME) AND ([SAMP"& _ 
                "LEDATE] = @Original_SAMPLEDATE) AND ([row_timestamp] = @Original_row_timestamp))"& _ 
                ""
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblEvents] ([PONDNAME], [SAMPLEDATE], [START_TIME], [YEAR], [C"& _ 
                "ONTMONVISIT], [SAMPLEMETHOD], [OBSERVERS], [SECCHIDEPTH], [SECCHINOTES], [SECCHI"& _ 
                "ONBOTTOM], [ISSHOREBURNED], [BURNNOTES], [BURNDATE], [THERMOKARSTEVIDENCE], [THE"& _ 
                "RMOKARSTLOCATION], [THERMOKARSTEXTENT], [THERMOKARSTACTIVE], [THERMOKARSTMATERIA"& _ 
                "L], [WOODFROGPRESENT], [PERCENTCLOUDS], [WIND], [PRECIPITATION], [PRECIPITATIONI"& _ 
                "NTENSITY], [WEATHERCOMMENTS], [SITECONDITIONSCOMMENTS], [BIRD_ANIMAL_ACTIVITY], "& _ 
                "[UPLAND_VIERECK_CLASS], [EMERGENT_VIERECK_CLASS], [SUBMERGENT_VIERECK_CLASS], [S"& _ 
                "UBMERGENT_COVER], [ELODEA_SURVEYED], [ELODEA_PRESENT], [ELODEA_NOTES], [FISHPRES"& _ 
                "ENT], [WL_L_TO_S], [WL_L_TO_G], [WATERLEVEL_CM], [MON_MOVED], [LAKE_LEVEL_NOTES]"& _ 
                ", [STRATCLASS], [TURBIDITY_FIELD], [EMERGENT_WIDTH], [SUBMERGENT_WIDTH], [LOONSP"& _ 
                "RESENT], [RUSTYBBIRDSPRESENT], [SDI], [LAKEVOLUME_GIS_M3], [LAKEAREA_GIS_M2], [R"& _ 
                "ecordInsertedDate], [RecordInsertedBy], [RecordUpdatedDate], [RecordUpdatedBy]) "& _ 
                "VALUES (@PONDNAME, @SAMPLEDATE, @START_TIME, @YEAR, @CONTMONVISIT, @SAMPLEMETHOD"& _ 
                ", @OBSERVERS, @SECCHIDEPTH, @SECCHINOTES, @SECCHIONBOTTOM, @ISSHOREBURNED, @BURN"& _ 
                "NOTES, @BURNDATE, @THERMOKARSTEVIDENCE, @THERMOKARSTLOCATION, @THERMOKARSTEXTENT"& _ 
                ", @THERMOKARSTACTIVE, @THERMOKARSTMATERIAL, @WOODFROGPRESENT, @PERCENTCLOUDS, @W"& _ 
                "IND, @PRECIPITATION, @PRECIPITATIONINTENSITY, @WEATHERCOMMENTS, @SITECONDITIONSC"& _ 
                "OMMENTS, @BIRD_ANIMAL_ACTIVITY, @UPLAND_VIERECK_CLASS, @EMERGENT_VIERECK_CLASS, "& _ 
                "@SUBMERGENT_VIERECK_CLASS, @SUBMERGENT_COVER, @ELODEA_SURVEYED, @ELODEA_PRESENT,"& _ 
                " @ELODEA_NOTES, @FISHPRESENT, @WL_L_TO_S, @WL_L_TO_G, @WATERLEVEL_CM, @MON_MOVED"& _ 
                ", @LAKE_LEVEL_NOTES, @STRATCLASS, @TURBIDITY_FIELD, @EMERGENT_WIDTH, @SUBMERGENT"& _ 
                "_WIDTH, @LOONSPRESENT, @RUSTYBBIRDSPRESENT, @SDI, @LAKEVOLUME_GIS_M3, @LAKEAREA_"& _ 
                "GIS_M2, @RecordInsertedDate, @RecordInsertedBy, @RecordUpdatedDate, @RecordUpdat"& _ 
                "edBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PONDNAME, SAMPLEDATE, START_TIME, YEAR, CONTMONVISIT, SAMPLEMETHO"& _ 
                "D, OBSERVERS, SECCHIDEPTH, SECCHINOTES, SECCHIONBOTTOM, ISSHOREBURNED, BURNNOTES"& _ 
                ", BURNDATE, THERMOKARSTEVIDENCE, THERMOKARSTLOCATION, THERMOKARSTEXTENT, THERMOK"& _ 
                "ARSTACTIVE, THERMOKARSTMATERIAL, WOODFROGPRESENT, PERCENTCLOUDS, WIND, PRECIPITA"& _ 
                "TION, PRECIPITATIONINTENSITY, WEATHERCOMMENTS, SITECONDITIONSCOMMENTS, BIRD_ANIM"& _ 
                "AL_ACTIVITY, UPLAND_VIERECK_CLASS, EMERGENT_VIERECK_CLASS, SUBMERGENT_VIERECK_CL"& _ 
                "ASS, SUBMERGENT_COVER, ELODEA_SURVEYED, ELODEA_PRESENT, ELODEA_NOTES, FISHPRESEN"& _ 
                "T, WL_L_TO_S, WL_L_TO_G, WATERLEVEL_CM, MON_MOVED, LAKE_LEVEL_NOTES, STRATCLASS,"& _ 
                " TURBIDITY_FIELD, EMERGENT_WIDTH, SUBMERGENT_WIDTH, LOONSPRESENT, RUSTYBBIRDSPRE"& _ 
                "SENT, SDI, LAKEVOLUME_GIS_M3, LAKEAREA_GIS_M2, RecordInsertedDate, RecordInserte"& _ 
                "dBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM tblEvents WHERE (PON"& _ 
                "DNAME = @PONDNAME) AND (SAMPLEDATE = @SAMPLEDATE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@START_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONTMONVISIT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTMONVISIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEMETHOD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEMETHOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OBSERVERS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBSERVERS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SECCHIDEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SECCHIDEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SECCHINOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SECCHINOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SECCHIONBOTTOM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SECCHIONBOTTOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISSHOREBURNED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISSHOREBURNED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BURNNOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BURNNOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BURNDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BURNDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THERMOKARSTEVIDENCE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THERMOKARSTEVIDENCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THERMOKARSTLOCATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THERMOKARSTLOCATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THERMOKARSTEXTENT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THERMOKARSTEXTENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THERMOKARSTACTIVE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THERMOKARSTACTIVE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THERMOKARSTMATERIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THERMOKARSTMATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WOODFROGPRESENT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WOODFROGPRESENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERCENTCLOUDS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCENTCLOUDS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WIND", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WIND", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECIPITATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECIPITATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECIPITATIONINTENSITY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECIPITATIONINTENSITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WEATHERCOMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WEATHERCOMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SITECONDITIONSCOMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SITECONDITIONSCOMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BIRD_ANIMAL_ACTIVITY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BIRD_ANIMAL_ACTIVITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPLAND_VIERECK_CLASS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPLAND_VIERECK_CLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMERGENT_VIERECK_CLASS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMERGENT_VIERECK_CLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUBMERGENT_VIERECK_CLASS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUBMERGENT_VIERECK_CLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUBMERGENT_COVER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUBMERGENT_COVER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ELODEA_SURVEYED", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ELODEA_SURVEYED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ELODEA_PRESENT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ELODEA_PRESENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ELODEA_NOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ELODEA_NOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FISHPRESENT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FISHPRESENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WL_L_TO_S", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WL_L_TO_S", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WL_L_TO_G", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WL_L_TO_G", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WATERLEVEL_CM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WATERLEVEL_CM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MON_MOVED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MON_MOVED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKE_LEVEL_NOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKE_LEVEL_NOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STRATCLASS", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STRATCLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TURBIDITY_FIELD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TURBIDITY_FIELD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMERGENT_WIDTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMERGENT_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUBMERGENT_WIDTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUBMERGENT_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOONSPRESENT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOONSPRESENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RUSTYBBIRDSPRESENT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUSTYBBIRDSPRESENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SDI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKEVOLUME_GIS_M3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKEVOLUME_GIS_M3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKEAREA_GIS_M2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKEAREA_GIS_M2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblEvents] SET [PONDNAME] = @PONDNAME, [SAMPLEDATE] = @SAMPLEDATE, "& _ 
                "[START_TIME] = @START_TIME, [YEAR] = @YEAR, [CONTMONVISIT] = @CONTMONVISIT, [SAM"& _ 
                "PLEMETHOD] = @SAMPLEMETHOD, [OBSERVERS] = @OBSERVERS, [SECCHIDEPTH] = @SECCHIDEP"& _ 
                "TH, [SECCHINOTES] = @SECCHINOTES, [SECCHIONBOTTOM] = @SECCHIONBOTTOM, [ISSHOREBU"& _ 
                "RNED] = @ISSHOREBURNED, [BURNNOTES] = @BURNNOTES, [BURNDATE] = @BURNDATE, [THERM"& _ 
                "OKARSTEVIDENCE] = @THERMOKARSTEVIDENCE, [THERMOKARSTLOCATION] = @THERMOKARSTLOCA"& _ 
                "TION, [THERMOKARSTEXTENT] = @THERMOKARSTEXTENT, [THERMOKARSTACTIVE] = @THERMOKAR"& _ 
                "STACTIVE, [THERMOKARSTMATERIAL] = @THERMOKARSTMATERIAL, [WOODFROGPRESENT] = @WOO"& _ 
                "DFROGPRESENT, [PERCENTCLOUDS] = @PERCENTCLOUDS, [WIND] = @WIND, [PRECIPITATION] "& _ 
                "= @PRECIPITATION, [PRECIPITATIONINTENSITY] = @PRECIPITATIONINTENSITY, [WEATHERCO"& _ 
                "MMENTS] = @WEATHERCOMMENTS, [SITECONDITIONSCOMMENTS] = @SITECONDITIONSCOMMENTS, "& _ 
                "[BIRD_ANIMAL_ACTIVITY] = @BIRD_ANIMAL_ACTIVITY, [UPLAND_VIERECK_CLASS] = @UPLAND"& _ 
                "_VIERECK_CLASS, [EMERGENT_VIERECK_CLASS] = @EMERGENT_VIERECK_CLASS, [SUBMERGENT_"& _ 
                "VIERECK_CLASS] = @SUBMERGENT_VIERECK_CLASS, [SUBMERGENT_COVER] = @SUBMERGENT_COV"& _ 
                "ER, [ELODEA_SURVEYED] = @ELODEA_SURVEYED, [ELODEA_PRESENT] = @ELODEA_PRESENT, [E"& _ 
                "LODEA_NOTES] = @ELODEA_NOTES, [FISHPRESENT] = @FISHPRESENT, [WL_L_TO_S] = @WL_L_"& _ 
                "TO_S, [WL_L_TO_G] = @WL_L_TO_G, [WATERLEVEL_CM] = @WATERLEVEL_CM, [MON_MOVED] = "& _ 
                "@MON_MOVED, [LAKE_LEVEL_NOTES] = @LAKE_LEVEL_NOTES, [STRATCLASS] = @STRATCLASS, "& _ 
                "[TURBIDITY_FIELD] = @TURBIDITY_FIELD, [EMERGENT_WIDTH] = @EMERGENT_WIDTH, [SUBME"& _ 
                "RGENT_WIDTH] = @SUBMERGENT_WIDTH, [LOONSPRESENT] = @LOONSPRESENT, [RUSTYBBIRDSPR"& _ 
                "ESENT] = @RUSTYBBIRDSPRESENT, [SDI] = @SDI, [LAKEVOLUME_GIS_M3] = @LAKEVOLUME_GI"& _ 
                "S_M3, [LAKEAREA_GIS_M2] = @LAKEAREA_GIS_M2, [RecordInsertedDate] = @RecordInsert"& _ 
                "edDate, [RecordInsertedBy] = @RecordInsertedBy, [RecordUpdatedDate] = @RecordUpd"& _ 
                "atedDate, [RecordUpdatedBy] = @RecordUpdatedBy WHERE (([PONDNAME] = @Original_PO"& _ 
                "NDNAME) AND ([SAMPLEDATE] = @Original_SAMPLEDATE) AND ([row_timestamp] = @Origin"& _ 
                "al_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PONDNAME, SAMPLEDATE, START_TIME, YEAR, CONTMONVISIT"& _ 
                ", SAMPLEMETHOD, OBSERVERS, SECCHIDEPTH, SECCHINOTES, SECCHIONBOTTOM, ISSHOREBURN"& _ 
                "ED, BURNNOTES, BURNDATE, THERMOKARSTEVIDENCE, THERMOKARSTLOCATION, THERMOKARSTEX"& _ 
                "TENT, THERMOKARSTACTIVE, THERMOKARSTMATERIAL, WOODFROGPRESENT, PERCENTCLOUDS, WI"& _ 
                "ND, PRECIPITATION, PRECIPITATIONINTENSITY, WEATHERCOMMENTS, SITECONDITIONSCOMMEN"& _ 
                "TS, BIRD_ANIMAL_ACTIVITY, UPLAND_VIERECK_CLASS, EMERGENT_VIERECK_CLASS, SUBMERGE"& _ 
                "NT_VIERECK_CLASS, SUBMERGENT_COVER, ELODEA_SURVEYED, ELODEA_PRESENT, ELODEA_NOTE"& _ 
                "S, FISHPRESENT, WL_L_TO_S, WL_L_TO_G, WATERLEVEL_CM, MON_MOVED, LAKE_LEVEL_NOTES"& _ 
                ", STRATCLASS, TURBIDITY_FIELD, EMERGENT_WIDTH, SUBMERGENT_WIDTH, LOONSPRESENT, R"& _ 
                "USTYBBIRDSPRESENT, SDI, LAKEVOLUME_GIS_M3, LAKEAREA_GIS_M2, RecordInsertedDate, "& _ 
                "RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM tblEven"& _ 
                "ts WHERE (PONDNAME = @PONDNAME) AND (SAMPLEDATE = @SAMPLEDATE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@START_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "START_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YEAR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONTMONVISIT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTMONVISIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEMETHOD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEMETHOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OBSERVERS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBSERVERS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SECCHIDEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SECCHIDEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SECCHINOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SECCHINOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SECCHIONBOTTOM", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SECCHIONBOTTOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISSHOREBURNED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISSHOREBURNED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BURNNOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BURNNOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BURNDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BURNDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THERMOKARSTEVIDENCE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THERMOKARSTEVIDENCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THERMOKARSTLOCATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THERMOKARSTLOCATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THERMOKARSTEXTENT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THERMOKARSTEXTENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THERMOKARSTACTIVE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THERMOKARSTACTIVE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THERMOKARSTMATERIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THERMOKARSTMATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WOODFROGPRESENT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WOODFROGPRESENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERCENTCLOUDS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERCENTCLOUDS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WIND", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WIND", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECIPITATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECIPITATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRECIPITATIONINTENSITY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRECIPITATIONINTENSITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WEATHERCOMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WEATHERCOMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SITECONDITIONSCOMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SITECONDITIONSCOMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BIRD_ANIMAL_ACTIVITY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BIRD_ANIMAL_ACTIVITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPLAND_VIERECK_CLASS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPLAND_VIERECK_CLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMERGENT_VIERECK_CLASS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMERGENT_VIERECK_CLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUBMERGENT_VIERECK_CLASS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUBMERGENT_VIERECK_CLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUBMERGENT_COVER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUBMERGENT_COVER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ELODEA_SURVEYED", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ELODEA_SURVEYED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ELODEA_PRESENT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ELODEA_PRESENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ELODEA_NOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ELODEA_NOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FISHPRESENT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FISHPRESENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WL_L_TO_S", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WL_L_TO_S", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WL_L_TO_G", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WL_L_TO_G", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WATERLEVEL_CM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WATERLEVEL_CM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MON_MOVED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MON_MOVED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKE_LEVEL_NOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKE_LEVEL_NOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STRATCLASS", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STRATCLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TURBIDITY_FIELD", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TURBIDITY_FIELD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMERGENT_WIDTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMERGENT_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUBMERGENT_WIDTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUBMERGENT_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOONSPRESENT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOONSPRESENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RUSTYBBIRDSPRESENT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RUSTYBBIRDSPRESENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SDI", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SDI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKEVOLUME_GIS_M3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKEVOLUME_GIS_M3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKEAREA_GIS_M2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKEAREA_GIS_M2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PONDNAME, SAMPLEDATE, START_TIME, YEAR, CONTMONVISIT, SAMPLEMETHOD, OBSERV"& _ 
                "ERS, SECCHIDEPTH, SECCHINOTES, SECCHIONBOTTOM, ISSHOREBURNED, BURNNOTES, BURNDAT"& _ 
                "E, THERMOKARSTEVIDENCE, THERMOKARSTLOCATION, THERMOKARSTEXTENT, THERMOKARSTACTIV"& _ 
                "E, THERMOKARSTMATERIAL, WOODFROGPRESENT, PERCENTCLOUDS, WIND, PRECIPITATION, PRE"& _ 
                "CIPITATIONINTENSITY, WEATHERCOMMENTS, SITECONDITIONSCOMMENTS, BIRD_ANIMAL_ACTIVI"& _ 
                "TY, UPLAND_VIERECK_CLASS, EMERGENT_VIERECK_CLASS, SUBMERGENT_VIERECK_CLASS, SUBM"& _ 
                "ERGENT_COVER, ELODEA_SURVEYED, ELODEA_PRESENT, ELODEA_NOTES, FISHPRESENT, WL_L_T"& _ 
                "O_S, WL_L_TO_G, WATERLEVEL_CM, MON_MOVED, LAKE_LEVEL_NOTES, STRATCLASS, TURBIDIT"& _ 
                "Y_FIELD, EMERGENT_WIDTH, SUBMERGENT_WIDTH, LOONSPRESENT, RUSTYBBIRDSPRESENT, SDI"& _ 
                ", LAKEVOLUME_GIS_M3, LAKEAREA_GIS_M2, RecordInsertedDate, RecordInsertedBy, Reco"& _ 
                "rdUpdatedDate, RecordUpdatedBy, row_timestamp FROM dbo.tblEvents"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblEventsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblEventsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblEventsDataTable = New AK_ShallowLakesDataSet.tblEventsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblEventsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblEvents")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PONDNAME As String, ByVal Original_SAMPLEDATE As Date, ByVal Original_row_timestamp() As Byte) As Integer
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SAMPLEDATE,Date)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal START_TIME As Global.System.Nullable(Of Date),  _
                    ByVal YEAR As Global.System.Nullable(Of Integer),  _
                    ByVal CONTMONVISIT As Global.System.Nullable(Of Boolean),  _
                    ByVal SAMPLEMETHOD As String,  _
                    ByVal OBSERVERS As String,  _
                    ByVal SECCHIDEPTH As Global.System.Nullable(Of Double),  _
                    ByVal SECCHINOTES As String,  _
                    ByVal SECCHIONBOTTOM As Global.System.Nullable(Of Boolean),  _
                    ByVal ISSHOREBURNED As Global.System.Nullable(Of Boolean),  _
                    ByVal BURNNOTES As String,  _
                    ByVal BURNDATE As Global.System.Nullable(Of Date),  _
                    ByVal THERMOKARSTEVIDENCE As Global.System.Nullable(Of Boolean),  _
                    ByVal THERMOKARSTLOCATION As String,  _
                    ByVal THERMOKARSTEXTENT As String,  _
                    ByVal THERMOKARSTACTIVE As String,  _
                    ByVal THERMOKARSTMATERIAL As String,  _
                    ByVal WOODFROGPRESENT As Global.System.Nullable(Of Boolean),  _
                    ByVal PERCENTCLOUDS As String,  _
                    ByVal WIND As String,  _
                    ByVal PRECIPITATION As String,  _
                    ByVal PRECIPITATIONINTENSITY As String,  _
                    ByVal WEATHERCOMMENTS As String,  _
                    ByVal SITECONDITIONSCOMMENTS As String,  _
                    ByVal BIRD_ANIMAL_ACTIVITY As String,  _
                    ByVal UPLAND_VIERECK_CLASS As String,  _
                    ByVal EMERGENT_VIERECK_CLASS As String,  _
                    ByVal SUBMERGENT_VIERECK_CLASS As String,  _
                    ByVal SUBMERGENT_COVER As String,  _
                    ByVal ELODEA_SURVEYED As String,  _
                    ByVal ELODEA_PRESENT As String,  _
                    ByVal ELODEA_NOTES As String,  _
                    ByVal FISHPRESENT As Global.System.Nullable(Of Boolean),  _
                    ByVal WL_L_TO_S As Global.System.Nullable(Of Double),  _
                    ByVal WL_L_TO_G As Global.System.Nullable(Of Double),  _
                    ByVal WATERLEVEL_CM As Global.System.Nullable(Of Double),  _
                    ByVal MON_MOVED As Global.System.Nullable(Of Boolean),  _
                    ByVal LAKE_LEVEL_NOTES As String,  _
                    ByVal STRATCLASS As String,  _
                    ByVal TURBIDITY_FIELD As Global.System.Nullable(Of Double),  _
                    ByVal EMERGENT_WIDTH As Global.System.Nullable(Of Double),  _
                    ByVal SUBMERGENT_WIDTH As Global.System.Nullable(Of Double),  _
                    ByVal LOONSPRESENT As Global.System.Nullable(Of Boolean),  _
                    ByVal RUSTYBBIRDSPRESENT As Global.System.Nullable(Of Boolean),  _
                    ByVal SDI As Global.System.Nullable(Of Double),  _
                    ByVal LAKEVOLUME_GIS_M3 As Global.System.Nullable(Of Double),  _
                    ByVal LAKEAREA_GIS_M2 As Global.System.Nullable(Of Double),  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAMPLEDATE,Date)
            If (START_TIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(START_TIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (YEAR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(YEAR.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (CONTMONVISIT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CONTMONVISIT.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (SAMPLEMETHOD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SAMPLEMETHOD,String)
            End If
            If (OBSERVERS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(OBSERVERS,String)
            End If
            If (SECCHIDEPTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SECCHIDEPTH.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (SECCHINOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SECCHINOTES,String)
            End If
            If (SECCHIONBOTTOM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SECCHIONBOTTOM.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ISSHOREBURNED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ISSHOREBURNED.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (BURNNOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(BURNNOTES,String)
            End If
            If (BURNDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(BURNDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (THERMOKARSTEVIDENCE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(THERMOKARSTEVIDENCE.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (THERMOKARSTLOCATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(THERMOKARSTLOCATION,String)
            End If
            If (THERMOKARSTEXTENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(THERMOKARSTEXTENT,String)
            End If
            If (THERMOKARSTACTIVE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(THERMOKARSTACTIVE,String)
            End If
            If (THERMOKARSTMATERIAL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(THERMOKARSTMATERIAL,String)
            End If
            If (WOODFROGPRESENT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(WOODFROGPRESENT.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (PERCENTCLOUDS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(PERCENTCLOUDS,String)
            End If
            If (WIND Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(WIND,String)
            End If
            If (PRECIPITATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(PRECIPITATION,String)
            End If
            If (PRECIPITATIONINTENSITY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PRECIPITATIONINTENSITY,String)
            End If
            If (WEATHERCOMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(WEATHERCOMMENTS,String)
            End If
            If (SITECONDITIONSCOMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(SITECONDITIONSCOMMENTS,String)
            End If
            If (BIRD_ANIMAL_ACTIVITY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(BIRD_ANIMAL_ACTIVITY,String)
            End If
            If (UPLAND_VIERECK_CLASS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(UPLAND_VIERECK_CLASS,String)
            End If
            If (EMERGENT_VIERECK_CLASS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(EMERGENT_VIERECK_CLASS,String)
            End If
            If (SUBMERGENT_VIERECK_CLASS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(SUBMERGENT_VIERECK_CLASS,String)
            End If
            If (SUBMERGENT_COVER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(SUBMERGENT_COVER,String)
            End If
            If (ELODEA_SURVEYED Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(ELODEA_SURVEYED,String)
            End If
            If (ELODEA_PRESENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(ELODEA_PRESENT,String)
            End If
            If (ELODEA_NOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(ELODEA_NOTES,String)
            End If
            If (FISHPRESENT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(FISHPRESENT.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (WL_L_TO_S.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(WL_L_TO_S.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (WL_L_TO_G.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(WL_L_TO_G.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (WATERLEVEL_CM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(WATERLEVEL_CM.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (MON_MOVED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(MON_MOVED.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (LAKE_LEVEL_NOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(LAKE_LEVEL_NOTES,String)
            End If
            If (STRATCLASS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(STRATCLASS,String)
            End If
            If (TURBIDITY_FIELD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(TURBIDITY_FIELD.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (EMERGENT_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(EMERGENT_WIDTH.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (SUBMERGENT_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(SUBMERGENT_WIDTH.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (LOONSPRESENT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(LOONSPRESENT.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (RUSTYBBIRDSPRESENT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(RUSTYBBIRDSPRESENT.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (SDI.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(SDI.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (LAKEVOLUME_GIS_M3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(LAKEVOLUME_GIS_M3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (LAKEAREA_GIS_M2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(LAKEAREA_GIS_M2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal START_TIME As Global.System.Nullable(Of Date),  _
                    ByVal YEAR As Global.System.Nullable(Of Integer),  _
                    ByVal CONTMONVISIT As Global.System.Nullable(Of Boolean),  _
                    ByVal SAMPLEMETHOD As String,  _
                    ByVal OBSERVERS As String,  _
                    ByVal SECCHIDEPTH As Global.System.Nullable(Of Double),  _
                    ByVal SECCHINOTES As String,  _
                    ByVal SECCHIONBOTTOM As Global.System.Nullable(Of Boolean),  _
                    ByVal ISSHOREBURNED As Global.System.Nullable(Of Boolean),  _
                    ByVal BURNNOTES As String,  _
                    ByVal BURNDATE As Global.System.Nullable(Of Date),  _
                    ByVal THERMOKARSTEVIDENCE As Global.System.Nullable(Of Boolean),  _
                    ByVal THERMOKARSTLOCATION As String,  _
                    ByVal THERMOKARSTEXTENT As String,  _
                    ByVal THERMOKARSTACTIVE As String,  _
                    ByVal THERMOKARSTMATERIAL As String,  _
                    ByVal WOODFROGPRESENT As Global.System.Nullable(Of Boolean),  _
                    ByVal PERCENTCLOUDS As String,  _
                    ByVal WIND As String,  _
                    ByVal PRECIPITATION As String,  _
                    ByVal PRECIPITATIONINTENSITY As String,  _
                    ByVal WEATHERCOMMENTS As String,  _
                    ByVal SITECONDITIONSCOMMENTS As String,  _
                    ByVal BIRD_ANIMAL_ACTIVITY As String,  _
                    ByVal UPLAND_VIERECK_CLASS As String,  _
                    ByVal EMERGENT_VIERECK_CLASS As String,  _
                    ByVal SUBMERGENT_VIERECK_CLASS As String,  _
                    ByVal SUBMERGENT_COVER As String,  _
                    ByVal ELODEA_SURVEYED As String,  _
                    ByVal ELODEA_PRESENT As String,  _
                    ByVal ELODEA_NOTES As String,  _
                    ByVal FISHPRESENT As Global.System.Nullable(Of Boolean),  _
                    ByVal WL_L_TO_S As Global.System.Nullable(Of Double),  _
                    ByVal WL_L_TO_G As Global.System.Nullable(Of Double),  _
                    ByVal WATERLEVEL_CM As Global.System.Nullable(Of Double),  _
                    ByVal MON_MOVED As Global.System.Nullable(Of Boolean),  _
                    ByVal LAKE_LEVEL_NOTES As String,  _
                    ByVal STRATCLASS As String,  _
                    ByVal TURBIDITY_FIELD As Global.System.Nullable(Of Double),  _
                    ByVal EMERGENT_WIDTH As Global.System.Nullable(Of Double),  _
                    ByVal SUBMERGENT_WIDTH As Global.System.Nullable(Of Double),  _
                    ByVal LOONSPRESENT As Global.System.Nullable(Of Boolean),  _
                    ByVal RUSTYBBIRDSPRESENT As Global.System.Nullable(Of Boolean),  _
                    ByVal SDI As Global.System.Nullable(Of Double),  _
                    ByVal LAKEVOLUME_GIS_M3 As Global.System.Nullable(Of Double),  _
                    ByVal LAKEAREA_GIS_M2 As Global.System.Nullable(Of Double),  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_SAMPLEDATE As Date,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAMPLEDATE,Date)
            If (START_TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(START_TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (YEAR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(YEAR.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (CONTMONVISIT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CONTMONVISIT.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (SAMPLEMETHOD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SAMPLEMETHOD,String)
            End If
            If (OBSERVERS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(OBSERVERS,String)
            End If
            If (SECCHIDEPTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SECCHIDEPTH.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (SECCHINOTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SECCHINOTES,String)
            End If
            If (SECCHIONBOTTOM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SECCHIONBOTTOM.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ISSHOREBURNED.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ISSHOREBURNED.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (BURNNOTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(BURNNOTES,String)
            End If
            If (BURNDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(BURNDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (THERMOKARSTEVIDENCE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(THERMOKARSTEVIDENCE.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (THERMOKARSTLOCATION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(THERMOKARSTLOCATION,String)
            End If
            If (THERMOKARSTEXTENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(THERMOKARSTEXTENT,String)
            End If
            If (THERMOKARSTACTIVE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(THERMOKARSTACTIVE,String)
            End If
            If (THERMOKARSTMATERIAL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(THERMOKARSTMATERIAL,String)
            End If
            If (WOODFROGPRESENT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(WOODFROGPRESENT.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (PERCENTCLOUDS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(PERCENTCLOUDS,String)
            End If
            If (WIND Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(WIND,String)
            End If
            If (PRECIPITATION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(PRECIPITATION,String)
            End If
            If (PRECIPITATIONINTENSITY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(PRECIPITATIONINTENSITY,String)
            End If
            If (WEATHERCOMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(WEATHERCOMMENTS,String)
            End If
            If (SITECONDITIONSCOMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(SITECONDITIONSCOMMENTS,String)
            End If
            If (BIRD_ANIMAL_ACTIVITY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(BIRD_ANIMAL_ACTIVITY,String)
            End If
            If (UPLAND_VIERECK_CLASS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(UPLAND_VIERECK_CLASS,String)
            End If
            If (EMERGENT_VIERECK_CLASS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(EMERGENT_VIERECK_CLASS,String)
            End If
            If (SUBMERGENT_VIERECK_CLASS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(SUBMERGENT_VIERECK_CLASS,String)
            End If
            If (SUBMERGENT_COVER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(SUBMERGENT_COVER,String)
            End If
            If (ELODEA_SURVEYED Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(ELODEA_SURVEYED,String)
            End If
            If (ELODEA_PRESENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(ELODEA_PRESENT,String)
            End If
            If (ELODEA_NOTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(ELODEA_NOTES,String)
            End If
            If (FISHPRESENT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(FISHPRESENT.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (WL_L_TO_S.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(WL_L_TO_S.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (WL_L_TO_G.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(WL_L_TO_G.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (WATERLEVEL_CM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(WATERLEVEL_CM.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (MON_MOVED.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(MON_MOVED.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (LAKE_LEVEL_NOTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(LAKE_LEVEL_NOTES,String)
            End If
            If (STRATCLASS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(STRATCLASS,String)
            End If
            If (TURBIDITY_FIELD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(TURBIDITY_FIELD.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (EMERGENT_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(EMERGENT_WIDTH.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (SUBMERGENT_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(SUBMERGENT_WIDTH.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (LOONSPRESENT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(LOONSPRESENT.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (RUSTYBBIRDSPRESENT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(RUSTYBBIRDSPRESENT.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (SDI.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(SDI.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (LAKEVOLUME_GIS_M3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(LAKEVOLUME_GIS_M3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (LAKEAREA_GIS_M2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(LAKEAREA_GIS_M2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(RecordUpdatedBy,String)
            End If
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_SAMPLEDATE,Date)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal START_TIME As Global.System.Nullable(Of Date),  _
                    ByVal YEAR As Global.System.Nullable(Of Integer),  _
                    ByVal CONTMONVISIT As Global.System.Nullable(Of Boolean),  _
                    ByVal SAMPLEMETHOD As String,  _
                    ByVal OBSERVERS As String,  _
                    ByVal SECCHIDEPTH As Global.System.Nullable(Of Double),  _
                    ByVal SECCHINOTES As String,  _
                    ByVal SECCHIONBOTTOM As Global.System.Nullable(Of Boolean),  _
                    ByVal ISSHOREBURNED As Global.System.Nullable(Of Boolean),  _
                    ByVal BURNNOTES As String,  _
                    ByVal BURNDATE As Global.System.Nullable(Of Date),  _
                    ByVal THERMOKARSTEVIDENCE As Global.System.Nullable(Of Boolean),  _
                    ByVal THERMOKARSTLOCATION As String,  _
                    ByVal THERMOKARSTEXTENT As String,  _
                    ByVal THERMOKARSTACTIVE As String,  _
                    ByVal THERMOKARSTMATERIAL As String,  _
                    ByVal WOODFROGPRESENT As Global.System.Nullable(Of Boolean),  _
                    ByVal PERCENTCLOUDS As String,  _
                    ByVal WIND As String,  _
                    ByVal PRECIPITATION As String,  _
                    ByVal PRECIPITATIONINTENSITY As String,  _
                    ByVal WEATHERCOMMENTS As String,  _
                    ByVal SITECONDITIONSCOMMENTS As String,  _
                    ByVal BIRD_ANIMAL_ACTIVITY As String,  _
                    ByVal UPLAND_VIERECK_CLASS As String,  _
                    ByVal EMERGENT_VIERECK_CLASS As String,  _
                    ByVal SUBMERGENT_VIERECK_CLASS As String,  _
                    ByVal SUBMERGENT_COVER As String,  _
                    ByVal ELODEA_SURVEYED As String,  _
                    ByVal ELODEA_PRESENT As String,  _
                    ByVal ELODEA_NOTES As String,  _
                    ByVal FISHPRESENT As Global.System.Nullable(Of Boolean),  _
                    ByVal WL_L_TO_S As Global.System.Nullable(Of Double),  _
                    ByVal WL_L_TO_G As Global.System.Nullable(Of Double),  _
                    ByVal WATERLEVEL_CM As Global.System.Nullable(Of Double),  _
                    ByVal MON_MOVED As Global.System.Nullable(Of Boolean),  _
                    ByVal LAKE_LEVEL_NOTES As String,  _
                    ByVal STRATCLASS As String,  _
                    ByVal TURBIDITY_FIELD As Global.System.Nullable(Of Double),  _
                    ByVal EMERGENT_WIDTH As Global.System.Nullable(Of Double),  _
                    ByVal SUBMERGENT_WIDTH As Global.System.Nullable(Of Double),  _
                    ByVal LOONSPRESENT As Global.System.Nullable(Of Boolean),  _
                    ByVal RUSTYBBIRDSPRESENT As Global.System.Nullable(Of Boolean),  _
                    ByVal SDI As Global.System.Nullable(Of Double),  _
                    ByVal LAKEVOLUME_GIS_M3 As Global.System.Nullable(Of Double),  _
                    ByVal LAKEAREA_GIS_M2 As Global.System.Nullable(Of Double),  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_SAMPLEDATE As Date,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_PONDNAME, Original_SAMPLEDATE, START_TIME, YEAR, CONTMONVISIT, SAMPLEMETHOD, OBSERVERS, SECCHIDEPTH, SECCHINOTES, SECCHIONBOTTOM, ISSHOREBURNED, BURNNOTES, BURNDATE, THERMOKARSTEVIDENCE, THERMOKARSTLOCATION, THERMOKARSTEXTENT, THERMOKARSTACTIVE, THERMOKARSTMATERIAL, WOODFROGPRESENT, PERCENTCLOUDS, WIND, PRECIPITATION, PRECIPITATIONINTENSITY, WEATHERCOMMENTS, SITECONDITIONSCOMMENTS, BIRD_ANIMAL_ACTIVITY, UPLAND_VIERECK_CLASS, EMERGENT_VIERECK_CLASS, SUBMERGENT_VIERECK_CLASS, SUBMERGENT_COVER, ELODEA_SURVEYED, ELODEA_PRESENT, ELODEA_NOTES, FISHPRESENT, WL_L_TO_S, WL_L_TO_G, WATERLEVEL_CM, MON_MOVED, LAKE_LEVEL_NOTES, STRATCLASS, TURBIDITY_FIELD, EMERGENT_WIDTH, SUBMERGENT_WIDTH, LOONSPRESENT, RUSTYBBIRDSPRESENT, SDI, LAKEVOLUME_GIS_M3, LAKEAREA_GIS_M2, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_PONDNAME, Original_SAMPLEDATE, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblFrogMonitorsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblFrogMonitors"
            tableMapping.ColumnMappings.Add("FM_Site", "FM_Site")
            tableMapping.ColumnMappings.Add("FM_Sampledate", "FM_Sampledate")
            tableMapping.ColumnMappings.Add("FM_Sampletime", "FM_Sampletime")
            tableMapping.ColumnMappings.Add("FM_Observers", "FM_Observers")
            tableMapping.ColumnMappings.Add("FM_Deployment", "FM_Deployment")
            tableMapping.ColumnMappings.Add("FM_Retrieval", "FM_Retrieval")
            tableMapping.ColumnMappings.Add("FM_BatteryChange", "FM_BatteryChange")
            tableMapping.ColumnMappings.Add("FM_SDChange", "FM_SDChange")
            tableMapping.ColumnMappings.Add("Notes", "Notes")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblFrogMonitors] ([FM_Site], [FM_Sampledate], [FM_Sampletime],"& _ 
                " [FM_Observers], [FM_Deployment], [FM_Retrieval], [FM_BatteryChange], [FM_SDChan"& _ 
                "ge], [Notes]) VALUES (@FM_Site, @FM_Sampledate, @FM_Sampletime, @FM_Observers, @"& _ 
                "FM_Deployment, @FM_Retrieval, @FM_BatteryChange, @FM_SDChange, @Notes)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FM_Site", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FM_Site", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FM_Sampledate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FM_Sampledate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FM_Sampletime", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FM_Sampletime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FM_Observers", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FM_Observers", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FM_Deployment", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FM_Deployment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FM_Retrieval", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FM_Retrieval", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FM_BatteryChange", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FM_BatteryChange", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FM_SDChange", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FM_SDChange", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FM_Site, FM_Sampledate, FM_Sampletime, FM_Observers, FM_Deployment, FM_Ret"& _ 
                "rieval, FM_BatteryChange, FM_SDChange, Notes, row_timestamp FROM dbo.tblFrogMoni"& _ 
                "tors"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblFrogMonitorsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblFrogMonitorsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblFrogMonitorsDataTable = New AK_ShallowLakesDataSet.tblFrogMonitorsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblFrogMonitorsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblFrogMonitors")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FM_Site As String, ByVal FM_Sampledate As Date, ByVal FM_Sampletime As Global.System.Nullable(Of Global.System.TimeSpan), ByVal FM_Observers As String, ByVal FM_Deployment As Global.System.Nullable(Of Boolean), ByVal FM_Retrieval As Global.System.Nullable(Of Boolean), ByVal FM_BatteryChange As Global.System.Nullable(Of Boolean), ByVal FM_SDChange As Global.System.Nullable(Of Boolean), ByVal Notes As String) As Integer
            If (FM_Site Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FM_Site")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(FM_Site,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FM_Sampledate,Date)
            If (FM_Sampletime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FM_Sampletime.Value,System.TimeSpan)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (FM_Observers Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FM_Observers,String)
            End If
            If (FM_Deployment.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FM_Deployment.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FM_Retrieval.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FM_Retrieval.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (FM_BatteryChange.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(FM_BatteryChange.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (FM_SDChange.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FM_SDChange.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Notes,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblInvertebratesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblInvertebrates"
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("SAMPLEDATE", "SAMPLEDATE")
            tableMapping.ColumnMappings.Add("SAMPLENUMBER", "SAMPLENUMBER")
            tableMapping.ColumnMappings.Add("INVERTID", "INVERTID")
            tableMapping.ColumnMappings.Add("LABSAMPLEID", "LABSAMPLEID")
            tableMapping.ColumnMappings.Add("LABCOUNT", "LABCOUNT")
            tableMapping.ColumnMappings.Add("TAXONSHORT", "TAXONSHORT")
            tableMapping.ColumnMappings.Add("LIFESTAGE", "LIFESTAGE")
            tableMapping.ColumnMappings.Add("LIFESTAGE2", "LIFESTAGE2")
            tableMapping.ColumnMappings.Add("VOUCHER", "VOUCHER")
            tableMapping.ColumnMappings.Add("COMMENTS", "COMMENTS")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            tableMapping.ColumnMappings.Add("TAXA_ID", "TAXA_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblInvertebrates] WHERE (([PONDNAME] = @Original_PONDNAME) AND"& _ 
                " ([SAMPLEDATE] = @Original_SAMPLEDATE) AND ([SAMPLENUMBER] = @Original_SAMPLENUM"& _ 
                "BER) AND ([INVERTID] = @Original_INVERTID) AND ([row_timestamp] = @Original_row_"& _ 
                "timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVERTID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVERTID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblInvertebrates] ([PONDNAME], [SAMPLEDATE], [SAMPLENUMBER], ["& _ 
                "INVERTID], [LABSAMPLEID], [LABCOUNT], [TAXONSHORT], [LIFESTAGE], [LIFESTAGE2], ["& _ 
                "VOUCHER], [COMMENTS], [RecordInsertedDate], [RecordInsertedBy], [RecordUpdatedDa"& _ 
                "te], [RecordUpdatedBy], [TAXA_ID]) VALUES (@PONDNAME, @SAMPLEDATE, @SAMPLENUMBER"& _ 
                ", @INVERTID, @LABSAMPLEID, @LABCOUNT, @TAXONSHORT, @LIFESTAGE, @LIFESTAGE2, @VOU"& _ 
                "CHER, @COMMENTS, @RecordInsertedDate, @RecordInsertedBy, @RecordUpdatedDate, @Re"& _ 
                "cordUpdatedBy, @TAXA_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PONDNAME, SAMPLEDATE, SAMPLENUMBER, INVERTID, "& _ 
                "LABSAMPLEID, LABCOUNT, TAXONSHORT, LIFESTAGE, LIFESTAGE2, VOUCHER, COMMENTS, Rec"& _ 
                "ordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_times"& _ 
                "tamp, TAXA_ID FROM tblInvertebrates WHERE (INVERTID = @INVERTID) AND (PONDNAME ="& _ 
                " @PONDNAME) AND (SAMPLEDATE = @SAMPLEDATE) AND (SAMPLENUMBER = @SAMPLENUMBER)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVERTID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVERTID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LABSAMPLEID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABSAMPLEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LABCOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABCOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXONSHORT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXONSHORT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIFESTAGE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIFESTAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIFESTAGE2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIFESTAGE2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VOUCHER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOUCHER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXA_ID", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblInvertebrates] SET [PONDNAME] = @PONDNAME, [SAMPLEDATE] = @SAMPL"& _ 
                "EDATE, [SAMPLENUMBER] = @SAMPLENUMBER, [INVERTID] = @INVERTID, [LABSAMPLEID] = @"& _ 
                "LABSAMPLEID, [LABCOUNT] = @LABCOUNT, [TAXONSHORT] = @TAXONSHORT, [LIFESTAGE] = @"& _ 
                "LIFESTAGE, [LIFESTAGE2] = @LIFESTAGE2, [VOUCHER] = @VOUCHER, [COMMENTS] = @COMME"& _ 
                "NTS, [RecordInsertedDate] = @RecordInsertedDate, [RecordInsertedBy] = @RecordIns"& _ 
                "ertedBy, [RecordUpdatedDate] = @RecordUpdatedDate, [RecordUpdatedBy] = @RecordUp"& _ 
                "datedBy, [TAXA_ID] = @TAXA_ID WHERE (([PONDNAME] = @Original_PONDNAME) AND ([SAM"& _ 
                "PLEDATE] = @Original_SAMPLEDATE) AND ([SAMPLENUMBER] = @Original_SAMPLENUMBER) A"& _ 
                "ND ([INVERTID] = @Original_INVERTID) AND ([row_timestamp] = @Original_row_timest"& _ 
                "amp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PONDNAME, SAMPLEDATE, SAMPLENUMBER, INVERTID, LABSAMPLEID, LABCOU"& _ 
                "NT, TAXONSHORT, LIFESTAGE, LIFESTAGE2, VOUCHER, COMMENTS, RecordInsertedDate, Re"& _ 
                "cordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp, TAXA_ID FROM "& _ 
                "tblInvertebrates WHERE (INVERTID = @INVERTID) AND (PONDNAME = @PONDNAME) AND (SA"& _ 
                "MPLEDATE = @SAMPLEDATE) AND (SAMPLENUMBER = @SAMPLENUMBER)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVERTID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVERTID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LABSAMPLEID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABSAMPLEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LABCOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABCOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXONSHORT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXONSHORT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIFESTAGE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIFESTAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIFESTAGE2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LIFESTAGE2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VOUCHER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOUCHER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TAXA_ID", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TAXA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVERTID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVERTID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PONDNAME, SAMPLEDATE, SAMPLENUMBER, INVERTID, LABSAMPLEID, LABCOUNT, TAXON"& _ 
                "SHORT, LIFESTAGE, LIFESTAGE2, VOUCHER, COMMENTS, RecordInsertedDate, RecordInser"& _ 
                "tedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp, TAXA_ID FROM dbo.tblIn"& _ 
                "vertebrates"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblInvertebratesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblInvertebratesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblInvertebratesDataTable = New AK_ShallowLakesDataSet.tblInvertebratesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblInvertebratesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblInvertebrates")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PONDNAME As String, ByVal Original_SAMPLEDATE As Date, ByVal Original_SAMPLENUMBER As String, ByVal Original_INVERTID As System.Guid, ByVal Original_row_timestamp() As Byte) As Integer
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SAMPLEDATE,Date)
            If (Original_SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAMPLENUMBER")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SAMPLENUMBER,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_INVERTID,System.Guid)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal INVERTID As System.Guid,  _
                    ByVal LABSAMPLEID As String,  _
                    ByVal LABCOUNT As Global.System.Nullable(Of Integer),  _
                    ByVal TAXONSHORT As String,  _
                    ByVal LIFESTAGE As String,  _
                    ByVal LIFESTAGE2 As String,  _
                    ByVal VOUCHER As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal TAXA_ID As Global.System.Nullable(Of Double)) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAMPLEDATE,Date)
            If (SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAMPLENUMBER")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAMPLENUMBER,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(INVERTID,System.Guid)
            If (LABSAMPLEID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(LABSAMPLEID,String)
            End If
            If (LABCOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(LABCOUNT.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TAXONSHORT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TAXONSHORT,String)
            End If
            If (LIFESTAGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(LIFESTAGE,String)
            End If
            If (LIFESTAGE2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(LIFESTAGE2,String)
            End If
            If (VOUCHER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(VOUCHER,String)
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(COMMENTS,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(RecordUpdatedBy,String)
            End If
            If (TAXA_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(TAXA_ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal INVERTID As System.Guid,  _
                    ByVal LABSAMPLEID As String,  _
                    ByVal LABCOUNT As Global.System.Nullable(Of Integer),  _
                    ByVal TAXONSHORT As String,  _
                    ByVal LIFESTAGE As String,  _
                    ByVal LIFESTAGE2 As String,  _
                    ByVal VOUCHER As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal TAXA_ID As Global.System.Nullable(Of Double),  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_SAMPLEDATE As Date,  _
                    ByVal Original_SAMPLENUMBER As String,  _
                    ByVal Original_INVERTID As System.Guid,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAMPLEDATE,Date)
            If (SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAMPLENUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAMPLENUMBER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(INVERTID,System.Guid)
            If (LABSAMPLEID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(LABSAMPLEID,String)
            End If
            If (LABCOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(LABCOUNT.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TAXONSHORT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TAXONSHORT,String)
            End If
            If (LIFESTAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(LIFESTAGE,String)
            End If
            If (LIFESTAGE2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(LIFESTAGE2,String)
            End If
            If (VOUCHER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(VOUCHER,String)
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(COMMENTS,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(RecordUpdatedBy,String)
            End If
            If (TAXA_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(TAXA_ID.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_SAMPLEDATE,Date)
            If (Original_SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAMPLENUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_SAMPLENUMBER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_INVERTID,System.Guid)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LABSAMPLEID As String,  _
                    ByVal LABCOUNT As Global.System.Nullable(Of Integer),  _
                    ByVal TAXONSHORT As String,  _
                    ByVal LIFESTAGE As String,  _
                    ByVal LIFESTAGE2 As String,  _
                    ByVal VOUCHER As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal TAXA_ID As Global.System.Nullable(Of Double),  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_SAMPLEDATE As Date,  _
                    ByVal Original_SAMPLENUMBER As String,  _
                    ByVal Original_INVERTID As System.Guid,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_PONDNAME, Original_SAMPLEDATE, Original_SAMPLENUMBER, Original_INVERTID, LABSAMPLEID, LABCOUNT, TAXONSHORT, LIFESTAGE, LIFESTAGE2, VOUCHER, COMMENTS, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, TAXA_ID, Original_PONDNAME, Original_SAMPLEDATE, Original_SAMPLENUMBER, Original_INVERTID, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblInvertebrateSamplesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblInvertebrateSamples"
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("SAMPLEDATE", "SAMPLEDATE")
            tableMapping.ColumnMappings.Add("SAMPLENUMBER", "SAMPLENUMBER")
            tableMapping.ColumnMappings.Add("LABSAMPLEID", "LABSAMPLEID")
            tableMapping.ColumnMappings.Add("TRANSECTNUMBER", "TRANSECTNUMBER")
            tableMapping.ColumnMappings.Add("SAMPLECOLLECTORS", "SAMPLECOLLECTORS")
            tableMapping.ColumnMappings.Add("STANDARDIZEDSWEEP", "STANDARDIZEDSWEEP")
            tableMapping.ColumnMappings.Add("QUALITATIVESURVEY", "QUALITATIVESURVEY")
            tableMapping.ColumnMappings.Add("DOMINANTHABITAT", "DOMINANTHABITAT")
            tableMapping.ColumnMappings.Add("WATERDEPTH", "WATERDEPTH")
            tableMapping.ColumnMappings.Add("DISTANCETOSHORE", "DISTANCETOSHORE")
            tableMapping.ColumnMappings.Add("NUM_OF_BOTTLES", "NUM_OF_BOTTLES")
            tableMapping.ColumnMappings.Add("FRACTIONANALYZED", "FRACTIONANALYZED")
            tableMapping.ColumnMappings.Add("COMMENTS", "COMMENTS")
            tableMapping.ColumnMappings.Add("QUALITATIVESAMPLEHABITATDESCRIPTION", "QUALITATIVESAMPLEHABITATDESCRIPTION")
            tableMapping.ColumnMappings.Add("HABITATDESCRIPTION", "HABITATDESCRIPTION")
            tableMapping.ColumnMappings.Add("SOURCEDB", "SOURCEDB")
            tableMapping.ColumnMappings.Add("SHIPPING_DATE", "SHIPPING_DATE")
            tableMapping.ColumnMappings.Add("SHIPPING_INFO", "SHIPPING_INFO")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblInvertebrateSamples] WHERE (([PONDNAME] = @Original_PONDNAM"& _ 
                "E) AND ([SAMPLEDATE] = @Original_SAMPLEDATE) AND ([SAMPLENUMBER] = @Original_SAM"& _ 
                "PLENUMBER) AND ([row_timestamp] = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblInvertebrateSamples] ([PONDNAME], [SAMPLEDATE], [SAMPLENUMB"& _ 
                "ER], [LABSAMPLEID], [TRANSECTNUMBER], [SAMPLECOLLECTORS], [STANDARDIZEDSWEEP], ["& _ 
                "QUALITATIVESURVEY], [DOMINANTHABITAT], [WATERDEPTH], [DISTANCETOSHORE], [NUM_OF_"& _ 
                "BOTTLES], [FRACTIONANALYZED], [COMMENTS], [QUALITATIVESAMPLEHABITATDESCRIPTION],"& _ 
                " [HABITATDESCRIPTION], [SOURCEDB], [SHIPPING_DATE], [SHIPPING_INFO], [RecordInse"& _ 
                "rtedDate], [RecordInsertedBy], [RecordUpdatedDate], [RecordUpdatedBy]) VALUES (@"& _ 
                "PONDNAME, @SAMPLEDATE, @SAMPLENUMBER, @LABSAMPLEID, @TRANSECTNUMBER, @SAMPLECOLL"& _ 
                "ECTORS, @STANDARDIZEDSWEEP, @QUALITATIVESURVEY, @DOMINANTHABITAT, @WATERDEPTH, @"& _ 
                "DISTANCETOSHORE, @NUM_OF_BOTTLES, @FRACTIONANALYZED, @COMMENTS, @QUALITATIVESAMP"& _ 
                "LEHABITATDESCRIPTION, @HABITATDESCRIPTION, @SOURCEDB, @SHIPPING_DATE, @SHIPPING_"& _ 
                "INFO, @RecordInsertedDate, @RecordInsertedBy, @RecordUpdatedDate, @RecordUpdated"& _ 
                "By);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PONDNAME, SAMPLEDATE, SAMPLENUMBER, LABSAMPLEID, TRANSECTNUMBER, SA"& _ 
                "MPLECOLLECTORS, STANDARDIZEDSWEEP, QUALITATIVESURVEY, DOMINANTHABITAT, WATERDEPT"& _ 
                "H, DISTANCETOSHORE, NUM_OF_BOTTLES, FRACTIONANALYZED, COMMENTS, QUALITATIVESAMPL"& _ 
                "EHABITATDESCRIPTION, HABITATDESCRIPTION, SOURCEDB, SHIPPING_DATE, SHIPPING_INFO,"& _ 
                " RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_t"& _ 
                "imestamp FROM tblInvertebrateSamples WHERE (PONDNAME = @PONDNAME) AND (SAMPLEDAT"& _ 
                "E = @SAMPLEDATE) AND (SAMPLENUMBER = @SAMPLENUMBER)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LABSAMPLEID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABSAMPLEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSECTNUMBER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSECTNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLECOLLECTORS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLECOLLECTORS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STANDARDIZEDSWEEP", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STANDARDIZEDSWEEP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUALITATIVESURVEY", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUALITATIVESURVEY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOMINANTHABITAT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOMINANTHABITAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WATERDEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WATERDEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISTANCETOSHORE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISTANCETOSHORE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_OF_BOTTLES", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "NUM_OF_BOTTLES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FRACTIONANALYZED", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FRACTIONANALYZED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUALITATIVESAMPLEHABITATDESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUALITATIVESAMPLEHABITATDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HABITATDESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HABITATDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCEDB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEDB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPPING_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPPING_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPPING_INFO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPPING_INFO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblInvertebrateSamples] SET [PONDNAME] = @PONDNAME, [SAMPLEDATE] = "& _ 
                "@SAMPLEDATE, [SAMPLENUMBER] = @SAMPLENUMBER, [LABSAMPLEID] = @LABSAMPLEID, [TRAN"& _ 
                "SECTNUMBER] = @TRANSECTNUMBER, [SAMPLECOLLECTORS] = @SAMPLECOLLECTORS, [STANDARD"& _ 
                "IZEDSWEEP] = @STANDARDIZEDSWEEP, [QUALITATIVESURVEY] = @QUALITATIVESURVEY, [DOMI"& _ 
                "NANTHABITAT] = @DOMINANTHABITAT, [WATERDEPTH] = @WATERDEPTH, [DISTANCETOSHORE] ="& _ 
                " @DISTANCETOSHORE, [NUM_OF_BOTTLES] = @NUM_OF_BOTTLES, [FRACTIONANALYZED] = @FRA"& _ 
                "CTIONANALYZED, [COMMENTS] = @COMMENTS, [QUALITATIVESAMPLEHABITATDESCRIPTION] = @"& _ 
                "QUALITATIVESAMPLEHABITATDESCRIPTION, [HABITATDESCRIPTION] = @HABITATDESCRIPTION,"& _ 
                " [SOURCEDB] = @SOURCEDB, [SHIPPING_DATE] = @SHIPPING_DATE, [SHIPPING_INFO] = @SH"& _ 
                "IPPING_INFO, [RecordInsertedDate] = @RecordInsertedDate, [RecordInsertedBy] = @R"& _ 
                "ecordInsertedBy, [RecordUpdatedDate] = @RecordUpdatedDate, [RecordUpdatedBy] = @"& _ 
                "RecordUpdatedBy WHERE (([PONDNAME] = @Original_PONDNAME) AND ([SAMPLEDATE] = @Or"& _ 
                "iginal_SAMPLEDATE) AND ([SAMPLENUMBER] = @Original_SAMPLENUMBER) AND ([row_times"& _ 
                "tamp] = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PONDNAME, SAMPLEDATE, SAMPLENUMBER, L"& _ 
                "ABSAMPLEID, TRANSECTNUMBER, SAMPLECOLLECTORS, STANDARDIZEDSWEEP, QUALITATIVESURV"& _ 
                "EY, DOMINANTHABITAT, WATERDEPTH, DISTANCETOSHORE, NUM_OF_BOTTLES, FRACTIONANALYZ"& _ 
                "ED, COMMENTS, QUALITATIVESAMPLEHABITATDESCRIPTION, HABITATDESCRIPTION, SOURCEDB,"& _ 
                " SHIPPING_DATE, SHIPPING_INFO, RecordInsertedDate, RecordInsertedBy, RecordUpdat"& _ 
                "edDate, RecordUpdatedBy, row_timestamp FROM tblInvertebrateSamples WHERE (PONDNA"& _ 
                "ME = @PONDNAME) AND (SAMPLEDATE = @SAMPLEDATE) AND (SAMPLENUMBER = @SAMPLENUMBER"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LABSAMPLEID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABSAMPLEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSECTNUMBER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSECTNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLECOLLECTORS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLECOLLECTORS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STANDARDIZEDSWEEP", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STANDARDIZEDSWEEP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUALITATIVESURVEY", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUALITATIVESURVEY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOMINANTHABITAT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOMINANTHABITAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WATERDEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WATERDEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISTANCETOSHORE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISTANCETOSHORE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_OF_BOTTLES", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "NUM_OF_BOTTLES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FRACTIONANALYZED", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FRACTIONANALYZED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUALITATIVESAMPLEHABITATDESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUALITATIVESAMPLEHABITATDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HABITATDESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HABITATDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCEDB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEDB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPPING_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPPING_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPPING_INFO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPPING_INFO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PONDNAME, SAMPLEDATE, SAMPLENUMBER, LABSAMPLEID, TRANSECTNUMBER, SAMPLECOL"& _ 
                "LECTORS, STANDARDIZEDSWEEP, QUALITATIVESURVEY, DOMINANTHABITAT, WATERDEPTH, DIST"& _ 
                "ANCETOSHORE, NUM_OF_BOTTLES, FRACTIONANALYZED, COMMENTS, QUALITATIVESAMPLEHABITA"& _ 
                "TDESCRIPTION, HABITATDESCRIPTION, SOURCEDB, SHIPPING_DATE, SHIPPING_INFO, Record"& _ 
                "InsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestam"& _ 
                "p FROM dbo.tblInvertebrateSamples"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblInvertebrateSamplesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblInvertebrateSamplesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblInvertebrateSamplesDataTable = New AK_ShallowLakesDataSet.tblInvertebrateSamplesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblInvertebrateSamplesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblInvertebrateSamples")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PONDNAME As String, ByVal Original_SAMPLEDATE As Date, ByVal Original_SAMPLENUMBER As String, ByVal Original_row_timestamp() As Byte) As Integer
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SAMPLEDATE,Date)
            If (Original_SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAMPLENUMBER")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SAMPLENUMBER,String)
            End If
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal LABSAMPLEID As String,  _
                    ByVal TRANSECTNUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal SAMPLECOLLECTORS As String,  _
                    ByVal STANDARDIZEDSWEEP As Global.System.Nullable(Of Boolean),  _
                    ByVal QUALITATIVESURVEY As Global.System.Nullable(Of Boolean),  _
                    ByVal DOMINANTHABITAT As String,  _
                    ByVal WATERDEPTH As Global.System.Nullable(Of Double),  _
                    ByVal DISTANCETOSHORE As Global.System.Nullable(Of Double),  _
                    ByVal NUM_OF_BOTTLES As Global.System.Nullable(Of Decimal),  _
                    ByVal FRACTIONANALYZED As Global.System.Nullable(Of Double),  _
                    ByVal COMMENTS As String,  _
                    ByVal QUALITATIVESAMPLEHABITATDESCRIPTION As String,  _
                    ByVal HABITATDESCRIPTION As String,  _
                    ByVal SOURCEDB As String,  _
                    ByVal SHIPPING_DATE As Global.System.Nullable(Of Date),  _
                    ByVal SHIPPING_INFO As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAMPLEDATE,Date)
            If (SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAMPLENUMBER")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAMPLENUMBER,String)
            End If
            If (LABSAMPLEID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LABSAMPLEID,String)
            End If
            If (TRANSECTNUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TRANSECTNUMBER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (SAMPLECOLLECTORS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SAMPLECOLLECTORS,String)
            End If
            If (STANDARDIZEDSWEEP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(STANDARDIZEDSWEEP.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (QUALITATIVESURVEY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(QUALITATIVESURVEY.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (DOMINANTHABITAT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(DOMINANTHABITAT,String)
            End If
            If (WATERDEPTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(WATERDEPTH.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (DISTANCETOSHORE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(DISTANCETOSHORE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (NUM_OF_BOTTLES.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(NUM_OF_BOTTLES.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (FRACTIONANALYZED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(FRACTIONANALYZED.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(COMMENTS,String)
            End If
            If (QUALITATIVESAMPLEHABITATDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(QUALITATIVESAMPLEHABITATDESCRIPTION,String)
            End If
            If (HABITATDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(HABITATDESCRIPTION,String)
            End If
            If (SOURCEDB Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(SOURCEDB,String)
            End If
            If (SHIPPING_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(SHIPPING_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (SHIPPING_INFO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(SHIPPING_INFO,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal LABSAMPLEID As String,  _
                    ByVal TRANSECTNUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal SAMPLECOLLECTORS As String,  _
                    ByVal STANDARDIZEDSWEEP As Global.System.Nullable(Of Boolean),  _
                    ByVal QUALITATIVESURVEY As Global.System.Nullable(Of Boolean),  _
                    ByVal DOMINANTHABITAT As String,  _
                    ByVal WATERDEPTH As Global.System.Nullable(Of Double),  _
                    ByVal DISTANCETOSHORE As Global.System.Nullable(Of Double),  _
                    ByVal NUM_OF_BOTTLES As Global.System.Nullable(Of Decimal),  _
                    ByVal FRACTIONANALYZED As Global.System.Nullable(Of Double),  _
                    ByVal COMMENTS As String,  _
                    ByVal QUALITATIVESAMPLEHABITATDESCRIPTION As String,  _
                    ByVal HABITATDESCRIPTION As String,  _
                    ByVal SOURCEDB As String,  _
                    ByVal SHIPPING_DATE As Global.System.Nullable(Of Date),  _
                    ByVal SHIPPING_INFO As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_SAMPLEDATE As Date,  _
                    ByVal Original_SAMPLENUMBER As String,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAMPLEDATE,Date)
            If (SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAMPLENUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAMPLENUMBER,String)
            End If
            If (LABSAMPLEID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LABSAMPLEID,String)
            End If
            If (TRANSECTNUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TRANSECTNUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (SAMPLECOLLECTORS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SAMPLECOLLECTORS,String)
            End If
            If (STANDARDIZEDSWEEP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(STANDARDIZEDSWEEP.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (QUALITATIVESURVEY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(QUALITATIVESURVEY.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (DOMINANTHABITAT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(DOMINANTHABITAT,String)
            End If
            If (WATERDEPTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(WATERDEPTH.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (DISTANCETOSHORE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(DISTANCETOSHORE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (NUM_OF_BOTTLES.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(NUM_OF_BOTTLES.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (FRACTIONANALYZED.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(FRACTIONANALYZED.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(COMMENTS,String)
            End If
            If (QUALITATIVESAMPLEHABITATDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(QUALITATIVESAMPLEHABITATDESCRIPTION,String)
            End If
            If (HABITATDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(HABITATDESCRIPTION,String)
            End If
            If (SOURCEDB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(SOURCEDB,String)
            End If
            If (SHIPPING_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(SHIPPING_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (SHIPPING_INFO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(SHIPPING_INFO,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(RecordUpdatedBy,String)
            End If
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_SAMPLEDATE,Date)
            If (Original_SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAMPLENUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_SAMPLENUMBER,String)
            End If
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LABSAMPLEID As String,  _
                    ByVal TRANSECTNUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal SAMPLECOLLECTORS As String,  _
                    ByVal STANDARDIZEDSWEEP As Global.System.Nullable(Of Boolean),  _
                    ByVal QUALITATIVESURVEY As Global.System.Nullable(Of Boolean),  _
                    ByVal DOMINANTHABITAT As String,  _
                    ByVal WATERDEPTH As Global.System.Nullable(Of Double),  _
                    ByVal DISTANCETOSHORE As Global.System.Nullable(Of Double),  _
                    ByVal NUM_OF_BOTTLES As Global.System.Nullable(Of Decimal),  _
                    ByVal FRACTIONANALYZED As Global.System.Nullable(Of Double),  _
                    ByVal COMMENTS As String,  _
                    ByVal QUALITATIVESAMPLEHABITATDESCRIPTION As String,  _
                    ByVal HABITATDESCRIPTION As String,  _
                    ByVal SOURCEDB As String,  _
                    ByVal SHIPPING_DATE As Global.System.Nullable(Of Date),  _
                    ByVal SHIPPING_INFO As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_SAMPLEDATE As Date,  _
                    ByVal Original_SAMPLENUMBER As String,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_PONDNAME, Original_SAMPLEDATE, Original_SAMPLENUMBER, LABSAMPLEID, TRANSECTNUMBER, SAMPLECOLLECTORS, STANDARDIZEDSWEEP, QUALITATIVESURVEY, DOMINANTHABITAT, WATERDEPTH, DISTANCETOSHORE, NUM_OF_BOTTLES, FRACTIONANALYZED, COMMENTS, QUALITATIVESAMPLEHABITATDESCRIPTION, HABITATDESCRIPTION, SOURCEDB, SHIPPING_DATE, SHIPPING_INFO, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_PONDNAME, Original_SAMPLEDATE, Original_SAMPLENUMBER, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblLoonsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblLoons"
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("SAMPLEDATE", "SAMPLEDATE")
            tableMapping.ColumnMappings.Add("LOONID", "LOONID")
            tableMapping.ColumnMappings.Add("OBSERVER", "OBSERVER")
            tableMapping.ColumnMappings.Add("SPECIES", "SPECIES")
            tableMapping.ColumnMappings.Add("NUM_ADULTS", "NUM_ADULTS")
            tableMapping.ColumnMappings.Add("NUM_YOUNG", "NUM_YOUNG")
            tableMapping.ColumnMappings.Add("DETECTION_TYPE", "DETECTION_TYPE")
            tableMapping.ColumnMappings.Add("VEG_TYPE", "VEG_TYPE")
            tableMapping.ColumnMappings.Add("LATITUDE", "LATITUDE")
            tableMapping.ColumnMappings.Add("LONGITUDE", "LONGITUDE")
            tableMapping.ColumnMappings.Add("COMMENTS", "COMMENTS")
            tableMapping.ColumnMappings.Add("SOURCE", "SOURCE")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("LoonsID", "LoonsID")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblLoons] WHERE (([LoonsID] = @Original_LoonsID) AND ([row_tim"& _ 
                "estamp] = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LoonsID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoonsID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblLoons] ([PONDNAME], [SAMPLEDATE], [LOONID], [OBSERVER], [SP"& _ 
                "ECIES], [NUM_ADULTS], [NUM_YOUNG], [DETECTION_TYPE], [VEG_TYPE], [LATITUDE], [LO"& _ 
                "NGITUDE], [COMMENTS], [SOURCE], [RecordInsertedDate], [RecordInsertedBy], [Recor"& _ 
                "dUpdatedDate], [RecordUpdatedBy]) VALUES (@PONDNAME, @SAMPLEDATE, @LOONID, @OBSE"& _ 
                "RVER, @SPECIES, @NUM_ADULTS, @NUM_YOUNG, @DETECTION_TYPE, @VEG_TYPE, @LATITUDE, "& _ 
                "@LONGITUDE, @COMMENTS, @SOURCE, @RecordInsertedDate, @RecordInsertedBy, @RecordU"& _ 
                "pdatedDate, @RecordUpdatedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PONDNAME, SAMPLEDATE, LOONID, OBSERVER, S"& _ 
                "PECIES, NUM_ADULTS, NUM_YOUNG, DETECTION_TYPE, VEG_TYPE, LATITUDE, LONGITUDE, CO"& _ 
                "MMENTS, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordU"& _ 
                "pdatedBy, LoonsID, row_timestamp FROM tblLoons WHERE (LoonsID = SCOPE_IDENTITY()"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOONID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOONID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OBSERVER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBSERVER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_ADULTS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_ADULTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_YOUNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_YOUNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DETECTION_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DETECTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VEG_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VEG_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LATITUDE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LATITUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LONGITUDE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LONGITUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblLoons] SET [PONDNAME] = @PONDNAME, [SAMPLEDATE] = @SAMPLEDATE, ["& _ 
                "LOONID] = @LOONID, [OBSERVER] = @OBSERVER, [SPECIES] = @SPECIES, [NUM_ADULTS] = "& _ 
                "@NUM_ADULTS, [NUM_YOUNG] = @NUM_YOUNG, [DETECTION_TYPE] = @DETECTION_TYPE, [VEG_"& _ 
                "TYPE] = @VEG_TYPE, [LATITUDE] = @LATITUDE, [LONGITUDE] = @LONGITUDE, [COMMENTS] "& _ 
                "= @COMMENTS, [SOURCE] = @SOURCE, [RecordInsertedDate] = @RecordInsertedDate, [Re"& _ 
                "cordInsertedBy] = @RecordInsertedBy, [RecordUpdatedDate] = @RecordUpdatedDate, ["& _ 
                "RecordUpdatedBy] = @RecordUpdatedBy WHERE (([LoonsID] = @Original_LoonsID) AND ("& _ 
                "[row_timestamp] = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PONDNAME, SAMPLEDATE, LOONI"& _ 
                "D, OBSERVER, SPECIES, NUM_ADULTS, NUM_YOUNG, DETECTION_TYPE, VEG_TYPE, LATITUDE,"& _ 
                " LONGITUDE, COMMENTS, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpdate"& _ 
                "dDate, RecordUpdatedBy, LoonsID, row_timestamp FROM tblLoons WHERE (LoonsID = @L"& _ 
                "oonsID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOONID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOONID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OBSERVER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBSERVER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_ADULTS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_ADULTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NUM_YOUNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NUM_YOUNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DETECTION_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DETECTION_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VEG_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VEG_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LATITUDE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LATITUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LONGITUDE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LONGITUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LoonsID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LoonsID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LoonsID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LoonsID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PONDNAME, SAMPLEDATE, LOONID, OBSERVER, SPECIES, NUM_ADULTS, NUM_YOUNG, DE"& _ 
                "TECTION_TYPE, VEG_TYPE, LATITUDE, LONGITUDE, COMMENTS, SOURCE, RecordInsertedDat"& _ 
                "e, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, LoonsID, row_timestamp "& _ 
                "FROM dbo.tblLoons"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblLoonsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblLoonsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblLoonsDataTable = New AK_ShallowLakesDataSet.tblLoonsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblLoonsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblLoons")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_LoonsID As Integer, ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_LoonsID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal LOONID As Long,  _
                    ByVal OBSERVER As String,  _
                    ByVal SPECIES As String,  _
                    ByVal NUM_ADULTS As Global.System.Nullable(Of Integer),  _
                    ByVal NUM_YOUNG As Global.System.Nullable(Of Integer),  _
                    ByVal DETECTION_TYPE As String,  _
                    ByVal VEG_TYPE As String,  _
                    ByVal LATITUDE As Global.System.Nullable(Of Double),  _
                    ByVal LONGITUDE As Global.System.Nullable(Of Double),  _
                    ByVal COMMENTS As String,  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAMPLEDATE,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(LOONID,Long)
            If (OBSERVER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(OBSERVER,String)
            End If
            If (SPECIES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SPECIES,String)
            End If
            If (NUM_ADULTS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(NUM_ADULTS.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (NUM_YOUNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(NUM_YOUNG.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DETECTION_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DETECTION_TYPE,String)
            End If
            If (VEG_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(VEG_TYPE,String)
            End If
            If (LATITUDE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(LATITUDE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LONGITUDE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(LONGITUDE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(COMMENTS,String)
            End If
            If (SOURCE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(SOURCE,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal LOONID As Long,  _
                    ByVal OBSERVER As String,  _
                    ByVal SPECIES As String,  _
                    ByVal NUM_ADULTS As Global.System.Nullable(Of Integer),  _
                    ByVal NUM_YOUNG As Global.System.Nullable(Of Integer),  _
                    ByVal DETECTION_TYPE As String,  _
                    ByVal VEG_TYPE As String,  _
                    ByVal LATITUDE As Global.System.Nullable(Of Double),  _
                    ByVal LONGITUDE As Global.System.Nullable(Of Double),  _
                    ByVal COMMENTS As String,  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_LoonsID As Integer,  _
                    ByVal Original_row_timestamp() As Byte,  _
                    ByVal LoonsID As Integer) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAMPLEDATE,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LOONID,Long)
            If (OBSERVER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(OBSERVER,String)
            End If
            If (SPECIES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SPECIES,String)
            End If
            If (NUM_ADULTS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(NUM_ADULTS.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (NUM_YOUNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(NUM_YOUNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DETECTION_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(DETECTION_TYPE,String)
            End If
            If (VEG_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(VEG_TYPE,String)
            End If
            If (LATITUDE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(LATITUDE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LONGITUDE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(LONGITUDE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(COMMENTS,String)
            End If
            If (SOURCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(SOURCE,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(RecordUpdatedBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_LoonsID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_row_timestamp,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(LoonsID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal LOONID As Long,  _
                    ByVal OBSERVER As String,  _
                    ByVal SPECIES As String,  _
                    ByVal NUM_ADULTS As Global.System.Nullable(Of Integer),  _
                    ByVal NUM_YOUNG As Global.System.Nullable(Of Integer),  _
                    ByVal DETECTION_TYPE As String,  _
                    ByVal VEG_TYPE As String,  _
                    ByVal LATITUDE As Global.System.Nullable(Of Double),  _
                    ByVal LONGITUDE As Global.System.Nullable(Of Double),  _
                    ByVal COMMENTS As String,  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_LoonsID As Integer,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(PONDNAME, SAMPLEDATE, LOONID, OBSERVER, SPECIES, NUM_ADULTS, NUM_YOUNG, DETECTION_TYPE, VEG_TYPE, LATITUDE, LONGITUDE, COMMENTS, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_LoonsID, Original_row_timestamp, Original_LoonsID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblMonumentsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblMonuments"
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("M_DATE", "M_DATE")
            tableMapping.ColumnMappings.Add("M_LAT_NAD83", "M_LAT_NAD83")
            tableMapping.ColumnMappings.Add("M_LON_NAD83", "M_LON_NAD83")
            tableMapping.ColumnMappings.Add("M_LAT_WGS84", "M_LAT_WGS84")
            tableMapping.ColumnMappings.Add("M_LON_WGS84", "M_LON_WGS84")
            tableMapping.ColumnMappings.Add("M_ELEVATION", "M_ELEVATION")
            tableMapping.ColumnMappings.Add("M_LOC_TYPE", "M_LOC_TYPE")
            tableMapping.ColumnMappings.Add("M_LOC_MATERIAL", "M_LOC_MATERIAL")
            tableMapping.ColumnMappings.Add("M_LOC_NOTES", "M_LOC_NOTES")
            tableMapping.ColumnMappings.Add("M_LOC_COMMENTS", "M_LOC_COMMENTS")
            tableMapping.ColumnMappings.Add("M_ACCESSTYPE", "M_ACCESSTYPE")
            tableMapping.ColumnMappings.Add("M_GRTS_NUM", "M_GRTS_NUM")
            tableMapping.ColumnMappings.Add("M_GPSTYPE", "M_GPSTYPE")
            tableMapping.ColumnMappings.Add("M_GPSTIME", "M_GPSTIME")
            tableMapping.ColumnMappings.Add("M_CORR_TYPE", "M_CORR_TYPE")
            tableMapping.ColumnMappings.Add("M_EST_H_ERROR", "M_EST_H_ERROR")
            tableMapping.ColumnMappings.Add("M_EST_V_ERROR", "M_EST_V_ERROR")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblMonuments] WHERE (([PONDNAME] = @Original_PONDNAME) AND ([M"& _ 
                "_DATE] = @Original_M_DATE) AND ([row_timestamp] = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_M_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblMonuments] ([PONDNAME], [M_DATE], [M_LAT_NAD83], [M_LON_NAD"& _ 
                "83], [M_LAT_WGS84], [M_LON_WGS84], [M_ELEVATION], [M_LOC_TYPE], [M_LOC_MATERIAL]"& _ 
                ", [M_LOC_NOTES], [M_LOC_COMMENTS], [M_ACCESSTYPE], [M_GRTS_NUM], [M_GPSTYPE], [M"& _ 
                "_GPSTIME], [M_CORR_TYPE], [M_EST_H_ERROR], [M_EST_V_ERROR]) VALUES (@PONDNAME, @"& _ 
                "M_DATE, @M_LAT_NAD83, @M_LON_NAD83, @M_LAT_WGS84, @M_LON_WGS84, @M_ELEVATION, @M"& _ 
                "_LOC_TYPE, @M_LOC_MATERIAL, @M_LOC_NOTES, @M_LOC_COMMENTS, @M_ACCESSTYPE, @M_GRT"& _ 
                "S_NUM, @M_GPSTYPE, @M_GPSTIME, @M_CORR_TYPE, @M_EST_H_ERROR, @M_EST_V_ERROR);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"S"& _ 
                "ELECT PONDNAME, M_DATE, M_LAT_NAD83, M_LON_NAD83, M_LAT_WGS84, M_LON_WGS84, M_EL"& _ 
                "EVATION, M_LOC_TYPE, M_LOC_MATERIAL, M_LOC_NOTES, M_LOC_COMMENTS, M_ACCESSTYPE, "& _ 
                "M_GRTS_NUM, M_GPSTYPE, M_GPSTIME, M_CORR_TYPE, M_EST_H_ERROR, M_EST_V_ERROR, row"& _ 
                "_timestamp FROM tblMonuments WHERE (M_DATE = @M_DATE) AND (PONDNAME = @PONDNAME)"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LAT_NAD83", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LAT_NAD83", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LON_NAD83", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LON_NAD83", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LAT_WGS84", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LAT_WGS84", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LON_WGS84", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LON_WGS84", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_ELEVATION", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_ELEVATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LOC_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LOC_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LOC_MATERIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LOC_MATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LOC_NOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LOC_NOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LOC_COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LOC_COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_ACCESSTYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_ACCESSTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_GRTS_NUM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_GRTS_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_GPSTYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_GPSTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_GPSTIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_GPSTIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_CORR_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_CORR_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_EST_H_ERROR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_EST_H_ERROR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_EST_V_ERROR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_EST_V_ERROR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblMonuments] SET [PONDNAME] = @PONDNAME, [M_DATE] = @M_DATE, [M_LA"& _ 
                "T_NAD83] = @M_LAT_NAD83, [M_LON_NAD83] = @M_LON_NAD83, [M_LAT_WGS84] = @M_LAT_WG"& _ 
                "S84, [M_LON_WGS84] = @M_LON_WGS84, [M_ELEVATION] = @M_ELEVATION, [M_LOC_TYPE] = "& _ 
                "@M_LOC_TYPE, [M_LOC_MATERIAL] = @M_LOC_MATERIAL, [M_LOC_NOTES] = @M_LOC_NOTES, ["& _ 
                "M_LOC_COMMENTS] = @M_LOC_COMMENTS, [M_ACCESSTYPE] = @M_ACCESSTYPE, [M_GRTS_NUM] "& _ 
                "= @M_GRTS_NUM, [M_GPSTYPE] = @M_GPSTYPE, [M_GPSTIME] = @M_GPSTIME, [M_CORR_TYPE]"& _ 
                " = @M_CORR_TYPE, [M_EST_H_ERROR] = @M_EST_H_ERROR, [M_EST_V_ERROR] = @M_EST_V_ER"& _ 
                "ROR WHERE (([PONDNAME] = @Original_PONDNAME) AND ([M_DATE] = @Original_M_DATE) A"& _ 
                "ND ([row_timestamp] = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PONDNAME, M_DATE, M_LAT"& _ 
                "_NAD83, M_LON_NAD83, M_LAT_WGS84, M_LON_WGS84, M_ELEVATION, M_LOC_TYPE, M_LOC_MA"& _ 
                "TERIAL, M_LOC_NOTES, M_LOC_COMMENTS, M_ACCESSTYPE, M_GRTS_NUM, M_GPSTYPE, M_GPST"& _ 
                "IME, M_CORR_TYPE, M_EST_H_ERROR, M_EST_V_ERROR, row_timestamp FROM tblMonuments "& _ 
                "WHERE (M_DATE = @M_DATE) AND (PONDNAME = @PONDNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LAT_NAD83", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LAT_NAD83", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LON_NAD83", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LON_NAD83", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LAT_WGS84", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LAT_WGS84", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LON_WGS84", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LON_WGS84", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_ELEVATION", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_ELEVATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LOC_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LOC_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LOC_MATERIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LOC_MATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LOC_NOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LOC_NOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_LOC_COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_LOC_COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_ACCESSTYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_ACCESSTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_GRTS_NUM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_GRTS_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_GPSTYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_GPSTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_GPSTIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_GPSTIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_CORR_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_CORR_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_EST_H_ERROR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_EST_H_ERROR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@M_EST_V_ERROR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_EST_V_ERROR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_M_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "M_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PONDNAME, M_DATE, M_LAT_NAD83, M_LON_NAD83, M_LAT_WGS84, M_LON_WGS84, M_EL"& _ 
                "EVATION, M_LOC_TYPE, M_LOC_MATERIAL, M_LOC_NOTES, M_LOC_COMMENTS, M_ACCESSTYPE, "& _ 
                "M_GRTS_NUM, M_GPSTYPE, M_GPSTIME, M_CORR_TYPE, M_EST_H_ERROR, M_EST_V_ERROR, row"& _ 
                "_timestamp FROM dbo.tblMonuments"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblMonumentsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblMonumentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblMonumentsDataTable = New AK_ShallowLakesDataSet.tblMonumentsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblMonumentsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblMonuments")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PONDNAME As String, ByVal Original_M_DATE As Date, ByVal Original_row_timestamp() As Byte) As Integer
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_M_DATE,Date)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PONDNAME As String,  _
                    ByVal M_DATE As Date,  _
                    ByVal M_LAT_NAD83 As Global.System.Nullable(Of Double),  _
                    ByVal M_LON_NAD83 As Global.System.Nullable(Of Double),  _
                    ByVal M_LAT_WGS84 As Global.System.Nullable(Of Double),  _
                    ByVal M_LON_WGS84 As Global.System.Nullable(Of Double),  _
                    ByVal M_ELEVATION As Global.System.Nullable(Of Double),  _
                    ByVal M_LOC_TYPE As String,  _
                    ByVal M_LOC_MATERIAL As String,  _
                    ByVal M_LOC_NOTES As String,  _
                    ByVal M_LOC_COMMENTS As String,  _
                    ByVal M_ACCESSTYPE As String,  _
                    ByVal M_GRTS_NUM As String,  _
                    ByVal M_GPSTYPE As String,  _
                    ByVal M_GPSTIME As Global.System.Nullable(Of Date),  _
                    ByVal M_CORR_TYPE As String,  _
                    ByVal M_EST_H_ERROR As Global.System.Nullable(Of Double),  _
                    ByVal M_EST_V_ERROR As Global.System.Nullable(Of Double)) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(M_DATE,Date)
            If (M_LAT_NAD83.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(M_LAT_NAD83.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (M_LON_NAD83.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(M_LON_NAD83.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (M_LAT_WGS84.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(M_LAT_WGS84.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (M_LON_WGS84.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(M_LON_WGS84.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (M_ELEVATION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(M_ELEVATION.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (M_LOC_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(M_LOC_TYPE,String)
            End If
            If (M_LOC_MATERIAL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(M_LOC_MATERIAL,String)
            End If
            If (M_LOC_NOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(M_LOC_NOTES,String)
            End If
            If (M_LOC_COMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(M_LOC_COMMENTS,String)
            End If
            If (M_ACCESSTYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(M_ACCESSTYPE,String)
            End If
            If (M_GRTS_NUM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(M_GRTS_NUM,String)
            End If
            If (M_GPSTYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(M_GPSTYPE,String)
            End If
            If (M_GPSTIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(M_GPSTIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (M_CORR_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(M_CORR_TYPE,String)
            End If
            If (M_EST_H_ERROR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(M_EST_H_ERROR.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (M_EST_V_ERROR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(M_EST_V_ERROR.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PONDNAME As String,  _
                    ByVal M_DATE As Date,  _
                    ByVal M_LAT_NAD83 As Global.System.Nullable(Of Double),  _
                    ByVal M_LON_NAD83 As Global.System.Nullable(Of Double),  _
                    ByVal M_LAT_WGS84 As Global.System.Nullable(Of Double),  _
                    ByVal M_LON_WGS84 As Global.System.Nullable(Of Double),  _
                    ByVal M_ELEVATION As Global.System.Nullable(Of Double),  _
                    ByVal M_LOC_TYPE As String,  _
                    ByVal M_LOC_MATERIAL As String,  _
                    ByVal M_LOC_NOTES As String,  _
                    ByVal M_LOC_COMMENTS As String,  _
                    ByVal M_ACCESSTYPE As String,  _
                    ByVal M_GRTS_NUM As String,  _
                    ByVal M_GPSTYPE As String,  _
                    ByVal M_GPSTIME As Global.System.Nullable(Of Date),  _
                    ByVal M_CORR_TYPE As String,  _
                    ByVal M_EST_H_ERROR As Global.System.Nullable(Of Double),  _
                    ByVal M_EST_V_ERROR As Global.System.Nullable(Of Double),  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_M_DATE As Date,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(M_DATE,Date)
            If (M_LAT_NAD83.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(M_LAT_NAD83.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (M_LON_NAD83.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(M_LON_NAD83.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (M_LAT_WGS84.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(M_LAT_WGS84.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (M_LON_WGS84.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(M_LON_WGS84.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (M_ELEVATION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(M_ELEVATION.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (M_LOC_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(M_LOC_TYPE,String)
            End If
            If (M_LOC_MATERIAL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(M_LOC_MATERIAL,String)
            End If
            If (M_LOC_NOTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(M_LOC_NOTES,String)
            End If
            If (M_LOC_COMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(M_LOC_COMMENTS,String)
            End If
            If (M_ACCESSTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(M_ACCESSTYPE,String)
            End If
            If (M_GRTS_NUM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(M_GRTS_NUM,String)
            End If
            If (M_GPSTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(M_GPSTYPE,String)
            End If
            If (M_GPSTIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(M_GPSTIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (M_CORR_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(M_CORR_TYPE,String)
            End If
            If (M_EST_H_ERROR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(M_EST_H_ERROR.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (M_EST_V_ERROR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(M_EST_V_ERROR.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_M_DATE,Date)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal M_LAT_NAD83 As Global.System.Nullable(Of Double),  _
                    ByVal M_LON_NAD83 As Global.System.Nullable(Of Double),  _
                    ByVal M_LAT_WGS84 As Global.System.Nullable(Of Double),  _
                    ByVal M_LON_WGS84 As Global.System.Nullable(Of Double),  _
                    ByVal M_ELEVATION As Global.System.Nullable(Of Double),  _
                    ByVal M_LOC_TYPE As String,  _
                    ByVal M_LOC_MATERIAL As String,  _
                    ByVal M_LOC_NOTES As String,  _
                    ByVal M_LOC_COMMENTS As String,  _
                    ByVal M_ACCESSTYPE As String,  _
                    ByVal M_GRTS_NUM As String,  _
                    ByVal M_GPSTYPE As String,  _
                    ByVal M_GPSTIME As Global.System.Nullable(Of Date),  _
                    ByVal M_CORR_TYPE As String,  _
                    ByVal M_EST_H_ERROR As Global.System.Nullable(Of Double),  _
                    ByVal M_EST_V_ERROR As Global.System.Nullable(Of Double),  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_M_DATE As Date,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_PONDNAME, Original_M_DATE, M_LAT_NAD83, M_LON_NAD83, M_LAT_WGS84, M_LON_WGS84, M_ELEVATION, M_LOC_TYPE, M_LOC_MATERIAL, M_LOC_NOTES, M_LOC_COMMENTS, M_ACCESSTYPE, M_GRTS_NUM, M_GPSTYPE, M_GPSTIME, M_CORR_TYPE, M_EST_H_ERROR, M_EST_V_ERROR, Original_PONDNAME, Original_M_DATE, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblPhotosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblPhotos"
            tableMapping.ColumnMappings.Add("PHOTO_ID", "PHOTO_ID")
            tableMapping.ColumnMappings.Add("EVENT_ID", "EVENT_ID")
            tableMapping.ColumnMappings.Add("DATA_LOCATION_ID", "DATA_LOCATION_ID")
            tableMapping.ColumnMappings.Add("EVENT_GROUP_ID", "EVENT_GROUP_ID")
            tableMapping.ColumnMappings.Add("SITE_ID", "SITE_ID")
            tableMapping.ColumnMappings.Add("SITE_NAME", "SITE_NAME")
            tableMapping.ColumnMappings.Add("UNIT_CODE", "UNIT_CODE")
            tableMapping.ColumnMappings.Add("WAYPOINT", "WAYPOINT")
            tableMapping.ColumnMappings.Add("LOCATION", "LOCATION")
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION")
            tableMapping.ColumnMappings.Add("DATE", "DATE")
            tableMapping.ColumnMappings.Add("TIME", "TIME")
            tableMapping.ColumnMappings.Add("PHOTO_PATH", "PHOTO_PATH")
            tableMapping.ColumnMappings.Add("SOURCE_FILE", "SOURCE_FILE")
            tableMapping.ColumnMappings.Add("PHOTOGRAPHER", "PHOTOGRAPHER")
            tableMapping.ColumnMappings.Add("TYPE", "TYPE")
            tableMapping.ColumnMappings.Add("COLLECTION", "COLLECTION")
            tableMapping.ColumnMappings.Add("PUBLISHER", "PUBLISHER")
            tableMapping.ColumnMappings.Add("FORMAT", "FORMAT")
            tableMapping.ColumnMappings.Add("CREDITS", "CREDITS")
            tableMapping.ColumnMappings.Add("DISTRIBUTION_RESTRICTIONS", "DISTRIBUTION_RESTRICTIONS")
            tableMapping.ColumnMappings.Add("KEYWORDS", "KEYWORDS")
            tableMapping.ColumnMappings.Add("DRAWING", "DRAWING")
            tableMapping.ColumnMappings.Add("FLAGGED", "FLAGGED")
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("SOURCEDB", "SOURCEDB")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblPhotos] WHERE (([PHOTO_ID] = @Original_PHOTO_ID) AND ([row_"& _ 
                "timestamp] = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PHOTO_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHOTO_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblPhotos] ([PHOTO_ID], [EVENT_ID], [DATA_LOCATION_ID], [EVENT"& _ 
                "_GROUP_ID], [SITE_ID], [SITE_NAME], [UNIT_CODE], [WAYPOINT], [LOCATION], [DESCRI"& _ 
                "PTION], [DATE], [TIME], [PHOTO_PATH], [SOURCE_FILE], [PHOTOGRAPHER], [TYPE], [CO"& _ 
                "LLECTION], [PUBLISHER], [FORMAT], [CREDITS], [DISTRIBUTION_RESTRICTIONS], [KEYWO"& _ 
                "RDS], [DRAWING], [FLAGGED], [PONDNAME], [SOURCEDB], [RecordInsertedDate], [Recor"& _ 
                "dInsertedBy], [RecordUpdatedDate], [RecordUpdatedBy]) VALUES (@PHOTO_ID, @EVENT_"& _ 
                "ID, @DATA_LOCATION_ID, @EVENT_GROUP_ID, @SITE_ID, @SITE_NAME, @UNIT_CODE, @WAYPO"& _ 
                "INT, @LOCATION, @DESCRIPTION, @DATE, @TIME, @PHOTO_PATH, @SOURCE_FILE, @PHOTOGRA"& _ 
                "PHER, @TYPE, @COLLECTION, @PUBLISHER, @FORMAT, @CREDITS, @DISTRIBUTION_RESTRICTI"& _ 
                "ONS, @KEYWORDS, @DRAWING, @FLAGGED, @PONDNAME, @SOURCEDB, @RecordInsertedDate, @"& _ 
                "RecordInsertedBy, @RecordUpdatedDate, @RecordUpdatedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PHOTO_ID, EVENT"& _ 
                "_ID, DATA_LOCATION_ID, EVENT_GROUP_ID, SITE_ID, SITE_NAME, UNIT_CODE, WAYPOINT, "& _ 
                "LOCATION, DESCRIPTION, DATE, TIME, PHOTO_PATH, SOURCE_FILE, PHOTOGRAPHER, TYPE, "& _ 
                "COLLECTION, PUBLISHER, FORMAT, CREDITS, DISTRIBUTION_RESTRICTIONS, KEYWORDS, DRA"& _ 
                "WING, FLAGGED, PONDNAME, SOURCEDB, RecordInsertedDate, RecordInsertedBy, RecordU"& _ 
                "pdatedDate, RecordUpdatedBy, row_timestamp FROM tblPhotos WHERE (PHOTO_ID = @PHO"& _ 
                "TO_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHOTO_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHOTO_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EVENT_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EVENT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_LOCATION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_LOCATION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EVENT_GROUP_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EVENT_GROUP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SITE_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SITE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SITE_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SITE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAYPOINT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAYPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOCATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOCATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHOTO_PATH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHOTO_PATH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCE_FILE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCE_FILE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHOTOGRAPHER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHOTOGRAPHER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLLECTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLLECTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PUBLISHER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PUBLISHER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREDITS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREDITS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISTRIBUTION_RESTRICTIONS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISTRIBUTION_RESTRICTIONS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KEYWORDS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KEYWORDS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DRAWING", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DRAWING", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FLAGGED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FLAGGED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCEDB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEDB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblPhotos] SET [PHOTO_ID] = @PHOTO_ID, [EVENT_ID] = @EVENT_ID, [DAT"& _ 
                "A_LOCATION_ID] = @DATA_LOCATION_ID, [EVENT_GROUP_ID] = @EVENT_GROUP_ID, [SITE_ID"& _ 
                "] = @SITE_ID, [SITE_NAME] = @SITE_NAME, [UNIT_CODE] = @UNIT_CODE, [WAYPOINT] = @"& _ 
                "WAYPOINT, [LOCATION] = @LOCATION, [DESCRIPTION] = @DESCRIPTION, [DATE] = @DATE, "& _ 
                "[TIME] = @TIME, [PHOTO_PATH] = @PHOTO_PATH, [SOURCE_FILE] = @SOURCE_FILE, [PHOTO"& _ 
                "GRAPHER] = @PHOTOGRAPHER, [TYPE] = @TYPE, [COLLECTION] = @COLLECTION, [PUBLISHER"& _ 
                "] = @PUBLISHER, [FORMAT] = @FORMAT, [CREDITS] = @CREDITS, [DISTRIBUTION_RESTRICT"& _ 
                "IONS] = @DISTRIBUTION_RESTRICTIONS, [KEYWORDS] = @KEYWORDS, [DRAWING] = @DRAWING"& _ 
                ", [FLAGGED] = @FLAGGED, [PONDNAME] = @PONDNAME, [SOURCEDB] = @SOURCEDB, [RecordI"& _ 
                "nsertedDate] = @RecordInsertedDate, [RecordInsertedBy] = @RecordInsertedBy, [Rec"& _ 
                "ordUpdatedDate] = @RecordUpdatedDate, [RecordUpdatedBy] = @RecordUpdatedBy WHERE"& _ 
                " (([PHOTO_ID] = @Original_PHOTO_ID) AND ([row_timestamp] = @Original_row_timesta"& _ 
                "mp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PHOTO_ID, EVENT_ID, DATA_LOCATION_ID, EVENT_GROUP_ID, SITE_ID, SIT"& _ 
                "E_NAME, UNIT_CODE, WAYPOINT, LOCATION, DESCRIPTION, DATE, TIME, PHOTO_PATH, SOUR"& _ 
                "CE_FILE, PHOTOGRAPHER, TYPE, COLLECTION, PUBLISHER, FORMAT, CREDITS, DISTRIBUTIO"& _ 
                "N_RESTRICTIONS, KEYWORDS, DRAWING, FLAGGED, PONDNAME, SOURCEDB, RecordInsertedDa"& _ 
                "te, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM tbl"& _ 
                "Photos WHERE (PHOTO_ID = @PHOTO_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHOTO_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHOTO_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EVENT_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EVENT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATA_LOCATION_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATA_LOCATION_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EVENT_GROUP_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EVENT_GROUP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SITE_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SITE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SITE_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SITE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAYPOINT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAYPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOCATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOCATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHOTO_PATH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHOTO_PATH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCE_FILE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCE_FILE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PHOTOGRAPHER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHOTOGRAPHER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COLLECTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COLLECTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PUBLISHER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PUBLISHER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FORMAT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FORMAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREDITS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREDITS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISTRIBUTION_RESTRICTIONS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISTRIBUTION_RESTRICTIONS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KEYWORDS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KEYWORDS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DRAWING", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DRAWING", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FLAGGED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FLAGGED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCEDB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEDB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PHOTO_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PHOTO_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PHOTO_ID, EVENT_ID, DATA_LOCATION_ID, EVENT_GROUP_ID, SITE_ID, SITE_NAME, "& _ 
                "UNIT_CODE, WAYPOINT, LOCATION, DESCRIPTION, DATE, TIME, PHOTO_PATH, SOURCE_FILE,"& _ 
                " PHOTOGRAPHER, TYPE, COLLECTION, PUBLISHER, FORMAT, CREDITS, DISTRIBUTION_RESTRI"& _ 
                "CTIONS, KEYWORDS, DRAWING, FLAGGED, PONDNAME, SOURCEDB, RecordInsertedDate, Reco"& _ 
                "rdInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM dbo.tblPhot"& _ 
                "os"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblPhotosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblPhotosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblPhotosDataTable = New AK_ShallowLakesDataSet.tblPhotosDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblPhotosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblPhotos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PHOTO_ID As Integer, ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PHOTO_ID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PHOTO_ID As Integer,  _
                    ByVal EVENT_ID As String,  _
                    ByVal DATA_LOCATION_ID As Global.System.Nullable(Of Integer),  _
                    ByVal EVENT_GROUP_ID As Global.System.Nullable(Of Integer),  _
                    ByVal SITE_ID As String,  _
                    ByVal SITE_NAME As String,  _
                    ByVal UNIT_CODE As String,  _
                    ByVal WAYPOINT As Global.System.Nullable(Of Integer),  _
                    ByVal LOCATION As String,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal _DATE As Global.System.Nullable(Of Date),  _
                    ByVal TIME As Global.System.Nullable(Of Date),  _
                    ByVal PHOTO_PATH As String,  _
                    ByVal SOURCE_FILE As String,  _
                    ByVal PHOTOGRAPHER As String,  _
                    ByVal TYPE As String,  _
                    ByVal COLLECTION As String,  _
                    ByVal PUBLISHER As String,  _
                    ByVal FORMAT As String,  _
                    ByVal CREDITS As String,  _
                    ByVal DISTRIBUTION_RESTRICTIONS As String,  _
                    ByVal KEYWORDS As String,  _
                    ByVal DRAWING() As Byte,  _
                    ByVal FLAGGED As Global.System.Nullable(Of Boolean),  _
                    ByVal PONDNAME As String,  _
                    ByVal SOURCEDB As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(PHOTO_ID,Integer)
            If (EVENT_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(EVENT_ID,String)
            End If
            If (DATA_LOCATION_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DATA_LOCATION_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (EVENT_GROUP_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(EVENT_GROUP_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (SITE_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SITE_ID")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SITE_ID,String)
            End If
            If (SITE_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SITE_NAME,String)
            End If
            If (UNIT_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(UNIT_CODE,String)
            End If
            If (WAYPOINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(WAYPOINT.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (LOCATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(LOCATION,String)
            End If
            If (DESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(DESCRIPTION,String)
            End If
            If (_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (TIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(TIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PHOTO_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PHOTO_PATH")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PHOTO_PATH,String)
            End If
            If (SOURCE_FILE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(SOURCE_FILE,String)
            End If
            If (PHOTOGRAPHER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PHOTOGRAPHER,String)
            End If
            If (TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(TYPE,String)
            End If
            If (COLLECTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(COLLECTION,String)
            End If
            If (PUBLISHER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(PUBLISHER,String)
            End If
            If (FORMAT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(FORMAT,String)
            End If
            If (CREDITS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(CREDITS,String)
            End If
            If (DISTRIBUTION_RESTRICTIONS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(DISTRIBUTION_RESTRICTIONS,String)
            End If
            If (KEYWORDS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(KEYWORDS,String)
            End If
            If (DRAWING Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(DRAWING,Byte())
            End If
            If (FLAGGED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(FLAGGED.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (PONDNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(PONDNAME,String)
            End If
            If (SOURCEDB Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(SOURCEDB,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PHOTO_ID As Integer,  _
                    ByVal EVENT_ID As String,  _
                    ByVal DATA_LOCATION_ID As Global.System.Nullable(Of Integer),  _
                    ByVal EVENT_GROUP_ID As Global.System.Nullable(Of Integer),  _
                    ByVal SITE_ID As String,  _
                    ByVal SITE_NAME As String,  _
                    ByVal UNIT_CODE As String,  _
                    ByVal WAYPOINT As Global.System.Nullable(Of Integer),  _
                    ByVal LOCATION As String,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal _DATE As Global.System.Nullable(Of Date),  _
                    ByVal TIME As Global.System.Nullable(Of Date),  _
                    ByVal PHOTO_PATH As String,  _
                    ByVal SOURCE_FILE As String,  _
                    ByVal PHOTOGRAPHER As String,  _
                    ByVal TYPE As String,  _
                    ByVal COLLECTION As String,  _
                    ByVal PUBLISHER As String,  _
                    ByVal FORMAT As String,  _
                    ByVal CREDITS As String,  _
                    ByVal DISTRIBUTION_RESTRICTIONS As String,  _
                    ByVal KEYWORDS As String,  _
                    ByVal DRAWING() As Byte,  _
                    ByVal FLAGGED As Global.System.Nullable(Of Boolean),  _
                    ByVal PONDNAME As String,  _
                    ByVal SOURCEDB As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_PHOTO_ID As Integer,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PHOTO_ID,Integer)
            If (EVENT_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(EVENT_ID,String)
            End If
            If (DATA_LOCATION_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DATA_LOCATION_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (EVENT_GROUP_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(EVENT_GROUP_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (SITE_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SITE_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SITE_ID,String)
            End If
            If (SITE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SITE_NAME,String)
            End If
            If (UNIT_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(UNIT_CODE,String)
            End If
            If (WAYPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(WAYPOINT.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (LOCATION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(LOCATION,String)
            End If
            If (DESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(DESCRIPTION,String)
            End If
            If (_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PHOTO_PATH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PHOTO_PATH")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(PHOTO_PATH,String)
            End If
            If (SOURCE_FILE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(SOURCE_FILE,String)
            End If
            If (PHOTOGRAPHER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(PHOTOGRAPHER,String)
            End If
            If (TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(TYPE,String)
            End If
            If (COLLECTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(COLLECTION,String)
            End If
            If (PUBLISHER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(PUBLISHER,String)
            End If
            If (FORMAT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(FORMAT,String)
            End If
            If (CREDITS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(CREDITS,String)
            End If
            If (DISTRIBUTION_RESTRICTIONS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(DISTRIBUTION_RESTRICTIONS,String)
            End If
            If (KEYWORDS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(KEYWORDS,String)
            End If
            If (DRAWING Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(DRAWING,Byte())
            End If
            If (FLAGGED.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(FLAGGED.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (PONDNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(PONDNAME,String)
            End If
            If (SOURCEDB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(SOURCEDB,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(RecordUpdatedBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_PHOTO_ID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal EVENT_ID As String,  _
                    ByVal DATA_LOCATION_ID As Global.System.Nullable(Of Integer),  _
                    ByVal EVENT_GROUP_ID As Global.System.Nullable(Of Integer),  _
                    ByVal SITE_ID As String,  _
                    ByVal SITE_NAME As String,  _
                    ByVal UNIT_CODE As String,  _
                    ByVal WAYPOINT As Global.System.Nullable(Of Integer),  _
                    ByVal LOCATION As String,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal _DATE As Global.System.Nullable(Of Date),  _
                    ByVal TIME As Global.System.Nullable(Of Date),  _
                    ByVal PHOTO_PATH As String,  _
                    ByVal SOURCE_FILE As String,  _
                    ByVal PHOTOGRAPHER As String,  _
                    ByVal TYPE As String,  _
                    ByVal COLLECTION As String,  _
                    ByVal PUBLISHER As String,  _
                    ByVal FORMAT As String,  _
                    ByVal CREDITS As String,  _
                    ByVal DISTRIBUTION_RESTRICTIONS As String,  _
                    ByVal KEYWORDS As String,  _
                    ByVal DRAWING() As Byte,  _
                    ByVal FLAGGED As Global.System.Nullable(Of Boolean),  _
                    ByVal PONDNAME As String,  _
                    ByVal SOURCEDB As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_PHOTO_ID As Integer,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_PHOTO_ID, EVENT_ID, DATA_LOCATION_ID, EVENT_GROUP_ID, SITE_ID, SITE_NAME, UNIT_CODE, WAYPOINT, LOCATION, DESCRIPTION, _DATE, TIME, PHOTO_PATH, SOURCE_FILE, PHOTOGRAPHER, TYPE, COLLECTION, PUBLISHER, FORMAT, CREDITS, DISTRIBUTION_RESTRICTIONS, KEYWORDS, DRAWING, FLAGGED, PONDNAME, SOURCEDB, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_PHOTO_ID, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblPondDepthsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblPondDepths"
            tableMapping.ColumnMappings.Add("LAKEDEPTHID", "LAKEDEPTHID")
            tableMapping.ColumnMappings.Add("SAMPLEDATE", "SAMPLEDATE")
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("GPS_DATE", "GPS_DATE")
            tableMapping.ColumnMappings.Add("GPS_TIME", "GPS_TIME")
            tableMapping.ColumnMappings.Add("DEPTH", "DEPTH")
            tableMapping.ColumnMappings.Add("LONGITUDE", "LONGITUDE")
            tableMapping.ColumnMappings.Add("LATITUDE", "LATITUDE")
            tableMapping.ColumnMappings.Add("COMMENTS_DEPTHS", "COMMENTS_DEPTHS")
            tableMapping.ColumnMappings.Add("HEIGHT", "HEIGHT")
            tableMapping.ColumnMappings.Add("FEAT_NAME", "FEAT_NAME")
            tableMapping.ColumnMappings.Add("DATAFILE", "DATAFILE")
            tableMapping.ColumnMappings.Add("GPS_HEIGHT", "GPS_HEIGHT")
            tableMapping.ColumnMappings.Add("VERT_PREC", "VERT_PREC")
            tableMapping.ColumnMappings.Add("HORZ_PREC", "HORZ_PREC")
            tableMapping.ColumnMappings.Add("POINT_ID", "POINT_ID")
            tableMapping.ColumnMappings.Add("SOURCE", "SOURCE")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("PondDepthsID", "PondDepthsID")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblPondDepths] WHERE (([PondDepthsID] = @Original_PondDepthsID"& _ 
                ") AND ([row_timestamp] = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PondDepthsID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PondDepthsID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblPondDepths] ([LAKEDEPTHID], [SAMPLEDATE], [PONDNAME], [GPS_"& _ 
                "DATE], [GPS_TIME], [DEPTH], [LONGITUDE], [LATITUDE], [COMMENTS_DEPTHS], [HEIGHT]"& _ 
                ", [FEAT_NAME], [DATAFILE], [GPS_HEIGHT], [VERT_PREC], [HORZ_PREC], [POINT_ID], ["& _ 
                "SOURCE], [RecordInsertedDate], [RecordInsertedBy], [RecordUpdatedDate], [RecordU"& _ 
                "pdatedBy]) VALUES (@LAKEDEPTHID, @SAMPLEDATE, @PONDNAME, @GPS_DATE, @GPS_TIME, @"& _ 
                "DEPTH, @LONGITUDE, @LATITUDE, @COMMENTS_DEPTHS, @HEIGHT, @FEAT_NAME, @DATAFILE, "& _ 
                "@GPS_HEIGHT, @VERT_PREC, @HORZ_PREC, @POINT_ID, @SOURCE, @RecordInsertedDate, @R"& _ 
                "ecordInsertedBy, @RecordUpdatedDate, @RecordUpdatedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LAKEDEPTHID, SAM"& _ 
                "PLEDATE, PONDNAME, GPS_DATE, GPS_TIME, DEPTH, LONGITUDE, LATITUDE, COMMENTS_DEPT"& _ 
                "HS, HEIGHT, FEAT_NAME, DATAFILE, GPS_HEIGHT, VERT_PREC, HORZ_PREC, POINT_ID, SOU"& _ 
                "RCE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, P"& _ 
                "ondDepthsID, row_timestamp FROM tblPondDepths WHERE (PondDepthsID = SCOPE_IDENTI"& _ 
                "TY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKEDEPTHID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKEDEPTHID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPS_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPS_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPS_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPS_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LONGITUDE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LONGITUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LATITUDE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LATITUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS_DEPTHS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS_DEPTHS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HEIGHT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEAT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEAT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAFILE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATAFILE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPS_HEIGHT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPS_HEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VERT_PREC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VERT_PREC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HORZ_PREC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HORZ_PREC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POINT_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POINT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblPondDepths] SET [LAKEDEPTHID] = @LAKEDEPTHID, [SAMPLEDATE] = @SA"& _ 
                "MPLEDATE, [PONDNAME] = @PONDNAME, [GPS_DATE] = @GPS_DATE, [GPS_TIME] = @GPS_TIME"& _ 
                ", [DEPTH] = @DEPTH, [LONGITUDE] = @LONGITUDE, [LATITUDE] = @LATITUDE, [COMMENTS_"& _ 
                "DEPTHS] = @COMMENTS_DEPTHS, [HEIGHT] = @HEIGHT, [FEAT_NAME] = @FEAT_NAME, [DATAF"& _ 
                "ILE] = @DATAFILE, [GPS_HEIGHT] = @GPS_HEIGHT, [VERT_PREC] = @VERT_PREC, [HORZ_PR"& _ 
                "EC] = @HORZ_PREC, [POINT_ID] = @POINT_ID, [SOURCE] = @SOURCE, [RecordInsertedDat"& _ 
                "e] = @RecordInsertedDate, [RecordInsertedBy] = @RecordInsertedBy, [RecordUpdated"& _ 
                "Date] = @RecordUpdatedDate, [RecordUpdatedBy] = @RecordUpdatedBy WHERE (([PondDe"& _ 
                "pthsID] = @Original_PondDepthsID) AND ([row_timestamp] = @Original_row_timestamp"& _ 
                "));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LAKEDEPTHID, SAMPLEDATE, PONDNAME, GPS_DATE, GPS_TIME, DEPTH, LONGIT"& _ 
                "UDE, LATITUDE, COMMENTS_DEPTHS, HEIGHT, FEAT_NAME, DATAFILE, GPS_HEIGHT, VERT_PR"& _ 
                "EC, HORZ_PREC, POINT_ID, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpd"& _ 
                "atedDate, RecordUpdatedBy, PondDepthsID, row_timestamp FROM tblPondDepths WHERE "& _ 
                "(PondDepthsID = @PondDepthsID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKEDEPTHID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKEDEPTHID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPS_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPS_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPS_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPS_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LONGITUDE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LONGITUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LATITUDE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LATITUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS_DEPTHS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS_DEPTHS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HEIGHT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEAT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEAT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAFILE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATAFILE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPS_HEIGHT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPS_HEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VERT_PREC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VERT_PREC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HORZ_PREC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HORZ_PREC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POINT_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POINT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PondDepthsID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PondDepthsID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PondDepthsID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PondDepthsID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT LAKEDEPTHID, SAMPLEDATE, PONDNAME, GPS_DATE, GPS_TIME, DEPTH, LONGITUDE, L"& _ 
                "ATITUDE, COMMENTS_DEPTHS, HEIGHT, FEAT_NAME, DATAFILE, GPS_HEIGHT, VERT_PREC, HO"& _ 
                "RZ_PREC, POINT_ID, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDa"& _ 
                "te, RecordUpdatedBy, PondDepthsID, row_timestamp FROM dbo.tblPondDepths"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblPondDepthsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblPondDepthsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblPondDepthsDataTable = New AK_ShallowLakesDataSet.tblPondDepthsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblPondDepthsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblPondDepths")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PondDepthsID As Integer, ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PondDepthsID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal LAKEDEPTHID As Long,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal PONDNAME As String,  _
                    ByVal GPS_DATE As Global.System.Nullable(Of Date),  _
                    ByVal GPS_TIME As Global.System.Nullable(Of Date),  _
                    ByVal DEPTH As Double,  _
                    ByVal LONGITUDE As Global.System.Nullable(Of Double),  _
                    ByVal LATITUDE As Global.System.Nullable(Of Double),  _
                    ByVal COMMENTS_DEPTHS As String,  _
                    ByVal HEIGHT As Global.System.Nullable(Of Double),  _
                    ByVal FEAT_NAME As String,  _
                    ByVal DATAFILE As String,  _
                    ByVal GPS_HEIGHT As Global.System.Nullable(Of Double),  _
                    ByVal VERT_PREC As Global.System.Nullable(Of Double),  _
                    ByVal HORZ_PREC As Global.System.Nullable(Of Double),  _
                    ByVal POINT_ID As Global.System.Nullable(Of Integer),  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(LAKEDEPTHID,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAMPLEDATE,Date)
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PONDNAME,String)
            End If
            If (GPS_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(GPS_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (GPS_TIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(GPS_TIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(DEPTH,Double)
            If (LONGITUDE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(LONGITUDE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (LATITUDE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(LATITUDE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (COMMENTS_DEPTHS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(COMMENTS_DEPTHS,String)
            End If
            If (HEIGHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(HEIGHT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (FEAT_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(FEAT_NAME,String)
            End If
            If (DATAFILE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(DATAFILE,String)
            End If
            If (GPS_HEIGHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(GPS_HEIGHT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (VERT_PREC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(VERT_PREC.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (HORZ_PREC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(HORZ_PREC.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (POINT_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(POINT_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (SOURCE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(SOURCE,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LAKEDEPTHID As Long,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal PONDNAME As String,  _
                    ByVal GPS_DATE As Global.System.Nullable(Of Date),  _
                    ByVal GPS_TIME As Global.System.Nullable(Of Date),  _
                    ByVal DEPTH As Double,  _
                    ByVal LONGITUDE As Global.System.Nullable(Of Double),  _
                    ByVal LATITUDE As Global.System.Nullable(Of Double),  _
                    ByVal COMMENTS_DEPTHS As String,  _
                    ByVal HEIGHT As Global.System.Nullable(Of Double),  _
                    ByVal FEAT_NAME As String,  _
                    ByVal DATAFILE As String,  _
                    ByVal GPS_HEIGHT As Global.System.Nullable(Of Double),  _
                    ByVal VERT_PREC As Global.System.Nullable(Of Double),  _
                    ByVal HORZ_PREC As Global.System.Nullable(Of Double),  _
                    ByVal POINT_ID As Global.System.Nullable(Of Integer),  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_PondDepthsID As Integer,  _
                    ByVal Original_row_timestamp() As Byte,  _
                    ByVal PondDepthsID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LAKEDEPTHID,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAMPLEDATE,Date)
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PONDNAME,String)
            End If
            If (GPS_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(GPS_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (GPS_TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(GPS_TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DEPTH,Double)
            If (LONGITUDE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(LONGITUDE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (LATITUDE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(LATITUDE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (COMMENTS_DEPTHS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(COMMENTS_DEPTHS,String)
            End If
            If (HEIGHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(HEIGHT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (FEAT_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(FEAT_NAME,String)
            End If
            If (DATAFILE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(DATAFILE,String)
            End If
            If (GPS_HEIGHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(GPS_HEIGHT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (VERT_PREC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(VERT_PREC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (HORZ_PREC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(HORZ_PREC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (POINT_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(POINT_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (SOURCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(SOURCE,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(RecordUpdatedBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_PondDepthsID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_row_timestamp,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(PondDepthsID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LAKEDEPTHID As Long,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal PONDNAME As String,  _
                    ByVal GPS_DATE As Global.System.Nullable(Of Date),  _
                    ByVal GPS_TIME As Global.System.Nullable(Of Date),  _
                    ByVal DEPTH As Double,  _
                    ByVal LONGITUDE As Global.System.Nullable(Of Double),  _
                    ByVal LATITUDE As Global.System.Nullable(Of Double),  _
                    ByVal COMMENTS_DEPTHS As String,  _
                    ByVal HEIGHT As Global.System.Nullable(Of Double),  _
                    ByVal FEAT_NAME As String,  _
                    ByVal DATAFILE As String,  _
                    ByVal GPS_HEIGHT As Global.System.Nullable(Of Double),  _
                    ByVal VERT_PREC As Global.System.Nullable(Of Double),  _
                    ByVal HORZ_PREC As Global.System.Nullable(Of Double),  _
                    ByVal POINT_ID As Global.System.Nullable(Of Integer),  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_PondDepthsID As Integer,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(LAKEDEPTHID, SAMPLEDATE, PONDNAME, GPS_DATE, GPS_TIME, DEPTH, LONGITUDE, LATITUDE, COMMENTS_DEPTHS, HEIGHT, FEAT_NAME, DATAFILE, GPS_HEIGHT, VERT_PREC, HORZ_PREC, POINT_ID, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_PondDepthsID, Original_row_timestamp, Original_PondDepthsID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblPondsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblPonds"
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("PARK", "PARK")
            tableMapping.ColumnMappings.Add("LATITUDE_NAD83", "LATITUDE_NAD83")
            tableMapping.ColumnMappings.Add("LONGITUDE_NAD83", "LONGITUDE_NAD83")
            tableMapping.ColumnMappings.Add("LATITUDE_WGS84", "LATITUDE_WGS84")
            tableMapping.ColumnMappings.Add("LONGITUDE_WGS84", "LONGITUDE_WGS84")
            tableMapping.ColumnMappings.Add("ACCESSTYPE", "ACCESSTYPE")
            tableMapping.ColumnMappings.Add("GPSTYPE", "GPSTYPE")
            tableMapping.ColumnMappings.Add("GPSDATUM", "GPSDATUM")
            tableMapping.ColumnMappings.Add("GPSDATE", "GPSDATE")
            tableMapping.ColumnMappings.Add("QUAD", "QUAD")
            tableMapping.ColumnMappings.Add("QUADNUMBER", "QUADNUMBER")
            tableMapping.ColumnMappings.Add("ELEVATION", "ELEVATION")
            tableMapping.ColumnMappings.Add("ELEVATION_NUM", "ELEVATION_NUM")
            tableMapping.ColumnMappings.Add("ELEVATIONSOURCE", "ELEVATIONSOURCE")
            tableMapping.ColumnMappings.Add("HYDROLOGIC_REGIME", "HYDROLOGIC_REGIME")
            tableMapping.ColumnMappings.Add("HYDROLOGIC_CLASS", "HYDROLOGIC_CLASS")
            tableMapping.ColumnMappings.Add("FIRST_SAMPLED_DATE", "FIRST_SAMPLED_DATE")
            tableMapping.ColumnMappings.Add("UPDATED_DATE", "UPDATED_DATE")
            tableMapping.ColumnMappings.Add("EST_H_ERROR", "EST_H_ERROR")
            tableMapping.ColumnMappings.Add("EST_V_ERROR", "EST_V_ERROR")
            tableMapping.ColumnMappings.Add("LOC_NOTES", "LOC_NOTES")
            tableMapping.ColumnMappings.Add("LOC_TYPE", "LOC_TYPE")
            tableMapping.ColumnMappings.Add("LOC_MATERIAL", "LOC_MATERIAL")
            tableMapping.ColumnMappings.Add("GRTS_NUM", "GRTS_NUM")
            tableMapping.ColumnMappings.Add("MAPLAKENUM", "MAPLAKENUM")
            tableMapping.ColumnMappings.Add("SITESELECTIONNOTES", "SITESELECTIONNOTES")
            tableMapping.ColumnMappings.Add("CONTINUOUS_DATA", "CONTINUOUS_DATA")
            tableMapping.ColumnMappings.Add("SALINITY", "SALINITY")
            tableMapping.ColumnMappings.Add("EMERGENTS", "EMERGENTS")
            tableMapping.ColumnMappings.Add("GENESIS", "GENESIS")
            tableMapping.ColumnMappings.Add("ISLANDS", "ISLANDS")
            tableMapping.ColumnMappings.Add("SHORELINE", "SHORELINE")
            tableMapping.ColumnMappings.Add("SUBSTRATE_TEXTURE", "SUBSTRATE_TEXTURE")
            tableMapping.ColumnMappings.Add("COMMENTS", "COMMENTS")
            tableMapping.ColumnMappings.Add("ECOREGION", "ECOREGION")
            tableMapping.ColumnMappings.Add("SUBSECTION", "SUBSECTION")
            tableMapping.ColumnMappings.Add("DETSUBCODE", "DETSUBCODE")
            tableMapping.ColumnMappings.Add("LAKEGEOLOGY", "LAKEGEOLOGY")
            tableMapping.ColumnMappings.Add("LAKEGEOLOGYNOTES", "LAKEGEOLOGYNOTES")
            tableMapping.ColumnMappings.Add("LAKETYPE", "LAKETYPE")
            tableMapping.ColumnMappings.Add("LAKTYPE_CONFIRM", "LAKTYPE_CONFIRM")
            tableMapping.ColumnMappings.Add("LAKETYPE_FIELDNOTES", "LAKETYPE_FIELDNOTES")
            tableMapping.ColumnMappings.Add("DENA_LAKETYPE", "DENA_LAKETYPE")
            tableMapping.ColumnMappings.Add("FIREHISTORY", "FIREHISTORY")
            tableMapping.ColumnMappings.Add("PERMAFROST", "PERMAFROST")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("zECOREGION", "zECOREGION")
            tableMapping.ColumnMappings.Add("zSUBSECTION", "zSUBSECTION")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblPonds] WHERE (([PONDNAME] = @Original_PONDNAME) AND ([row_t"& _ 
                "imestamp] = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblPonds] ([PONDNAME], [PARK], [LATITUDE_NAD83], [LONGITUDE_NA"& _ 
                "D83], [LATITUDE_WGS84], [LONGITUDE_WGS84], [ACCESSTYPE], [GPSTYPE], [GPSDATUM], "& _ 
                "[GPSDATE], [QUAD], [QUADNUMBER], [ELEVATION], [ELEVATION_NUM], [ELEVATIONSOURCE]"& _ 
                ", [HYDROLOGIC_REGIME], [HYDROLOGIC_CLASS], [FIRST_SAMPLED_DATE], [UPDATED_DATE],"& _ 
                " [EST_H_ERROR], [EST_V_ERROR], [LOC_NOTES], [LOC_TYPE], [LOC_MATERIAL], [GRTS_NU"& _ 
                "M], [MAPLAKENUM], [SITESELECTIONNOTES], [CONTINUOUS_DATA], [SALINITY], [EMERGENT"& _ 
                "S], [GENESIS], [ISLANDS], [SHORELINE], [SUBSTRATE_TEXTURE], [COMMENTS], [ECOREGI"& _ 
                "ON], [SUBSECTION], [DETSUBCODE], [LAKEGEOLOGY], [LAKEGEOLOGYNOTES], [LAKETYPE], "& _ 
                "[LAKTYPE_CONFIRM], [LAKETYPE_FIELDNOTES], [DENA_LAKETYPE], [FIREHISTORY], [PERMA"& _ 
                "FROST], [RecordInsertedDate], [RecordInsertedBy], [RecordUpdatedDate], [RecordUp"& _ 
                "datedBy], [zECOREGION], [zSUBSECTION]) VALUES (@PONDNAME, @PARK, @LATITUDE_NAD83"& _ 
                ", @LONGITUDE_NAD83, @LATITUDE_WGS84, @LONGITUDE_WGS84, @ACCESSTYPE, @GPSTYPE, @G"& _ 
                "PSDATUM, @GPSDATE, @QUAD, @QUADNUMBER, @ELEVATION, @ELEVATION_NUM, @ELEVATIONSOU"& _ 
                "RCE, @HYDROLOGIC_REGIME, @HYDROLOGIC_CLASS, @FIRST_SAMPLED_DATE, @UPDATED_DATE, "& _ 
                "@EST_H_ERROR, @EST_V_ERROR, @LOC_NOTES, @LOC_TYPE, @LOC_MATERIAL, @GRTS_NUM, @MA"& _ 
                "PLAKENUM, @SITESELECTIONNOTES, @CONTINUOUS_DATA, @SALINITY, @EMERGENTS, @GENESIS"& _ 
                ", @ISLANDS, @SHORELINE, @SUBSTRATE_TEXTURE, @COMMENTS, @ECOREGION, @SUBSECTION, "& _ 
                "@DETSUBCODE, @LAKEGEOLOGY, @LAKEGEOLOGYNOTES, @LAKETYPE, @LAKTYPE_CONFIRM, @LAKE"& _ 
                "TYPE_FIELDNOTES, @DENA_LAKETYPE, @FIREHISTORY, @PERMAFROST, @RecordInsertedDate,"& _ 
                " @RecordInsertedBy, @RecordUpdatedDate, @RecordUpdatedBy, @zECOREGION, @zSUBSECT"& _ 
                "ION);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PONDNAME, PARK, LATITUDE_NAD83, LONGITUDE_NAD83, LATITUDE_WGS84, L"& _ 
                "ONGITUDE_WGS84, ACCESSTYPE, GPSTYPE, GPSDATUM, GPSDATE, QUAD, QUADNUMBER, ELEVAT"& _ 
                "ION, ELEVATION_NUM, ELEVATIONSOURCE, HYDROLOGIC_REGIME, HYDROLOGIC_CLASS, FIRST_"& _ 
                "SAMPLED_DATE, UPDATED_DATE, EST_H_ERROR, EST_V_ERROR, LOC_NOTES, LOC_TYPE, LOC_M"& _ 
                "ATERIAL, GRTS_NUM, MAPLAKENUM, SITESELECTIONNOTES, CONTINUOUS_DATA, SALINITY, EM"& _ 
                "ERGENTS, GENESIS, ISLANDS, SHORELINE, SUBSTRATE_TEXTURE, COMMENTS, ECOREGION, SU"& _ 
                "BSECTION, DETSUBCODE, LAKEGEOLOGY, LAKEGEOLOGYNOTES, LAKETYPE, LAKTYPE_CONFIRM, "& _ 
                "LAKETYPE_FIELDNOTES, DENA_LAKETYPE, FIREHISTORY, PERMAFROST, RecordInsertedDate,"& _ 
                " RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, zECOREGION, zSUBSECTION, "& _ 
                "row_timestamp FROM tblPonds WHERE (PONDNAME = @PONDNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARK", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LATITUDE_NAD83", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LATITUDE_NAD83", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LONGITUDE_NAD83", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LONGITUDE_NAD83", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LATITUDE_WGS84", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LATITUDE_WGS84", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LONGITUDE_WGS84", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LONGITUDE_WGS84", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCESSTYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCESSTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPSTYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPSTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPSDATUM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPSDATUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPSDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPSDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUAD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUADNUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUADNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ELEVATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ELEVATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ELEVATION_NUM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ELEVATION_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ELEVATIONSOURCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ELEVATIONSOURCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HYDROLOGIC_REGIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HYDROLOGIC_REGIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HYDROLOGIC_CLASS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HYDROLOGIC_CLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIRST_SAMPLED_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIRST_SAMPLED_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EST_H_ERROR", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EST_H_ERROR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EST_V_ERROR", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EST_V_ERROR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOC_NOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOC_NOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOC_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOC_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOC_MATERIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOC_MATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GRTS_NUM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GRTS_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAPLAKENUM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPLAKENUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SITESELECTIONNOTES", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SITESELECTIONNOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONTINUOUS_DATA", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTINUOUS_DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SALINITY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALINITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMERGENTS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMERGENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GENESIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GENESIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISLANDS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISLANDS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHORELINE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHORELINE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUBSTRATE_TEXTURE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUBSTRATE_TEXTURE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ECOREGION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ECOREGION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUBSECTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUBSECTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DETSUBCODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DETSUBCODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKEGEOLOGY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKEGEOLOGY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKEGEOLOGYNOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKEGEOLOGYNOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKETYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKETYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKTYPE_CONFIRM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKTYPE_CONFIRM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKETYPE_FIELDNOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKETYPE_FIELDNOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DENA_LAKETYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DENA_LAKETYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIREHISTORY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIREHISTORY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERMAFROST", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERMAFROST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@zECOREGION", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "zECOREGION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@zSUBSECTION", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "zSUBSECTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblPonds] SET [PONDNAME] = @PONDNAME, [PARK] = @PARK, [LATITUDE_NAD"& _ 
                "83] = @LATITUDE_NAD83, [LONGITUDE_NAD83] = @LONGITUDE_NAD83, [LATITUDE_WGS84] = "& _ 
                "@LATITUDE_WGS84, [LONGITUDE_WGS84] = @LONGITUDE_WGS84, [ACCESSTYPE] = @ACCESSTYP"& _ 
                "E, [GPSTYPE] = @GPSTYPE, [GPSDATUM] = @GPSDATUM, [GPSDATE] = @GPSDATE, [QUAD] = "& _ 
                "@QUAD, [QUADNUMBER] = @QUADNUMBER, [ELEVATION] = @ELEVATION, [ELEVATION_NUM] = @"& _ 
                "ELEVATION_NUM, [ELEVATIONSOURCE] = @ELEVATIONSOURCE, [HYDROLOGIC_REGIME] = @HYDR"& _ 
                "OLOGIC_REGIME, [HYDROLOGIC_CLASS] = @HYDROLOGIC_CLASS, [FIRST_SAMPLED_DATE] = @F"& _ 
                "IRST_SAMPLED_DATE, [UPDATED_DATE] = @UPDATED_DATE, [EST_H_ERROR] = @EST_H_ERROR,"& _ 
                " [EST_V_ERROR] = @EST_V_ERROR, [LOC_NOTES] = @LOC_NOTES, [LOC_TYPE] = @LOC_TYPE,"& _ 
                " [LOC_MATERIAL] = @LOC_MATERIAL, [GRTS_NUM] = @GRTS_NUM, [MAPLAKENUM] = @MAPLAKE"& _ 
                "NUM, [SITESELECTIONNOTES] = @SITESELECTIONNOTES, [CONTINUOUS_DATA] = @CONTINUOUS"& _ 
                "_DATA, [SALINITY] = @SALINITY, [EMERGENTS] = @EMERGENTS, [GENESIS] = @GENESIS, ["& _ 
                "ISLANDS] = @ISLANDS, [SHORELINE] = @SHORELINE, [SUBSTRATE_TEXTURE] = @SUBSTRATE_"& _ 
                "TEXTURE, [COMMENTS] = @COMMENTS, [ECOREGION] = @ECOREGION, [SUBSECTION] = @SUBSE"& _ 
                "CTION, [DETSUBCODE] = @DETSUBCODE, [LAKEGEOLOGY] = @LAKEGEOLOGY, [LAKEGEOLOGYNOT"& _ 
                "ES] = @LAKEGEOLOGYNOTES, [LAKETYPE] = @LAKETYPE, [LAKTYPE_CONFIRM] = @LAKTYPE_CO"& _ 
                "NFIRM, [LAKETYPE_FIELDNOTES] = @LAKETYPE_FIELDNOTES, [DENA_LAKETYPE] = @DENA_LAK"& _ 
                "ETYPE, [FIREHISTORY] = @FIREHISTORY, [PERMAFROST] = @PERMAFROST, [RecordInserted"& _ 
                "Date] = @RecordInsertedDate, [RecordInsertedBy] = @RecordInsertedBy, [RecordUpda"& _ 
                "tedDate] = @RecordUpdatedDate, [RecordUpdatedBy] = @RecordUpdatedBy, [zECOREGION"& _ 
                "] = @zECOREGION, [zSUBSECTION] = @zSUBSECTION WHERE (([PONDNAME] = @Original_PON"& _ 
                "DNAME) AND ([row_timestamp] = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PONDNAME, PARK,"& _ 
                " LATITUDE_NAD83, LONGITUDE_NAD83, LATITUDE_WGS84, LONGITUDE_WGS84, ACCESSTYPE, G"& _ 
                "PSTYPE, GPSDATUM, GPSDATE, QUAD, QUADNUMBER, ELEVATION, ELEVATION_NUM, ELEVATION"& _ 
                "SOURCE, HYDROLOGIC_REGIME, HYDROLOGIC_CLASS, FIRST_SAMPLED_DATE, UPDATED_DATE, E"& _ 
                "ST_H_ERROR, EST_V_ERROR, LOC_NOTES, LOC_TYPE, LOC_MATERIAL, GRTS_NUM, MAPLAKENUM"& _ 
                ", SITESELECTIONNOTES, CONTINUOUS_DATA, SALINITY, EMERGENTS, GENESIS, ISLANDS, SH"& _ 
                "ORELINE, SUBSTRATE_TEXTURE, COMMENTS, ECOREGION, SUBSECTION, DETSUBCODE, LAKEGEO"& _ 
                "LOGY, LAKEGEOLOGYNOTES, LAKETYPE, LAKTYPE_CONFIRM, LAKETYPE_FIELDNOTES, DENA_LAK"& _ 
                "ETYPE, FIREHISTORY, PERMAFROST, RecordInsertedDate, RecordInsertedBy, RecordUpda"& _ 
                "tedDate, RecordUpdatedBy, zECOREGION, zSUBSECTION, row_timestamp FROM tblPonds W"& _ 
                "HERE (PONDNAME = @PONDNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARK", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LATITUDE_NAD83", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LATITUDE_NAD83", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LONGITUDE_NAD83", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LONGITUDE_NAD83", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LATITUDE_WGS84", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LATITUDE_WGS84", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LONGITUDE_WGS84", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LONGITUDE_WGS84", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCESSTYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCESSTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPSTYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPSTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPSDATUM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPSDATUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPSDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPSDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUAD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUAD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUADNUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUADNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ELEVATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ELEVATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ELEVATION_NUM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ELEVATION_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ELEVATIONSOURCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ELEVATIONSOURCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HYDROLOGIC_REGIME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HYDROLOGIC_REGIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HYDROLOGIC_CLASS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HYDROLOGIC_CLASS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIRST_SAMPLED_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIRST_SAMPLED_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EST_H_ERROR", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EST_H_ERROR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EST_V_ERROR", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EST_V_ERROR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOC_NOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOC_NOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOC_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOC_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOC_MATERIAL", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOC_MATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GRTS_NUM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GRTS_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAPLAKENUM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPLAKENUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SITESELECTIONNOTES", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SITESELECTIONNOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONTINUOUS_DATA", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONTINUOUS_DATA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SALINITY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SALINITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EMERGENTS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EMERGENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GENESIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GENESIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISLANDS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISLANDS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHORELINE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHORELINE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUBSTRATE_TEXTURE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUBSTRATE_TEXTURE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ECOREGION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ECOREGION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUBSECTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUBSECTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DETSUBCODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DETSUBCODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKEGEOLOGY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKEGEOLOGY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKEGEOLOGYNOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKEGEOLOGYNOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKETYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKETYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKTYPE_CONFIRM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKTYPE_CONFIRM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAKETYPE_FIELDNOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAKETYPE_FIELDNOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DENA_LAKETYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DENA_LAKETYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIREHISTORY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIREHISTORY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PERMAFROST", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PERMAFROST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@zECOREGION", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "zECOREGION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@zSUBSECTION", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "zSUBSECTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PONDNAME, PARK, LATITUDE_NAD83, LONGITUDE_NAD83, LATITUDE_WGS84, LONGITUDE"& _ 
                "_WGS84, ACCESSTYPE, GPSTYPE, GPSDATUM, GPSDATE, QUAD, QUADNUMBER, ELEVATION, ELE"& _ 
                "VATION_NUM, ELEVATIONSOURCE, HYDROLOGIC_REGIME, HYDROLOGIC_CLASS, FIRST_SAMPLED_"& _ 
                "DATE, UPDATED_DATE, EST_H_ERROR, EST_V_ERROR, LOC_NOTES, LOC_TYPE, LOC_MATERIAL,"& _ 
                " GRTS_NUM, MAPLAKENUM, SITESELECTIONNOTES, CONTINUOUS_DATA, SALINITY, EMERGENTS,"& _ 
                " GENESIS, ISLANDS, SHORELINE, SUBSTRATE_TEXTURE, COMMENTS, ECOREGION, SUBSECTION"& _ 
                ", DETSUBCODE, LAKEGEOLOGY, LAKEGEOLOGYNOTES, LAKETYPE, LAKTYPE_CONFIRM, LAKETYPE"& _ 
                "_FIELDNOTES, DENA_LAKETYPE, FIREHISTORY, PERMAFROST, RecordInsertedDate, RecordI"& _ 
                "nsertedBy, RecordUpdatedDate, RecordUpdatedBy, zECOREGION, zSUBSECTION, row_time"& _ 
                "stamp FROM dbo.tblPonds"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblPondsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblPondsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblPondsDataTable = New AK_ShallowLakesDataSet.tblPondsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblPondsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblPonds")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PONDNAME As String, ByVal Original_row_timestamp() As Byte) As Integer
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PONDNAME,String)
            End If
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PONDNAME As String,  _
                    ByVal PARK As String,  _
                    ByVal LATITUDE_NAD83 As Global.System.Nullable(Of Double),  _
                    ByVal LONGITUDE_NAD83 As Global.System.Nullable(Of Double),  _
                    ByVal LATITUDE_WGS84 As Global.System.Nullable(Of Double),  _
                    ByVal LONGITUDE_WGS84 As Global.System.Nullable(Of Double),  _
                    ByVal ACCESSTYPE As String,  _
                    ByVal GPSTYPE As String,  _
                    ByVal GPSDATUM As String,  _
                    ByVal GPSDATE As Global.System.Nullable(Of Date),  _
                    ByVal QUAD As String,  _
                    ByVal QUADNUMBER As String,  _
                    ByVal ELEVATION As String,  _
                    ByVal ELEVATION_NUM As Global.System.Nullable(Of Decimal),  _
                    ByVal ELEVATIONSOURCE As String,  _
                    ByVal HYDROLOGIC_REGIME As Global.System.Nullable(Of Integer),  _
                    ByVal HYDROLOGIC_CLASS As String,  _
                    ByVal FIRST_SAMPLED_DATE As Global.System.Nullable(Of Date),  _
                    ByVal UPDATED_DATE As Global.System.Nullable(Of Date),  _
                    ByVal EST_H_ERROR As Global.System.Nullable(Of Single),  _
                    ByVal EST_V_ERROR As Global.System.Nullable(Of Single),  _
                    ByVal LOC_NOTES As String,  _
                    ByVal LOC_TYPE As String,  _
                    ByVal LOC_MATERIAL As String,  _
                    ByVal GRTS_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal MAPLAKENUM As Global.System.Nullable(Of Integer),  _
                    ByVal SITESELECTIONNOTES As String,  _
                    ByVal CONTINUOUS_DATA As Global.System.Nullable(Of Boolean),  _
                    ByVal SALINITY As String,  _
                    ByVal EMERGENTS As Global.System.Nullable(Of Boolean),  _
                    ByVal GENESIS As String,  _
                    ByVal ISLANDS As Global.System.Nullable(Of Boolean),  _
                    ByVal SHORELINE As String,  _
                    ByVal SUBSTRATE_TEXTURE As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal ECOREGION As String,  _
                    ByVal SUBSECTION As String,  _
                    ByVal DETSUBCODE As String,  _
                    ByVal LAKEGEOLOGY As String,  _
                    ByVal LAKEGEOLOGYNOTES As String,  _
                    ByVal LAKETYPE As String,  _
                    ByVal LAKTYPE_CONFIRM As String,  _
                    ByVal LAKETYPE_FIELDNOTES As String,  _
                    ByVal DENA_LAKETYPE As String,  _
                    ByVal FIREHISTORY As String,  _
                    ByVal PERMAFROST As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal zECOREGION As String,  _
                    ByVal zSUBSECTION As String) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            If (PARK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PARK,String)
            End If
            If (LATITUDE_NAD83.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LATITUDE_NAD83.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (LONGITUDE_NAD83.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LONGITUDE_NAD83.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (LATITUDE_WGS84.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(LATITUDE_WGS84.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (LONGITUDE_WGS84.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(LONGITUDE_WGS84.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ACCESSTYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ACCESSTYPE,String)
            End If
            If (GPSTYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(GPSTYPE,String)
            End If
            If (GPSDATUM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(GPSDATUM,String)
            End If
            If (GPSDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(GPSDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (QUAD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(QUAD,String)
            End If
            If (QUADNUMBER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(QUADNUMBER,String)
            End If
            If (ELEVATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(ELEVATION,String)
            End If
            If (ELEVATION_NUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(ELEVATION_NUM.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (ELEVATIONSOURCE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(ELEVATIONSOURCE,String)
            End If
            If (HYDROLOGIC_REGIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(HYDROLOGIC_REGIME.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (HYDROLOGIC_CLASS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(HYDROLOGIC_CLASS,String)
            End If
            If (FIRST_SAMPLED_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(FIRST_SAMPLED_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(UPDATED_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (EST_H_ERROR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(EST_H_ERROR.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (EST_V_ERROR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(EST_V_ERROR.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (LOC_NOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(LOC_NOTES,String)
            End If
            If (LOC_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(LOC_TYPE,String)
            End If
            If (LOC_MATERIAL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(LOC_MATERIAL,String)
            End If
            If (GRTS_NUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(GRTS_NUM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (MAPLAKENUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(MAPLAKENUM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (SITESELECTIONNOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(SITESELECTIONNOTES,String)
            End If
            If (CONTINUOUS_DATA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(CONTINUOUS_DATA.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (SALINITY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(SALINITY,String)
            End If
            If (EMERGENTS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(EMERGENTS.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (GENESIS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(GENESIS,String)
            End If
            If (ISLANDS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(ISLANDS.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (SHORELINE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(SHORELINE,String)
            End If
            If (SUBSTRATE_TEXTURE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(SUBSTRATE_TEXTURE,String)
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(COMMENTS,String)
            End If
            If (ECOREGION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(ECOREGION,String)
            End If
            If (SUBSECTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(SUBSECTION,String)
            End If
            If (DETSUBCODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(DETSUBCODE,String)
            End If
            If (LAKEGEOLOGY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(LAKEGEOLOGY,String)
            End If
            If (LAKEGEOLOGYNOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(LAKEGEOLOGYNOTES,String)
            End If
            If (LAKETYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(LAKETYPE,String)
            End If
            If (LAKTYPE_CONFIRM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(LAKTYPE_CONFIRM,String)
            End If
            If (LAKETYPE_FIELDNOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(LAKETYPE_FIELDNOTES,String)
            End If
            If (DENA_LAKETYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(DENA_LAKETYPE,String)
            End If
            If (FIREHISTORY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(FIREHISTORY,String)
            End If
            If (PERMAFROST Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(PERMAFROST,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(RecordUpdatedBy,String)
            End If
            If (zECOREGION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(zECOREGION,String)
            End If
            If (zSUBSECTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(zSUBSECTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PONDNAME As String,  _
                    ByVal PARK As String,  _
                    ByVal LATITUDE_NAD83 As Global.System.Nullable(Of Double),  _
                    ByVal LONGITUDE_NAD83 As Global.System.Nullable(Of Double),  _
                    ByVal LATITUDE_WGS84 As Global.System.Nullable(Of Double),  _
                    ByVal LONGITUDE_WGS84 As Global.System.Nullable(Of Double),  _
                    ByVal ACCESSTYPE As String,  _
                    ByVal GPSTYPE As String,  _
                    ByVal GPSDATUM As String,  _
                    ByVal GPSDATE As Global.System.Nullable(Of Date),  _
                    ByVal QUAD As String,  _
                    ByVal QUADNUMBER As String,  _
                    ByVal ELEVATION As String,  _
                    ByVal ELEVATION_NUM As Global.System.Nullable(Of Decimal),  _
                    ByVal ELEVATIONSOURCE As String,  _
                    ByVal HYDROLOGIC_REGIME As Global.System.Nullable(Of Integer),  _
                    ByVal HYDROLOGIC_CLASS As String,  _
                    ByVal FIRST_SAMPLED_DATE As Global.System.Nullable(Of Date),  _
                    ByVal UPDATED_DATE As Global.System.Nullable(Of Date),  _
                    ByVal EST_H_ERROR As Global.System.Nullable(Of Single),  _
                    ByVal EST_V_ERROR As Global.System.Nullable(Of Single),  _
                    ByVal LOC_NOTES As String,  _
                    ByVal LOC_TYPE As String,  _
                    ByVal LOC_MATERIAL As String,  _
                    ByVal GRTS_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal MAPLAKENUM As Global.System.Nullable(Of Integer),  _
                    ByVal SITESELECTIONNOTES As String,  _
                    ByVal CONTINUOUS_DATA As Global.System.Nullable(Of Boolean),  _
                    ByVal SALINITY As String,  _
                    ByVal EMERGENTS As Global.System.Nullable(Of Boolean),  _
                    ByVal GENESIS As String,  _
                    ByVal ISLANDS As Global.System.Nullable(Of Boolean),  _
                    ByVal SHORELINE As String,  _
                    ByVal SUBSTRATE_TEXTURE As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal ECOREGION As String,  _
                    ByVal SUBSECTION As String,  _
                    ByVal DETSUBCODE As String,  _
                    ByVal LAKEGEOLOGY As String,  _
                    ByVal LAKEGEOLOGYNOTES As String,  _
                    ByVal LAKETYPE As String,  _
                    ByVal LAKTYPE_CONFIRM As String,  _
                    ByVal LAKETYPE_FIELDNOTES As String,  _
                    ByVal DENA_LAKETYPE As String,  _
                    ByVal FIREHISTORY As String,  _
                    ByVal PERMAFROST As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal zECOREGION As String,  _
                    ByVal zSUBSECTION As String,  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            If (PARK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PARK,String)
            End If
            If (LATITUDE_NAD83.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LATITUDE_NAD83.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (LONGITUDE_NAD83.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LONGITUDE_NAD83.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (LATITUDE_WGS84.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(LATITUDE_WGS84.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (LONGITUDE_WGS84.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(LONGITUDE_WGS84.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ACCESSTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ACCESSTYPE,String)
            End If
            If (GPSTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(GPSTYPE,String)
            End If
            If (GPSDATUM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(GPSDATUM,String)
            End If
            If (GPSDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(GPSDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (QUAD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(QUAD,String)
            End If
            If (QUADNUMBER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(QUADNUMBER,String)
            End If
            If (ELEVATION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ELEVATION,String)
            End If
            If (ELEVATION_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ELEVATION_NUM.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (ELEVATIONSOURCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ELEVATIONSOURCE,String)
            End If
            If (HYDROLOGIC_REGIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(HYDROLOGIC_REGIME.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (HYDROLOGIC_CLASS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(HYDROLOGIC_CLASS,String)
            End If
            If (FIRST_SAMPLED_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(FIRST_SAMPLED_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(UPDATED_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (EST_H_ERROR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(EST_H_ERROR.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (EST_V_ERROR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(EST_V_ERROR.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (LOC_NOTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(LOC_NOTES,String)
            End If
            If (LOC_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(LOC_TYPE,String)
            End If
            If (LOC_MATERIAL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(LOC_MATERIAL,String)
            End If
            If (GRTS_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(GRTS_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (MAPLAKENUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(MAPLAKENUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (SITESELECTIONNOTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(SITESELECTIONNOTES,String)
            End If
            If (CONTINUOUS_DATA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(CONTINUOUS_DATA.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (SALINITY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(SALINITY,String)
            End If
            If (EMERGENTS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(EMERGENTS.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (GENESIS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(GENESIS,String)
            End If
            If (ISLANDS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(ISLANDS.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (SHORELINE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(SHORELINE,String)
            End If
            If (SUBSTRATE_TEXTURE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(SUBSTRATE_TEXTURE,String)
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(COMMENTS,String)
            End If
            If (ECOREGION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(ECOREGION,String)
            End If
            If (SUBSECTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(SUBSECTION,String)
            End If
            If (DETSUBCODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(DETSUBCODE,String)
            End If
            If (LAKEGEOLOGY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(LAKEGEOLOGY,String)
            End If
            If (LAKEGEOLOGYNOTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(LAKEGEOLOGYNOTES,String)
            End If
            If (LAKETYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(LAKETYPE,String)
            End If
            If (LAKTYPE_CONFIRM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(LAKTYPE_CONFIRM,String)
            End If
            If (LAKETYPE_FIELDNOTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(LAKETYPE_FIELDNOTES,String)
            End If
            If (DENA_LAKETYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(DENA_LAKETYPE,String)
            End If
            If (FIREHISTORY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(FIREHISTORY,String)
            End If
            If (PERMAFROST Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(PERMAFROST,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(RecordUpdatedBy,String)
            End If
            If (zECOREGION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(zECOREGION,String)
            End If
            If (zSUBSECTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(zSUBSECTION,String)
            End If
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_PONDNAME,String)
            End If
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PARK As String,  _
                    ByVal LATITUDE_NAD83 As Global.System.Nullable(Of Double),  _
                    ByVal LONGITUDE_NAD83 As Global.System.Nullable(Of Double),  _
                    ByVal LATITUDE_WGS84 As Global.System.Nullable(Of Double),  _
                    ByVal LONGITUDE_WGS84 As Global.System.Nullable(Of Double),  _
                    ByVal ACCESSTYPE As String,  _
                    ByVal GPSTYPE As String,  _
                    ByVal GPSDATUM As String,  _
                    ByVal GPSDATE As Global.System.Nullable(Of Date),  _
                    ByVal QUAD As String,  _
                    ByVal QUADNUMBER As String,  _
                    ByVal ELEVATION As String,  _
                    ByVal ELEVATION_NUM As Global.System.Nullable(Of Decimal),  _
                    ByVal ELEVATIONSOURCE As String,  _
                    ByVal HYDROLOGIC_REGIME As Global.System.Nullable(Of Integer),  _
                    ByVal HYDROLOGIC_CLASS As String,  _
                    ByVal FIRST_SAMPLED_DATE As Global.System.Nullable(Of Date),  _
                    ByVal UPDATED_DATE As Global.System.Nullable(Of Date),  _
                    ByVal EST_H_ERROR As Global.System.Nullable(Of Single),  _
                    ByVal EST_V_ERROR As Global.System.Nullable(Of Single),  _
                    ByVal LOC_NOTES As String,  _
                    ByVal LOC_TYPE As String,  _
                    ByVal LOC_MATERIAL As String,  _
                    ByVal GRTS_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal MAPLAKENUM As Global.System.Nullable(Of Integer),  _
                    ByVal SITESELECTIONNOTES As String,  _
                    ByVal CONTINUOUS_DATA As Global.System.Nullable(Of Boolean),  _
                    ByVal SALINITY As String,  _
                    ByVal EMERGENTS As Global.System.Nullable(Of Boolean),  _
                    ByVal GENESIS As String,  _
                    ByVal ISLANDS As Global.System.Nullable(Of Boolean),  _
                    ByVal SHORELINE As String,  _
                    ByVal SUBSTRATE_TEXTURE As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal ECOREGION As String,  _
                    ByVal SUBSECTION As String,  _
                    ByVal DETSUBCODE As String,  _
                    ByVal LAKEGEOLOGY As String,  _
                    ByVal LAKEGEOLOGYNOTES As String,  _
                    ByVal LAKETYPE As String,  _
                    ByVal LAKTYPE_CONFIRM As String,  _
                    ByVal LAKETYPE_FIELDNOTES As String,  _
                    ByVal DENA_LAKETYPE As String,  _
                    ByVal FIREHISTORY As String,  _
                    ByVal PERMAFROST As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal zECOREGION As String,  _
                    ByVal zSUBSECTION As String,  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_PONDNAME, PARK, LATITUDE_NAD83, LONGITUDE_NAD83, LATITUDE_WGS84, LONGITUDE_WGS84, ACCESSTYPE, GPSTYPE, GPSDATUM, GPSDATE, QUAD, QUADNUMBER, ELEVATION, ELEVATION_NUM, ELEVATIONSOURCE, HYDROLOGIC_REGIME, HYDROLOGIC_CLASS, FIRST_SAMPLED_DATE, UPDATED_DATE, EST_H_ERROR, EST_V_ERROR, LOC_NOTES, LOC_TYPE, LOC_MATERIAL, GRTS_NUM, MAPLAKENUM, SITESELECTIONNOTES, CONTINUOUS_DATA, SALINITY, EMERGENTS, GENESIS, ISLANDS, SHORELINE, SUBSTRATE_TEXTURE, COMMENTS, ECOREGION, SUBSECTION, DETSUBCODE, LAKEGEOLOGY, LAKEGEOLOGYNOTES, LAKETYPE, LAKTYPE_CONFIRM, LAKETYPE_FIELDNOTES, DENA_LAKETYPE, FIREHISTORY, PERMAFROST, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, zECOREGION, zSUBSECTION, Original_PONDNAME, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblTransQuadratsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblTransQuadrats"
            tableMapping.ColumnMappings.Add("PONDTRANSID", "PONDTRANSID")
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("SAMPLEDATE", "SAMPLEDATE")
            tableMapping.ColumnMappings.Add("TRANSECTNUM", "TRANSECTNUM")
            tableMapping.ColumnMappings.Add("TRANSECT", "TRANSECT")
            tableMapping.ColumnMappings.Add("OBSERVERS", "OBSERVERS")
            tableMapping.ColumnMappings.Add("SPECIES", "SPECIES")
            tableMapping.ColumnMappings.Add("SPECIESOTHER", "SPECIESOTHER")
            tableMapping.ColumnMappings.Add("ANALYSIS_CODE", "ANALYSIS_CODE")
            tableMapping.ColumnMappings.Add("EXCLUDE", "EXCLUDE")
            tableMapping.ColumnMappings.Add("NUMQUADRATSPRESENT", "NUMQUADRATSPRESENT")
            tableMapping.ColumnMappings.Add("TRANS_1A", "TRANS_1A")
            tableMapping.ColumnMappings.Add("TRANS_1B", "TRANS_1B")
            tableMapping.ColumnMappings.Add("TRANS_1C", "TRANS_1C")
            tableMapping.ColumnMappings.Add("TRANS_2A", "TRANS_2A")
            tableMapping.ColumnMappings.Add("TRANS_2B", "TRANS_2B")
            tableMapping.ColumnMappings.Add("TRANS_2C", "TRANS_2C")
            tableMapping.ColumnMappings.Add("TRANS_3A", "TRANS_3A")
            tableMapping.ColumnMappings.Add("TRANS_3B", "TRANS_3B")
            tableMapping.ColumnMappings.Add("TRANS_3C", "TRANS_3C")
            tableMapping.ColumnMappings.Add("TRANS_4A", "TRANS_4A")
            tableMapping.ColumnMappings.Add("TRANS_4B", "TRANS_4B")
            tableMapping.ColumnMappings.Add("TRANS_4C", "TRANS_4C")
            tableMapping.ColumnMappings.Add("TRANS_5A", "TRANS_5A")
            tableMapping.ColumnMappings.Add("TRANS_5B", "TRANS_5B")
            tableMapping.ColumnMappings.Add("TRANS_5C", "TRANS_5C")
            tableMapping.ColumnMappings.Add("TRANS_6A", "TRANS_6A")
            tableMapping.ColumnMappings.Add("TRANS_6B", "TRANS_6B")
            tableMapping.ColumnMappings.Add("TRANS_6C", "TRANS_6C")
            tableMapping.ColumnMappings.Add("TRANS_7A", "TRANS_7A")
            tableMapping.ColumnMappings.Add("TRANS_7B", "TRANS_7B")
            tableMapping.ColumnMappings.Add("TRANS_7C", "TRANS_7C")
            tableMapping.ColumnMappings.Add("TRANS_8A", "TRANS_8A")
            tableMapping.ColumnMappings.Add("TRANS_8B", "TRANS_8B")
            tableMapping.ColumnMappings.Add("TRANS_8C", "TRANS_8C")
            tableMapping.ColumnMappings.Add("TRANS_9A", "TRANS_9A")
            tableMapping.ColumnMappings.Add("TRANS_9B", "TRANS_9B")
            tableMapping.ColumnMappings.Add("TRANS_9C", "TRANS_9C")
            tableMapping.ColumnMappings.Add("TRANS_10A", "TRANS_10A")
            tableMapping.ColumnMappings.Add("TRANS_10B", "TRANS_10B")
            tableMapping.ColumnMappings.Add("TRANS_10C", "TRANS_10C")
            tableMapping.ColumnMappings.Add("TRANS_11A", "TRANS_11A")
            tableMapping.ColumnMappings.Add("TRANS_11B", "TRANS_11B")
            tableMapping.ColumnMappings.Add("TRANS_11C", "TRANS_11C")
            tableMapping.ColumnMappings.Add("TRANS_12A", "TRANS_12A")
            tableMapping.ColumnMappings.Add("TRANS_12B", "TRANS_12B")
            tableMapping.ColumnMappings.Add("TRANS_12C", "TRANS_12C")
            tableMapping.ColumnMappings.Add("TRANS_13A", "TRANS_13A")
            tableMapping.ColumnMappings.Add("TRANS_13B", "TRANS_13B")
            tableMapping.ColumnMappings.Add("TRANS_13C", "TRANS_13C")
            tableMapping.ColumnMappings.Add("TRANS_14A", "TRANS_14A")
            tableMapping.ColumnMappings.Add("TRANS_14B", "TRANS_14B")
            tableMapping.ColumnMappings.Add("TRANS_14C", "TRANS_14C")
            tableMapping.ColumnMappings.Add("QUADNOTES", "QUADNOTES")
            tableMapping.ColumnMappings.Add("DEVICE_ID", "DEVICE_ID")
            tableMapping.ColumnMappings.Add("SAMPLETIME", "SAMPLETIME")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("TransTransectsID", "TransTransectsID")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblTransQuadrats] WHERE (([TransTransectsID] = @Original_Trans"& _ 
                "TransectsID) AND ([row_timestamp] = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TransTransectsID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TransTransectsID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblTransQuadrats] ([PONDTRANSID], [PONDNAME], [SAMPLEDATE], [T"& _ 
                "RANSECTNUM], [TRANSECT], [OBSERVERS], [SPECIES], [SPECIESOTHER], [ANALYSIS_CODE]"& _ 
                ", [EXCLUDE], [TRANS_1A], [TRANS_1B], [TRANS_1C], [TRANS_2A], [TRANS_2B], [TRANS_"& _ 
                "2C], [TRANS_3A], [TRANS_3B], [TRANS_3C], [TRANS_4A], [TRANS_4B], [TRANS_4C], [TR"& _ 
                "ANS_5A], [TRANS_5B], [TRANS_5C], [TRANS_6A], [TRANS_6B], [TRANS_6C], [TRANS_7A],"& _ 
                " [TRANS_7B], [TRANS_7C], [TRANS_8A], [TRANS_8B], [TRANS_8C], [TRANS_9A], [TRANS_"& _ 
                "9B], [TRANS_9C], [TRANS_10A], [TRANS_10B], [TRANS_10C], [TRANS_11A], [TRANS_11B]"& _ 
                ", [TRANS_11C], [TRANS_12A], [TRANS_12B], [TRANS_12C], [TRANS_13A], [TRANS_13B], "& _ 
                "[TRANS_13C], [TRANS_14A], [TRANS_14B], [TRANS_14C], [QUADNOTES], [DEVICE_ID], [S"& _ 
                "AMPLETIME], [RecordInsertedDate], [RecordInsertedBy], [RecordUpdatedDate], [Reco"& _ 
                "rdUpdatedBy]) VALUES (@PONDTRANSID, @PONDNAME, @SAMPLEDATE, @TRANSECTNUM, @TRANS"& _ 
                "ECT, @OBSERVERS, @SPECIES, @SPECIESOTHER, @ANALYSIS_CODE, @EXCLUDE, @TRANS_1A, @"& _ 
                "TRANS_1B, @TRANS_1C, @TRANS_2A, @TRANS_2B, @TRANS_2C, @TRANS_3A, @TRANS_3B, @TRA"& _ 
                "NS_3C, @TRANS_4A, @TRANS_4B, @TRANS_4C, @TRANS_5A, @TRANS_5B, @TRANS_5C, @TRANS_"& _ 
                "6A, @TRANS_6B, @TRANS_6C, @TRANS_7A, @TRANS_7B, @TRANS_7C, @TRANS_8A, @TRANS_8B,"& _ 
                " @TRANS_8C, @TRANS_9A, @TRANS_9B, @TRANS_9C, @TRANS_10A, @TRANS_10B, @TRANS_10C,"& _ 
                " @TRANS_11A, @TRANS_11B, @TRANS_11C, @TRANS_12A, @TRANS_12B, @TRANS_12C, @TRANS_"& _ 
                "13A, @TRANS_13B, @TRANS_13C, @TRANS_14A, @TRANS_14B, @TRANS_14C, @QUADNOTES, @DE"& _ 
                "VICE_ID, @SAMPLETIME, @RecordInsertedDate, @RecordInsertedBy, @RecordUpdatedDate"& _ 
                ", @RecordUpdatedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PONDTRANSID, PONDNAME, SAMPLEDATE, TRANSECTNUM, TRA"& _ 
                "NSECT, OBSERVERS, SPECIES, SPECIESOTHER, ANALYSIS_CODE, EXCLUDE, NUMQUADRATSPRES"& _ 
                "ENT, TRANS_1A, TRANS_1B, TRANS_1C, TRANS_2A, TRANS_2B, TRANS_2C, TRANS_3A, TRANS"& _ 
                "_3B, TRANS_3C, TRANS_4A, TRANS_4B, TRANS_4C, TRANS_5A, TRANS_5B, TRANS_5C, TRANS"& _ 
                "_6A, TRANS_6B, TRANS_6C, TRANS_7A, TRANS_7B, TRANS_7C, TRANS_8A, TRANS_8B, TRANS"& _ 
                "_8C, TRANS_9A, TRANS_9B, TRANS_9C, TRANS_10A, TRANS_10B, TRANS_10C, TRANS_11A, T"& _ 
                "RANS_11B, TRANS_11C, TRANS_12A, TRANS_12B, TRANS_12C, TRANS_13A, TRANS_13B, TRAN"& _ 
                "S_13C, TRANS_14A, TRANS_14B, TRANS_14C, QUADNOTES, DEVICE_ID, SAMPLETIME, Record"& _ 
                "InsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, TransTransec"& _ 
                "tsID, row_timestamp FROM tblTransQuadrats WHERE (TransTransectsID = SCOPE_IDENTI"& _ 
                "TY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDTRANSID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDTRANSID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSECTNUM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSECTNUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSECT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSECT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OBSERVERS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBSERVERS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIESOTHER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIESOTHER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANALYSIS_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANALYSIS_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXCLUDE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXCLUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_1A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_1A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_1B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_1B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_1C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_1C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_2A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_2A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_2B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_2B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_2C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_2C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_3A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_3A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_3B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_3B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_3C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_3C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_4A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_4A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_4B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_4B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_4C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_4C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_5A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_5A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_5B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_5B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_5C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_5C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_6A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_6A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_6B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_6B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_6C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_6C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_7A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_7A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_7B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_7B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_7C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_7C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_8A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_8A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_8B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_8B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_8C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_8C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_9A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_9A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_9B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_9B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_9C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_9C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_10A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_10A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_10B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_10B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_10C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_10C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_11A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_11A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_11B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_11B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_11C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_11C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_12A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_12A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_12B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_12B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_12C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_12C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_13A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_13A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_13B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_13B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_13C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_13C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_14A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_14A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_14B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_14B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_14C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_14C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUADNOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUADNOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEVICE_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEVICE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLETIME", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLETIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblTransQuadrats] SET [PONDTRANSID] = @PONDTRANSID, [PONDNAME] = @P"& _ 
                "ONDNAME, [SAMPLEDATE] = @SAMPLEDATE, [TRANSECTNUM] = @TRANSECTNUM, [TRANSECT] = "& _ 
                "@TRANSECT, [OBSERVERS] = @OBSERVERS, [SPECIES] = @SPECIES, [SPECIESOTHER] = @SPE"& _ 
                "CIESOTHER, [ANALYSIS_CODE] = @ANALYSIS_CODE, [EXCLUDE] = @EXCLUDE, [TRANS_1A] = "& _ 
                "@TRANS_1A, [TRANS_1B] = @TRANS_1B, [TRANS_1C] = @TRANS_1C, [TRANS_2A] = @TRANS_2"& _ 
                "A, [TRANS_2B] = @TRANS_2B, [TRANS_2C] = @TRANS_2C, [TRANS_3A] = @TRANS_3A, [TRAN"& _ 
                "S_3B] = @TRANS_3B, [TRANS_3C] = @TRANS_3C, [TRANS_4A] = @TRANS_4A, [TRANS_4B] = "& _ 
                "@TRANS_4B, [TRANS_4C] = @TRANS_4C, [TRANS_5A] = @TRANS_5A, [TRANS_5B] = @TRANS_5"& _ 
                "B, [TRANS_5C] = @TRANS_5C, [TRANS_6A] = @TRANS_6A, [TRANS_6B] = @TRANS_6B, [TRAN"& _ 
                "S_6C] = @TRANS_6C, [TRANS_7A] = @TRANS_7A, [TRANS_7B] = @TRANS_7B, [TRANS_7C] = "& _ 
                "@TRANS_7C, [TRANS_8A] = @TRANS_8A, [TRANS_8B] = @TRANS_8B, [TRANS_8C] = @TRANS_8"& _ 
                "C, [TRANS_9A] = @TRANS_9A, [TRANS_9B] = @TRANS_9B, [TRANS_9C] = @TRANS_9C, [TRAN"& _ 
                "S_10A] = @TRANS_10A, [TRANS_10B] = @TRANS_10B, [TRANS_10C] = @TRANS_10C, [TRANS_"& _ 
                "11A] = @TRANS_11A, [TRANS_11B] = @TRANS_11B, [TRANS_11C] = @TRANS_11C, [TRANS_12"& _ 
                "A] = @TRANS_12A, [TRANS_12B] = @TRANS_12B, [TRANS_12C] = @TRANS_12C, [TRANS_13A]"& _ 
                " = @TRANS_13A, [TRANS_13B] = @TRANS_13B, [TRANS_13C] = @TRANS_13C, [TRANS_14A] ="& _ 
                " @TRANS_14A, [TRANS_14B] = @TRANS_14B, [TRANS_14C] = @TRANS_14C, [QUADNOTES] = @"& _ 
                "QUADNOTES, [DEVICE_ID] = @DEVICE_ID, [SAMPLETIME] = @SAMPLETIME, [RecordInserted"& _ 
                "Date] = @RecordInsertedDate, [RecordInsertedBy] = @RecordInsertedBy, [RecordUpda"& _ 
                "tedDate] = @RecordUpdatedDate, [RecordUpdatedBy] = @RecordUpdatedBy WHERE (([Tra"& _ 
                "nsTransectsID] = @Original_TransTransectsID) AND ([row_timestamp] = @Original_ro"& _ 
                "w_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PONDTRANSID, PONDNAME, SAMPLEDATE, TRANSECTNUM, TRANSECT,"& _ 
                " OBSERVERS, SPECIES, SPECIESOTHER, ANALYSIS_CODE, EXCLUDE, NUMQUADRATSPRESENT, T"& _ 
                "RANS_1A, TRANS_1B, TRANS_1C, TRANS_2A, TRANS_2B, TRANS_2C, TRANS_3A, TRANS_3B, T"& _ 
                "RANS_3C, TRANS_4A, TRANS_4B, TRANS_4C, TRANS_5A, TRANS_5B, TRANS_5C, TRANS_6A, T"& _ 
                "RANS_6B, TRANS_6C, TRANS_7A, TRANS_7B, TRANS_7C, TRANS_8A, TRANS_8B, TRANS_8C, T"& _ 
                "RANS_9A, TRANS_9B, TRANS_9C, TRANS_10A, TRANS_10B, TRANS_10C, TRANS_11A, TRANS_1"& _ 
                "1B, TRANS_11C, TRANS_12A, TRANS_12B, TRANS_12C, TRANS_13A, TRANS_13B, TRANS_13C,"& _ 
                " TRANS_14A, TRANS_14B, TRANS_14C, QUADNOTES, DEVICE_ID, SAMPLETIME, RecordInsert"& _ 
                "edDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, TransTransectsID, "& _ 
                "row_timestamp FROM tblTransQuadrats WHERE (TransTransectsID = @TransTransectsID)"& _ 
                ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDTRANSID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDTRANSID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSECTNUM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSECTNUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSECT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSECT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OBSERVERS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBSERVERS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIESOTHER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIESOTHER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANALYSIS_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANALYSIS_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXCLUDE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXCLUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_1A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_1A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_1B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_1B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_1C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_1C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_2A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_2A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_2B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_2B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_2C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_2C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_3A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_3A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_3B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_3B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_3C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_3C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_4A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_4A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_4B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_4B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_4C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_4C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_5A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_5A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_5B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_5B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_5C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_5C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_6A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_6A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_6B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_6B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_6C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_6C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_7A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_7A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_7B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_7B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_7C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_7C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_8A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_8A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_8B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_8B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_8C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_8C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_9A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_9A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_9B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_9B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_9C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_9C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_10A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_10A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_10B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_10B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_10C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_10C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_11A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_11A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_11B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_11B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_11C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_11C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_12A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_12A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_12B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_12B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_12C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_12C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_13A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_13A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_13B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_13B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_13C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_13C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_14A", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_14A", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_14B", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_14B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANS_14C", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANS_14C", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QUADNOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QUADNOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEVICE_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEVICE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLETIME", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLETIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TransTransectsID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TransTransectsID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TransTransectsID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TransTransectsID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PONDTRANSID, PONDNAME, SAMPLEDATE, TRANSECTNUM, TRANSECT, OBSERVERS, SPECI"& _ 
                "ES, SPECIESOTHER, ANALYSIS_CODE, EXCLUDE, NUMQUADRATSPRESENT, TRANS_1A, TRANS_1B"& _ 
                ", TRANS_1C, TRANS_2A, TRANS_2B, TRANS_2C, TRANS_3A, TRANS_3B, TRANS_3C, TRANS_4A"& _ 
                ", TRANS_4B, TRANS_4C, TRANS_5A, TRANS_5B, TRANS_5C, TRANS_6A, TRANS_6B, TRANS_6C"& _ 
                ", TRANS_7A, TRANS_7B, TRANS_7C, TRANS_8A, TRANS_8B, TRANS_8C, TRANS_9A, TRANS_9B"& _ 
                ", TRANS_9C, TRANS_10A, TRANS_10B, TRANS_10C, TRANS_11A, TRANS_11B, TRANS_11C, TR"& _ 
                "ANS_12A, TRANS_12B, TRANS_12C, TRANS_13A, TRANS_13B, TRANS_13C, TRANS_14A, TRANS"& _ 
                "_14B, TRANS_14C, QUADNOTES, DEVICE_ID, SAMPLETIME, RecordInsertedDate, RecordIns"& _ 
                "ertedBy, RecordUpdatedDate, RecordUpdatedBy, TransTransectsID, row_timestamp FRO"& _ 
                "M dbo.tblTransQuadrats"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblTransQuadratsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblTransQuadratsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblTransQuadratsDataTable = New AK_ShallowLakesDataSet.tblTransQuadratsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblTransQuadratsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblTransQuadrats")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TransTransectsID As Integer, ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TransTransectsID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PONDTRANSID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal TRANSECTNUM As String,  _
                    ByVal TRANSECT As Integer,  _
                    ByVal OBSERVERS As String,  _
                    ByVal SPECIES As String,  _
                    ByVal SPECIESOTHER As String,  _
                    ByVal ANALYSIS_CODE As String,  _
                    ByVal EXCLUDE As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_1A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_1B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_1C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_2A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_2B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_2C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_3A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_3B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_3C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_4A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_4B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_4C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_5A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_5B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_5C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_6A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_6B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_6C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_7A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_7B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_7C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_8A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_8B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_8C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_9A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_9B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_9C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_10A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_10B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_10C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_11A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_11B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_11C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_12A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_12B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_12C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_13A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_13B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_13C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_14A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_14B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_14C As Global.System.Nullable(Of Boolean),  _
                    ByVal QUADNOTES As String,  _
                    ByVal DEVICE_ID As String,  _
                    ByVal SAMPLETIME As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(PONDTRANSID,Long)
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAMPLEDATE,Date)
            If (TRANSECTNUM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TRANSECTNUM,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(TRANSECT,Integer)
            If (OBSERVERS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(OBSERVERS,String)
            End If
            If (SPECIES Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPECIES")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SPECIES,String)
            End If
            If (SPECIESOTHER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SPECIESOTHER,String)
            End If
            If (ANALYSIS_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ANALYSIS_CODE,String)
            End If
            If (EXCLUDE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(EXCLUDE.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (TRANS_1A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(TRANS_1A.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (TRANS_1B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(TRANS_1B.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TRANS_1C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(TRANS_1C.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (TRANS_2A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(TRANS_2A.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (TRANS_2B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(TRANS_2B.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (TRANS_2C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(TRANS_2C.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (TRANS_3A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(TRANS_3A.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (TRANS_3B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(TRANS_3B.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (TRANS_3C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(TRANS_3C.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (TRANS_4A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(TRANS_4A.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (TRANS_4B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(TRANS_4B.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (TRANS_4C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(TRANS_4C.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (TRANS_5A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(TRANS_5A.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (TRANS_5B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(TRANS_5B.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (TRANS_5C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(TRANS_5C.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (TRANS_6A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(TRANS_6A.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (TRANS_6B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(TRANS_6B.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (TRANS_6C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(TRANS_6C.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (TRANS_7A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(TRANS_7A.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (TRANS_7B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(TRANS_7B.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (TRANS_7C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(TRANS_7C.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (TRANS_8A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(TRANS_8A.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (TRANS_8B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(TRANS_8B.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (TRANS_8C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(TRANS_8C.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (TRANS_9A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(TRANS_9A.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (TRANS_9B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(TRANS_9B.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (TRANS_9C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(TRANS_9C.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (TRANS_10A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(TRANS_10A.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (TRANS_10B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(TRANS_10B.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (TRANS_10C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(TRANS_10C.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (TRANS_11A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(TRANS_11A.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (TRANS_11B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(TRANS_11B.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (TRANS_11C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(TRANS_11C.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (TRANS_12A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(TRANS_12A.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (TRANS_12B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(TRANS_12B.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (TRANS_12C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(TRANS_12C.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (TRANS_13A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(TRANS_13A.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (TRANS_13B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(TRANS_13B.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (TRANS_13C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(TRANS_13C.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (TRANS_14A.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(TRANS_14A.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (TRANS_14B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(TRANS_14B.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (TRANS_14C.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(TRANS_14C.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (QUADNOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(QUADNOTES,String)
            End If
            If (DEVICE_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(DEVICE_ID,String)
            End If
            If (SAMPLETIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(SAMPLETIME.Value,System.TimeSpan)
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PONDTRANSID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal TRANSECTNUM As String,  _
                    ByVal TRANSECT As Integer,  _
                    ByVal OBSERVERS As String,  _
                    ByVal SPECIES As String,  _
                    ByVal SPECIESOTHER As String,  _
                    ByVal ANALYSIS_CODE As String,  _
                    ByVal EXCLUDE As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_1A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_1B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_1C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_2A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_2B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_2C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_3A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_3B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_3C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_4A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_4B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_4C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_5A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_5B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_5C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_6A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_6B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_6C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_7A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_7B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_7C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_8A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_8B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_8C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_9A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_9B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_9C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_10A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_10B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_10C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_11A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_11B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_11C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_12A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_12B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_12C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_13A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_13B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_13C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_14A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_14B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_14C As Global.System.Nullable(Of Boolean),  _
                    ByVal QUADNOTES As String,  _
                    ByVal DEVICE_ID As String,  _
                    ByVal SAMPLETIME As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_TransTransectsID As Integer,  _
                    ByVal Original_row_timestamp() As Byte,  _
                    ByVal TransTransectsID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PONDTRANSID,Long)
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAMPLEDATE,Date)
            If (TRANSECTNUM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TRANSECTNUM,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TRANSECT,Integer)
            If (OBSERVERS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(OBSERVERS,String)
            End If
            If (SPECIES Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPECIES")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SPECIES,String)
            End If
            If (SPECIESOTHER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SPECIESOTHER,String)
            End If
            If (ANALYSIS_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ANALYSIS_CODE,String)
            End If
            If (EXCLUDE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(EXCLUDE.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (TRANS_1A.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(TRANS_1A.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (TRANS_1B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(TRANS_1B.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (TRANS_1C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(TRANS_1C.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (TRANS_2A.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(TRANS_2A.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (TRANS_2B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(TRANS_2B.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (TRANS_2C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(TRANS_2C.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (TRANS_3A.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(TRANS_3A.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (TRANS_3B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(TRANS_3B.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (TRANS_3C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(TRANS_3C.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (TRANS_4A.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(TRANS_4A.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (TRANS_4B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(TRANS_4B.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (TRANS_4C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(TRANS_4C.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (TRANS_5A.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(TRANS_5A.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (TRANS_5B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(TRANS_5B.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (TRANS_5C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(TRANS_5C.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (TRANS_6A.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(TRANS_6A.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (TRANS_6B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(TRANS_6B.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (TRANS_6C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(TRANS_6C.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (TRANS_7A.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(TRANS_7A.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (TRANS_7B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(TRANS_7B.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (TRANS_7C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(TRANS_7C.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (TRANS_8A.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(TRANS_8A.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (TRANS_8B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(TRANS_8B.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (TRANS_8C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(TRANS_8C.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (TRANS_9A.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(TRANS_9A.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (TRANS_9B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(TRANS_9B.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (TRANS_9C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(TRANS_9C.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (TRANS_10A.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(TRANS_10A.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (TRANS_10B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(TRANS_10B.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (TRANS_10C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(TRANS_10C.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (TRANS_11A.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(TRANS_11A.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (TRANS_11B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(TRANS_11B.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (TRANS_11C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(TRANS_11C.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (TRANS_12A.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(TRANS_12A.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (TRANS_12B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(TRANS_12B.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (TRANS_12C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(TRANS_12C.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (TRANS_13A.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(TRANS_13A.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (TRANS_13B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(TRANS_13B.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (TRANS_13C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(TRANS_13C.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (TRANS_14A.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(TRANS_14A.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (TRANS_14B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(TRANS_14B.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (TRANS_14C.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(TRANS_14C.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (QUADNOTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(QUADNOTES,String)
            End If
            If (DEVICE_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(DEVICE_ID,String)
            End If
            If (SAMPLETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(SAMPLETIME.Value,System.TimeSpan)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(RecordUpdatedBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_TransTransectsID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_row_timestamp,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(61).Value = CType(TransTransectsID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PONDTRANSID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal TRANSECTNUM As String,  _
                    ByVal TRANSECT As Integer,  _
                    ByVal OBSERVERS As String,  _
                    ByVal SPECIES As String,  _
                    ByVal SPECIESOTHER As String,  _
                    ByVal ANALYSIS_CODE As String,  _
                    ByVal EXCLUDE As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_1A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_1B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_1C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_2A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_2B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_2C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_3A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_3B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_3C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_4A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_4B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_4C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_5A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_5B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_5C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_6A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_6B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_6C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_7A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_7B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_7C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_8A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_8B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_8C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_9A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_9B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_9C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_10A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_10B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_10C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_11A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_11B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_11C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_12A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_12B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_12C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_13A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_13B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_13C As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_14A As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_14B As Global.System.Nullable(Of Boolean),  _
                    ByVal TRANS_14C As Global.System.Nullable(Of Boolean),  _
                    ByVal QUADNOTES As String,  _
                    ByVal DEVICE_ID As String,  _
                    ByVal SAMPLETIME As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_TransTransectsID As Integer,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(PONDTRANSID, PONDNAME, SAMPLEDATE, TRANSECTNUM, TRANSECT, OBSERVERS, SPECIES, SPECIESOTHER, ANALYSIS_CODE, EXCLUDE, TRANS_1A, TRANS_1B, TRANS_1C, TRANS_2A, TRANS_2B, TRANS_2C, TRANS_3A, TRANS_3B, TRANS_3C, TRANS_4A, TRANS_4B, TRANS_4C, TRANS_5A, TRANS_5B, TRANS_5C, TRANS_6A, TRANS_6B, TRANS_6C, TRANS_7A, TRANS_7B, TRANS_7C, TRANS_8A, TRANS_8B, TRANS_8C, TRANS_9A, TRANS_9B, TRANS_9C, TRANS_10A, TRANS_10B, TRANS_10C, TRANS_11A, TRANS_11B, TRANS_11C, TRANS_12A, TRANS_12B, TRANS_12C, TRANS_13A, TRANS_13B, TRANS_13C, TRANS_14A, TRANS_14B, TRANS_14C, QUADNOTES, DEVICE_ID, SAMPLETIME, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_TransTransectsID, Original_row_timestamp, Original_TransTransectsID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblTransSpeciesPointInterceptsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblTransSpeciesPointIntercepts"
            tableMapping.ColumnMappings.Add("SPPNTINTID", "SPPNTINTID")
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("SAMPLEDATE", "SAMPLEDATE")
            tableMapping.ColumnMappings.Add("TRANSECTNUM", "TRANSECTNUM")
            tableMapping.ColumnMappings.Add("DISTANCE_CM", "DISTANCE_CM")
            tableMapping.ColumnMappings.Add("DEPTH_CM", "DEPTH_CM")
            tableMapping.ColumnMappings.Add("SPECIES_1", "SPECIES_1")
            tableMapping.ColumnMappings.Add("SPECIES_2", "SPECIES_2")
            tableMapping.ColumnMappings.Add("SPECIES_3", "SPECIES_3")
            tableMapping.ColumnMappings.Add("SPECIES_4", "SPECIES_4")
            tableMapping.ColumnMappings.Add("SPECIES_5", "SPECIES_5")
            tableMapping.ColumnMappings.Add("COMMENTS", "COMMENTS")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("TransSpeciesPointInterceptsID", "TransSpeciesPointInterceptsID")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblTransSpeciesPointIntercepts] WHERE (([TransSpeciesPointInte"& _ 
                "rceptsID] = @Original_TransSpeciesPointInterceptsID) AND ([row_timestamp] = @Ori"& _ 
                "ginal_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TransSpeciesPointInterceptsID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TransSpeciesPointInterceptsID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblTransSpeciesPointIntercepts] ([SPPNTINTID], [PONDNAME], [SA"& _ 
                "MPLEDATE], [TRANSECTNUM], [DISTANCE_CM], [DEPTH_CM], [SPECIES_1], [SPECIES_2], ["& _ 
                "SPECIES_3], [SPECIES_4], [SPECIES_5], [COMMENTS], [RecordInsertedDate], [RecordI"& _ 
                "nsertedBy], [RecordUpdatedDate], [RecordUpdatedBy]) VALUES (@SPPNTINTID, @PONDNA"& _ 
                "ME, @SAMPLEDATE, @TRANSECTNUM, @DISTANCE_CM, @DEPTH_CM, @SPECIES_1, @SPECIES_2, "& _ 
                "@SPECIES_3, @SPECIES_4, @SPECIES_5, @COMMENTS, @RecordInsertedDate, @RecordInser"& _ 
                "tedBy, @RecordUpdatedDate, @RecordUpdatedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPPNTINTID, PONDNAME, SAMP"& _ 
                "LEDATE, TRANSECTNUM, DISTANCE_CM, DEPTH_CM, SPECIES_1, SPECIES_2, SPECIES_3, SPE"& _ 
                "CIES_4, SPECIES_5, COMMENTS, RecordInsertedDate, RecordInsertedBy, RecordUpdated"& _ 
                "Date, RecordUpdatedBy, TransSpeciesPointInterceptsID, row_timestamp FROM tblTran"& _ 
                "sSpeciesPointIntercepts WHERE (TransSpeciesPointInterceptsID = SCOPE_IDENTITY())"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPPNTINTID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPPNTINTID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSECTNUM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSECTNUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISTANCE_CM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISTANCE_CM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEPTH_CM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEPTH_CM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES_1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES_2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES_3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES_3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES_4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES_4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES_5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES_5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblTransSpeciesPointIntercepts] SET [SPPNTINTID] = @SPPNTINTID, [PO"& _ 
                "NDNAME] = @PONDNAME, [SAMPLEDATE] = @SAMPLEDATE, [TRANSECTNUM] = @TRANSECTNUM, ["& _ 
                "DISTANCE_CM] = @DISTANCE_CM, [DEPTH_CM] = @DEPTH_CM, [SPECIES_1] = @SPECIES_1, ["& _ 
                "SPECIES_2] = @SPECIES_2, [SPECIES_3] = @SPECIES_3, [SPECIES_4] = @SPECIES_4, [SP"& _ 
                "ECIES_5] = @SPECIES_5, [COMMENTS] = @COMMENTS, [RecordInsertedDate] = @RecordIns"& _ 
                "ertedDate, [RecordInsertedBy] = @RecordInsertedBy, [RecordUpdatedDate] = @Record"& _ 
                "UpdatedDate, [RecordUpdatedBy] = @RecordUpdatedBy WHERE (([TransSpeciesPointInte"& _ 
                "rceptsID] = @Original_TransSpeciesPointInterceptsID) AND ([row_timestamp] = @Ori"& _ 
                "ginal_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPPNTINTID, PONDNAME, SAMPLEDATE, TRANSECTNUM, DI"& _ 
                "STANCE_CM, DEPTH_CM, SPECIES_1, SPECIES_2, SPECIES_3, SPECIES_4, SPECIES_5, COMM"& _ 
                "ENTS, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, "& _ 
                "TransSpeciesPointInterceptsID, row_timestamp FROM tblTransSpeciesPointIntercepts"& _ 
                " WHERE (TransSpeciesPointInterceptsID = @TransSpeciesPointInterceptsID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPPNTINTID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPPNTINTID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSECTNUM", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSECTNUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISTANCE_CM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISTANCE_CM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEPTH_CM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEPTH_CM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES_1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES_2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES_3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES_3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES_4", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES_4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES_5", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES_5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TransSpeciesPointInterceptsID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TransSpeciesPointInterceptsID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TransSpeciesPointInterceptsID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "TransSpeciesPointInterceptsID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPPNTINTID, PONDNAME, SAMPLEDATE, TRANSECTNUM, DISTANCE_CM, DEPTH_CM, SPEC"& _ 
                "IES_1, SPECIES_2, SPECIES_3, SPECIES_4, SPECIES_5, COMMENTS, RecordInsertedDate,"& _ 
                " RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, TransSpeciesPointIntercep"& _ 
                "tsID, row_timestamp FROM dbo.tblTransSpeciesPointIntercepts"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblTransSpeciesPointInterceptsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblTransSpeciesPointInterceptsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblTransSpeciesPointInterceptsDataTable = New AK_ShallowLakesDataSet.tblTransSpeciesPointInterceptsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblTransSpeciesPointInterceptsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblTransSpeciesPointIntercepts")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TransSpeciesPointInterceptsID As Integer, ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TransSpeciesPointInterceptsID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal SPPNTINTID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal TRANSECTNUM As String,  _
                    ByVal DISTANCE_CM As Global.System.Nullable(Of Integer),  _
                    ByVal DEPTH_CM As Global.System.Nullable(Of Integer),  _
                    ByVal SPECIES_1 As String,  _
                    ByVal SPECIES_2 As String,  _
                    ByVal SPECIES_3 As String,  _
                    ByVal SPECIES_4 As String,  _
                    ByVal SPECIES_5 As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPPNTINTID,Long)
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAMPLEDATE,Date)
            If (TRANSECTNUM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRANSECTNUM")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TRANSECTNUM,String)
            End If
            If (DISTANCE_CM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DISTANCE_CM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DEPTH_CM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DEPTH_CM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (SPECIES_1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SPECIES_1,String)
            End If
            If (SPECIES_2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SPECIES_2,String)
            End If
            If (SPECIES_3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SPECIES_3,String)
            End If
            If (SPECIES_4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SPECIES_4,String)
            End If
            If (SPECIES_5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SPECIES_5,String)
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(COMMENTS,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SPPNTINTID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal TRANSECTNUM As String,  _
                    ByVal DISTANCE_CM As Global.System.Nullable(Of Integer),  _
                    ByVal DEPTH_CM As Global.System.Nullable(Of Integer),  _
                    ByVal SPECIES_1 As String,  _
                    ByVal SPECIES_2 As String,  _
                    ByVal SPECIES_3 As String,  _
                    ByVal SPECIES_4 As String,  _
                    ByVal SPECIES_5 As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_TransSpeciesPointInterceptsID As Integer,  _
                    ByVal Original_row_timestamp() As Byte,  _
                    ByVal TransSpeciesPointInterceptsID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPPNTINTID,Long)
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAMPLEDATE,Date)
            If (TRANSECTNUM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TRANSECTNUM")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TRANSECTNUM,String)
            End If
            If (DISTANCE_CM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DISTANCE_CM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DEPTH_CM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DEPTH_CM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (SPECIES_1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SPECIES_1,String)
            End If
            If (SPECIES_2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SPECIES_2,String)
            End If
            If (SPECIES_3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SPECIES_3,String)
            End If
            If (SPECIES_4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SPECIES_4,String)
            End If
            If (SPECIES_5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SPECIES_5,String)
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(COMMENTS,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(RecordUpdatedBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_TransSpeciesPointInterceptsID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_row_timestamp,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(TransSpeciesPointInterceptsID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SPPNTINTID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal TRANSECTNUM As String,  _
                    ByVal DISTANCE_CM As Global.System.Nullable(Of Integer),  _
                    ByVal DEPTH_CM As Global.System.Nullable(Of Integer),  _
                    ByVal SPECIES_1 As String,  _
                    ByVal SPECIES_2 As String,  _
                    ByVal SPECIES_3 As String,  _
                    ByVal SPECIES_4 As String,  _
                    ByVal SPECIES_5 As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_TransSpeciesPointInterceptsID As Integer,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(SPPNTINTID, PONDNAME, SAMPLEDATE, TRANSECTNUM, DISTANCE_CM, DEPTH_CM, SPECIES_1, SPECIES_2, SPECIES_3, SPECIES_4, SPECIES_5, COMMENTS, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_TransSpeciesPointInterceptsID, Original_row_timestamp, Original_TransSpeciesPointInterceptsID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblUSGSLabDataTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblUSGSLabData"
            tableMapping.ColumnMappings.Add("Master_Num", "Master_Num")
            tableMapping.ColumnMappings.Add("SiteName", "SiteName")
            tableMapping.ColumnMappings.Add("SiteDate", "SiteDate")
            tableMapping.ColumnMappings.Add("SampleNumber", "SampleNumber")
            tableMapping.ColumnMappings.Add("AnalysisLab", "AnalysisLab")
            tableMapping.ColumnMappings.Add("DOC_WW", "DOC_WW")
            tableMapping.ColumnMappings.Add("UV_WW", "UV_WW")
            tableMapping.ColumnMappings.Add("SUVA_WW", "SUVA_WW")
            tableMapping.ColumnMappings.Add("Delta_H2", "Delta_H2")
            tableMapping.ColumnMappings.Add("d2H_StdDev", "d2H_StdDev")
            tableMapping.ColumnMappings.Add("Delta_O18", "Delta_O18")
            tableMapping.ColumnMappings.Add("d18O_StdDev", "d18O_StdDev")
            tableMapping.ColumnMappings.Add("NumReplicates", "NumReplicates")
            tableMapping.ColumnMappings.Add("CO2_ppm", "CO2_ppm")
            tableMapping.ColumnMappings.Add("CH4_ppm", "CH4_ppm")
            tableMapping.ColumnMappings.Add("DIC_umolesL", "DIC_umolesL")
            tableMapping.ColumnMappings.Add("DateAnalyzed", "DateAnalyzed")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("USGSLabDataID", "USGSLabDataID")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblUSGSLabData] WHERE (([USGSLabDataID] = @Original_USGSLabDat"& _ 
                "aID) AND ([row_timestamp] = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USGSLabDataID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USGSLabDataID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblUSGSLabData] ([Master_Num], [SiteName], [SiteDate], [Sample"& _ 
                "Number], [AnalysisLab], [DOC_WW], [UV_WW], [SUVA_WW], [Delta_H2], [d2H_StdDev], "& _ 
                "[Delta_O18], [d18O_StdDev], [NumReplicates], [CO2_ppm], [CH4_ppm], [DIC_umolesL]"& _ 
                ", [DateAnalyzed], [Comments], [RecordInsertedDate], [RecordInsertedBy], [RecordU"& _ 
                "pdatedDate], [RecordUpdatedBy]) VALUES (@Master_Num, @SiteName, @SiteDate, @Samp"& _ 
                "leNumber, @AnalysisLab, @DOC_WW, @UV_WW, @SUVA_WW, @Delta_H2, @d2H_StdDev, @Delt"& _ 
                "a_O18, @d18O_StdDev, @NumReplicates, @CO2_ppm, @CH4_ppm, @DIC_umolesL, @DateAnal"& _ 
                "yzed, @Comments, @RecordInsertedDate, @RecordInsertedBy, @RecordUpdatedDate, @Re"& _ 
                "cordUpdatedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Master_Num, SiteName, SiteDate, SampleNumber, AnalysisLa"& _ 
                "b, DOC_WW, UV_WW, SUVA_WW, Delta_H2, d2H_StdDev, Delta_O18, d18O_StdDev, NumRepl"& _ 
                "icates, CO2_ppm, CH4_ppm, DIC_umolesL, DateAnalyzed, Comments, RecordInsertedDat"& _ 
                "e, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, USGSLabDataID, row_time"& _ 
                "stamp FROM tblUSGSLabData WHERE (USGSLabDataID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Master_Num", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Num", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SampleNumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SampleNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnalysisLab", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnalysisLab", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOC_WW", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOC_WW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UV_WW", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UV_WW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUVA_WW", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUVA_WW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delta_H2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Delta_H2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d2H_StdDev", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "d2H_StdDev", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delta_O18", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Delta_O18", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d18O_StdDev", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "d18O_StdDev", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumReplicates", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumReplicates", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CO2_ppm", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CO2_ppm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CH4_ppm", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CH4_ppm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIC_umolesL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIC_umolesL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateAnalyzed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAnalyzed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comments", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblUSGSLabData] SET [Master_Num] = @Master_Num, [SiteName] = @SiteN"& _ 
                "ame, [SiteDate] = @SiteDate, [SampleNumber] = @SampleNumber, [AnalysisLab] = @An"& _ 
                "alysisLab, [DOC_WW] = @DOC_WW, [UV_WW] = @UV_WW, [SUVA_WW] = @SUVA_WW, [Delta_H2"& _ 
                "] = @Delta_H2, [d2H_StdDev] = @d2H_StdDev, [Delta_O18] = @Delta_O18, [d18O_StdDe"& _ 
                "v] = @d18O_StdDev, [NumReplicates] = @NumReplicates, [CO2_ppm] = @CO2_ppm, [CH4_"& _ 
                "ppm] = @CH4_ppm, [DIC_umolesL] = @DIC_umolesL, [DateAnalyzed] = @DateAnalyzed, ["& _ 
                "Comments] = @Comments, [RecordInsertedDate] = @RecordInsertedDate, [RecordInsert"& _ 
                "edBy] = @RecordInsertedBy, [RecordUpdatedDate] = @RecordUpdatedDate, [RecordUpda"& _ 
                "tedBy] = @RecordUpdatedBy WHERE (([USGSLabDataID] = @Original_USGSLabDataID) AND"& _ 
                " ([row_timestamp] = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Master_Num, SiteName, Sit"& _ 
                "eDate, SampleNumber, AnalysisLab, DOC_WW, UV_WW, SUVA_WW, Delta_H2, d2H_StdDev, "& _ 
                "Delta_O18, d18O_StdDev, NumReplicates, CO2_ppm, CH4_ppm, DIC_umolesL, DateAnalyz"& _ 
                "ed, Comments, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpd"& _ 
                "atedBy, USGSLabDataID, row_timestamp FROM tblUSGSLabData WHERE (USGSLabDataID = "& _ 
                "@USGSLabDataID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Master_Num", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Master_Num", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SampleNumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SampleNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnalysisLab", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnalysisLab", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOC_WW", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOC_WW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UV_WW", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UV_WW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUVA_WW", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUVA_WW", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delta_H2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Delta_H2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d2H_StdDev", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "d2H_StdDev", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delta_O18", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Delta_O18", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@d18O_StdDev", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "d18O_StdDev", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumReplicates", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumReplicates", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CO2_ppm", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CO2_ppm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CH4_ppm", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CH4_ppm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIC_umolesL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIC_umolesL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateAnalyzed", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateAnalyzed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comments", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USGSLabDataID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USGSLabDataID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USGSLabDataID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "USGSLabDataID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Master_Num, SiteName, SiteDate, SampleNumber, AnalysisLab, DOC_WW, UV_WW, "& _ 
                "SUVA_WW, Delta_H2, d2H_StdDev, Delta_O18, d18O_StdDev, NumReplicates, CO2_ppm, C"& _ 
                "H4_ppm, DIC_umolesL, DateAnalyzed, Comments, RecordInsertedDate, RecordInsertedB"& _ 
                "y, RecordUpdatedDate, RecordUpdatedBy, USGSLabDataID, row_timestamp FROM dbo.tbl"& _ 
                "USGSLabData"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblUSGSLabDataDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblUSGSLabDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblUSGSLabDataDataTable = New AK_ShallowLakesDataSet.tblUSGSLabDataDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblUSGSLabDataDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblUSGSLabData")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_USGSLabDataID As Integer, ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_USGSLabDataID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Master_Num As Long,  _
                    ByVal SiteName As String,  _
                    ByVal SiteDate As Date,  _
                    ByVal SampleNumber As String,  _
                    ByVal AnalysisLab As String,  _
                    ByVal DOC_WW As Global.System.Nullable(Of Double),  _
                    ByVal UV_WW As Global.System.Nullable(Of Double),  _
                    ByVal SUVA_WW As Global.System.Nullable(Of Double),  _
                    ByVal Delta_H2 As Global.System.Nullable(Of Decimal),  _
                    ByVal d2H_StdDev As Global.System.Nullable(Of Decimal),  _
                    ByVal Delta_O18 As Global.System.Nullable(Of Decimal),  _
                    ByVal d18O_StdDev As Global.System.Nullable(Of Decimal),  _
                    ByVal NumReplicates As Global.System.Nullable(Of Integer),  _
                    ByVal CO2_ppm As Global.System.Nullable(Of Double),  _
                    ByVal CH4_ppm As Global.System.Nullable(Of Double),  _
                    ByVal DIC_umolesL As Global.System.Nullable(Of Double),  _
                    ByVal DateAnalyzed As Global.System.Nullable(Of Date),  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Master_Num,Long)
            If (SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SiteName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SiteName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SiteDate,Date)
            If (SampleNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SampleNumber,String)
            End If
            If (AnalysisLab Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(AnalysisLab,String)
            End If
            If (DOC_WW.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DOC_WW.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (UV_WW.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(UV_WW.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (SUVA_WW.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SUVA_WW.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Delta_H2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Delta_H2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (d2H_StdDev.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(d2H_StdDev.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Delta_O18.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Delta_O18.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (d18O_StdDev.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(d18O_StdDev.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (NumReplicates.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(NumReplicates.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (CO2_ppm.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(CO2_ppm.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CH4_ppm.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CH4_ppm.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (DIC_umolesL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(DIC_umolesL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (DateAnalyzed.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(DateAnalyzed.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Comments Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Comments,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Master_Num As Long,  _
                    ByVal SiteName As String,  _
                    ByVal SiteDate As Date,  _
                    ByVal SampleNumber As String,  _
                    ByVal AnalysisLab As String,  _
                    ByVal DOC_WW As Global.System.Nullable(Of Double),  _
                    ByVal UV_WW As Global.System.Nullable(Of Double),  _
                    ByVal SUVA_WW As Global.System.Nullable(Of Double),  _
                    ByVal Delta_H2 As Global.System.Nullable(Of Decimal),  _
                    ByVal d2H_StdDev As Global.System.Nullable(Of Decimal),  _
                    ByVal Delta_O18 As Global.System.Nullable(Of Decimal),  _
                    ByVal d18O_StdDev As Global.System.Nullable(Of Decimal),  _
                    ByVal NumReplicates As Global.System.Nullable(Of Integer),  _
                    ByVal CO2_ppm As Global.System.Nullable(Of Double),  _
                    ByVal CH4_ppm As Global.System.Nullable(Of Double),  _
                    ByVal DIC_umolesL As Global.System.Nullable(Of Double),  _
                    ByVal DateAnalyzed As Global.System.Nullable(Of Date),  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_USGSLabDataID As Integer,  _
                    ByVal Original_row_timestamp() As Byte,  _
                    ByVal USGSLabDataID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Master_Num,Long)
            If (SiteName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SiteName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SiteName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SiteDate,Date)
            If (SampleNumber Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SampleNumber,String)
            End If
            If (AnalysisLab Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(AnalysisLab,String)
            End If
            If (DOC_WW.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DOC_WW.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (UV_WW.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(UV_WW.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (SUVA_WW.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SUVA_WW.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Delta_H2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Delta_H2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (d2H_StdDev.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(d2H_StdDev.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Delta_O18.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Delta_O18.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (d18O_StdDev.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(d18O_StdDev.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (NumReplicates.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(NumReplicates.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (CO2_ppm.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(CO2_ppm.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CH4_ppm.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CH4_ppm.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (DIC_umolesL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(DIC_umolesL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (DateAnalyzed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(DateAnalyzed.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Comments Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Comments,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(RecordUpdatedBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_USGSLabDataID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_row_timestamp,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(USGSLabDataID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Master_Num As Long,  _
                    ByVal SiteName As String,  _
                    ByVal SiteDate As Date,  _
                    ByVal SampleNumber As String,  _
                    ByVal AnalysisLab As String,  _
                    ByVal DOC_WW As Global.System.Nullable(Of Double),  _
                    ByVal UV_WW As Global.System.Nullable(Of Double),  _
                    ByVal SUVA_WW As Global.System.Nullable(Of Double),  _
                    ByVal Delta_H2 As Global.System.Nullable(Of Decimal),  _
                    ByVal d2H_StdDev As Global.System.Nullable(Of Decimal),  _
                    ByVal Delta_O18 As Global.System.Nullable(Of Decimal),  _
                    ByVal d18O_StdDev As Global.System.Nullable(Of Decimal),  _
                    ByVal NumReplicates As Global.System.Nullable(Of Integer),  _
                    ByVal CO2_ppm As Global.System.Nullable(Of Double),  _
                    ByVal CH4_ppm As Global.System.Nullable(Of Double),  _
                    ByVal DIC_umolesL As Global.System.Nullable(Of Double),  _
                    ByVal DateAnalyzed As Global.System.Nullable(Of Date),  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_USGSLabDataID As Integer,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Master_Num, SiteName, SiteDate, SampleNumber, AnalysisLab, DOC_WW, UV_WW, SUVA_WW, Delta_H2, d2H_StdDev, Delta_O18, d18O_StdDev, NumReplicates, CO2_ppm, CH4_ppm, DIC_umolesL, DateAnalyzed, Comments, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_USGSLabDataID, Original_row_timestamp, Original_USGSLabDataID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblVegProfilesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblVegProfiles"
            tableMapping.ColumnMappings.Add("PROFILEID", "PROFILEID")
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("SAMPLEDATE", "SAMPLEDATE")
            tableMapping.ColumnMappings.Add("SAMPLE_TIME", "SAMPLE_TIME")
            tableMapping.ColumnMappings.Add("TRANSECT_POINT", "TRANSECT_POINT")
            tableMapping.ColumnMappings.Add("WATER_DEPTH", "WATER_DEPTH")
            tableMapping.ColumnMappings.Add("MAT_DEPTH", "MAT_DEPTH")
            tableMapping.ColumnMappings.Add("BOTTOM_DEPTH", "BOTTOM_DEPTH")
            tableMapping.ColumnMappings.Add("MAX_PENETRATION", "MAX_PENETRATION")
            tableMapping.ColumnMappings.Add("SUBSTRATE", "SUBSTRATE")
            tableMapping.ColumnMappings.Add("GPS_TIME", "GPS_TIME")
            tableMapping.ColumnMappings.Add("LONGITUDE", "LONGITUDE")
            tableMapping.ColumnMappings.Add("LATITUDE", "LATITUDE")
            tableMapping.ColumnMappings.Add("HEIGHT", "HEIGHT")
            tableMapping.ColumnMappings.Add("TRANSECT_NUM", "TRANSECT_NUM")
            tableMapping.ColumnMappings.Add("FEAT_NAME", "FEAT_NAME")
            tableMapping.ColumnMappings.Add("DATAFILE", "DATAFILE")
            tableMapping.ColumnMappings.Add("GPS_HEIGHT", "GPS_HEIGHT")
            tableMapping.ColumnMappings.Add("VERT_PREC", "VERT_PREC")
            tableMapping.ColumnMappings.Add("HORZ_PREC", "HORZ_PREC")
            tableMapping.ColumnMappings.Add("POINT_ID", "POINT_ID")
            tableMapping.ColumnMappings.Add("SOURCE", "SOURCE")
            tableMapping.ColumnMappings.Add("COMMENTS", "COMMENTS")
            tableMapping.ColumnMappings.Add("MANUAL_MM", "MANUAL_MM")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("RecordCertifiedDate", "RecordCertifiedDate")
            tableMapping.ColumnMappings.Add("RecordCertifiedBy", "RecordCertifiedBy")
            tableMapping.ColumnMappings.Add("VegProfilesID", "VegProfilesID")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblVegProfiles] WHERE (([VegProfilesID] = @Original_VegProfile"& _ 
                "sID) AND ([row_timestamp] = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VegProfilesID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VegProfilesID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblVegProfiles] ([PROFILEID], [PONDNAME], [SAMPLEDATE], [SAMPL"& _ 
                "E_TIME], [TRANSECT_POINT], [WATER_DEPTH], [MAT_DEPTH], [BOTTOM_DEPTH], [MAX_PENE"& _ 
                "TRATION], [SUBSTRATE], [GPS_TIME], [LONGITUDE], [LATITUDE], [HEIGHT], [TRANSECT_"& _ 
                "NUM], [FEAT_NAME], [DATAFILE], [GPS_HEIGHT], [VERT_PREC], [HORZ_PREC], [POINT_ID"& _ 
                "], [SOURCE], [COMMENTS], [MANUAL_MM], [RecordInsertedDate], [RecordInsertedBy], "& _ 
                "[RecordUpdatedDate], [RecordUpdatedBy], [RecordCertifiedDate], [RecordCertifiedB"& _ 
                "y]) VALUES (@PROFILEID, @PONDNAME, @SAMPLEDATE, @SAMPLE_TIME, @TRANSECT_POINT, @"& _ 
                "WATER_DEPTH, @MAT_DEPTH, @BOTTOM_DEPTH, @MAX_PENETRATION, @SUBSTRATE, @GPS_TIME,"& _ 
                " @LONGITUDE, @LATITUDE, @HEIGHT, @TRANSECT_NUM, @FEAT_NAME, @DATAFILE, @GPS_HEIG"& _ 
                "HT, @VERT_PREC, @HORZ_PREC, @POINT_ID, @SOURCE, @COMMENTS, @MANUAL_MM, @RecordIn"& _ 
                "sertedDate, @RecordInsertedBy, @RecordUpdatedDate, @RecordUpdatedBy, @RecordCert"& _ 
                "ifiedDate, @RecordCertifiedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROFILEID, PONDNAME, SAMPLEDATE, SAMPLE_"& _ 
                "TIME, TRANSECT_POINT, WATER_DEPTH, MAT_DEPTH, BOTTOM_DEPTH, MAX_PENETRATION, SUB"& _ 
                "STRATE, GPS_TIME, LONGITUDE, LATITUDE, HEIGHT, TRANSECT_NUM, FEAT_NAME, DATAFILE"& _ 
                ", GPS_HEIGHT, VERT_PREC, HORZ_PREC, POINT_ID, SOURCE, COMMENTS, MANUAL_MM, Recor"& _ 
                "dInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, RecordCerti"& _ 
                "fiedDate, RecordCertifiedBy, VegProfilesID, row_timestamp FROM tblVegProfiles WH"& _ 
                "ERE (VegProfilesID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROFILEID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROFILEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLE_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLE_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSECT_POINT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSECT_POINT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WATER_DEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WATER_DEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAT_DEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAT_DEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BOTTOM_DEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOTTOM_DEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAX_PENETRATION", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAX_PENETRATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUBSTRATE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUBSTRATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPS_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPS_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LONGITUDE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LONGITUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LATITUDE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LATITUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HEIGHT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSECT_NUM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSECT_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEAT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEAT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAFILE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATAFILE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPS_HEIGHT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPS_HEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VERT_PREC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VERT_PREC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HORZ_PREC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HORZ_PREC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POINT_ID", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POINT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MANUAL_MM", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MANUAL_MM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordCertifiedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordCertifiedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordCertifiedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordCertifiedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblVegProfiles] SET [PROFILEID] = @PROFILEID, [PONDNAME] = @PONDNAM"& _ 
                "E, [SAMPLEDATE] = @SAMPLEDATE, [SAMPLE_TIME] = @SAMPLE_TIME, [TRANSECT_POINT] = "& _ 
                "@TRANSECT_POINT, [WATER_DEPTH] = @WATER_DEPTH, [MAT_DEPTH] = @MAT_DEPTH, [BOTTOM"& _ 
                "_DEPTH] = @BOTTOM_DEPTH, [MAX_PENETRATION] = @MAX_PENETRATION, [SUBSTRATE] = @SU"& _ 
                "BSTRATE, [GPS_TIME] = @GPS_TIME, [LONGITUDE] = @LONGITUDE, [LATITUDE] = @LATITUD"& _ 
                "E, [HEIGHT] = @HEIGHT, [TRANSECT_NUM] = @TRANSECT_NUM, [FEAT_NAME] = @FEAT_NAME,"& _ 
                " [DATAFILE] = @DATAFILE, [GPS_HEIGHT] = @GPS_HEIGHT, [VERT_PREC] = @VERT_PREC, ["& _ 
                "HORZ_PREC] = @HORZ_PREC, [POINT_ID] = @POINT_ID, [SOURCE] = @SOURCE, [COMMENTS] "& _ 
                "= @COMMENTS, [MANUAL_MM] = @MANUAL_MM, [RecordInsertedDate] = @RecordInsertedDat"& _ 
                "e, [RecordInsertedBy] = @RecordInsertedBy, [RecordUpdatedDate] = @RecordUpdatedD"& _ 
                "ate, [RecordUpdatedBy] = @RecordUpdatedBy, [RecordCertifiedDate] = @RecordCertif"& _ 
                "iedDate, [RecordCertifiedBy] = @RecordCertifiedBy WHERE (([VegProfilesID] = @Ori"& _ 
                "ginal_VegProfilesID) AND ([row_timestamp] = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT P"& _ 
                "ROFILEID, PONDNAME, SAMPLEDATE, SAMPLE_TIME, TRANSECT_POINT, WATER_DEPTH, MAT_DE"& _ 
                "PTH, BOTTOM_DEPTH, MAX_PENETRATION, SUBSTRATE, GPS_TIME, LONGITUDE, LATITUDE, HE"& _ 
                "IGHT, TRANSECT_NUM, FEAT_NAME, DATAFILE, GPS_HEIGHT, VERT_PREC, HORZ_PREC, POINT"& _ 
                "_ID, SOURCE, COMMENTS, MANUAL_MM, RecordInsertedDate, RecordInsertedBy, RecordUp"& _ 
                "datedDate, RecordUpdatedBy, RecordCertifiedDate, RecordCertifiedBy, VegProfilesI"& _ 
                "D, row_timestamp FROM tblVegProfiles WHERE (VegProfilesID = @VegProfilesID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROFILEID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROFILEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLE_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLE_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSECT_POINT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSECT_POINT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WATER_DEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WATER_DEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAT_DEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAT_DEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BOTTOM_DEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BOTTOM_DEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAX_PENETRATION", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAX_PENETRATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUBSTRATE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUBSTRATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPS_TIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPS_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LONGITUDE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LONGITUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LATITUDE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LATITUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HEIGHT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSECT_NUM", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSECT_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FEAT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FEAT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATAFILE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATAFILE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GPS_HEIGHT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GPS_HEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VERT_PREC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VERT_PREC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HORZ_PREC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HORZ_PREC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@POINT_ID", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "POINT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MANUAL_MM", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MANUAL_MM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordCertifiedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordCertifiedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordCertifiedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordCertifiedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VegProfilesID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VegProfilesID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VegProfilesID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "VegProfilesID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROFILEID, PONDNAME, SAMPLEDATE, SAMPLE_TIME, TRANSECT_POINT, WATER_DEPTH,"& _ 
                " MAT_DEPTH, BOTTOM_DEPTH, MAX_PENETRATION, SUBSTRATE, GPS_TIME, LONGITUDE, LATIT"& _ 
                "UDE, HEIGHT, TRANSECT_NUM, FEAT_NAME, DATAFILE, GPS_HEIGHT, VERT_PREC, HORZ_PREC"& _ 
                ", POINT_ID, SOURCE, COMMENTS, MANUAL_MM, RecordInsertedDate, RecordInsertedBy, R"& _ 
                "ecordUpdatedDate, RecordUpdatedBy, RecordCertifiedDate, RecordCertifiedBy, VegPr"& _ 
                "ofilesID, row_timestamp FROM dbo.tblVegProfiles"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblVegProfilesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblVegProfilesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblVegProfilesDataTable = New AK_ShallowLakesDataSet.tblVegProfilesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblVegProfilesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblVegProfiles")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_VegProfilesID As Integer, ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_VegProfilesID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PROFILEID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLE_TIME As Global.System.Nullable(Of Date),  _
                    ByVal TRANSECT_POINT As Global.System.Nullable(Of Integer),  _
                    ByVal WATER_DEPTH As Global.System.Nullable(Of Double),  _
                    ByVal MAT_DEPTH As Global.System.Nullable(Of Double),  _
                    ByVal BOTTOM_DEPTH As Global.System.Nullable(Of Double),  _
                    ByVal MAX_PENETRATION As Global.System.Nullable(Of Double),  _
                    ByVal SUBSTRATE As String,  _
                    ByVal GPS_TIME As Global.System.Nullable(Of Date),  _
                    ByVal LONGITUDE As Global.System.Nullable(Of Double),  _
                    ByVal LATITUDE As Global.System.Nullable(Of Double),  _
                    ByVal HEIGHT As Global.System.Nullable(Of Double),  _
                    ByVal TRANSECT_NUM As Global.System.Nullable(Of Double),  _
                    ByVal FEAT_NAME As String,  _
                    ByVal DATAFILE As String,  _
                    ByVal GPS_HEIGHT As Global.System.Nullable(Of Double),  _
                    ByVal VERT_PREC As Global.System.Nullable(Of Double),  _
                    ByVal HORZ_PREC As Global.System.Nullable(Of Double),  _
                    ByVal POINT_ID As Global.System.Nullable(Of Double),  _
                    ByVal SOURCE As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal MANUAL_MM As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal RecordCertifiedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordCertifiedBy As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROFILEID,Long)
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAMPLEDATE,Date)
            If (SAMPLE_TIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SAMPLE_TIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TRANSECT_POINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TRANSECT_POINT.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (WATER_DEPTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(WATER_DEPTH.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MAT_DEPTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MAT_DEPTH.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BOTTOM_DEPTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(BOTTOM_DEPTH.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (MAX_PENETRATION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(MAX_PENETRATION.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (SUBSTRATE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SUBSTRATE,String)
            End If
            If (GPS_TIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(GPS_TIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (LONGITUDE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(LONGITUDE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (LATITUDE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(LATITUDE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (HEIGHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(HEIGHT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (TRANSECT_NUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(TRANSECT_NUM.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (FEAT_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(FEAT_NAME,String)
            End If
            If (DATAFILE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(DATAFILE,String)
            End If
            If (GPS_HEIGHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(GPS_HEIGHT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (VERT_PREC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(VERT_PREC.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (HORZ_PREC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(HORZ_PREC.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (POINT_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(POINT_ID.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (SOURCE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(SOURCE,String)
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(COMMENTS,String)
            End If
            If (MANUAL_MM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(MANUAL_MM,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(RecordUpdatedBy,String)
            End If
            If (RecordCertifiedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(RecordCertifiedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (RecordCertifiedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(RecordCertifiedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PROFILEID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLE_TIME As Global.System.Nullable(Of Date),  _
                    ByVal TRANSECT_POINT As Global.System.Nullable(Of Integer),  _
                    ByVal WATER_DEPTH As Global.System.Nullable(Of Double),  _
                    ByVal MAT_DEPTH As Global.System.Nullable(Of Double),  _
                    ByVal BOTTOM_DEPTH As Global.System.Nullable(Of Double),  _
                    ByVal MAX_PENETRATION As Global.System.Nullable(Of Double),  _
                    ByVal SUBSTRATE As String,  _
                    ByVal GPS_TIME As Global.System.Nullable(Of Date),  _
                    ByVal LONGITUDE As Global.System.Nullable(Of Double),  _
                    ByVal LATITUDE As Global.System.Nullable(Of Double),  _
                    ByVal HEIGHT As Global.System.Nullable(Of Double),  _
                    ByVal TRANSECT_NUM As Global.System.Nullable(Of Double),  _
                    ByVal FEAT_NAME As String,  _
                    ByVal DATAFILE As String,  _
                    ByVal GPS_HEIGHT As Global.System.Nullable(Of Double),  _
                    ByVal VERT_PREC As Global.System.Nullable(Of Double),  _
                    ByVal HORZ_PREC As Global.System.Nullable(Of Double),  _
                    ByVal POINT_ID As Global.System.Nullable(Of Double),  _
                    ByVal SOURCE As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal MANUAL_MM As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal RecordCertifiedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordCertifiedBy As String,  _
                    ByVal Original_VegProfilesID As Integer,  _
                    ByVal Original_row_timestamp() As Byte,  _
                    ByVal VegProfilesID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROFILEID,Long)
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAMPLEDATE,Date)
            If (SAMPLE_TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SAMPLE_TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TRANSECT_POINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TRANSECT_POINT.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (WATER_DEPTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(WATER_DEPTH.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MAT_DEPTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MAT_DEPTH.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BOTTOM_DEPTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(BOTTOM_DEPTH.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (MAX_PENETRATION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(MAX_PENETRATION.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (SUBSTRATE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SUBSTRATE,String)
            End If
            If (GPS_TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(GPS_TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (LONGITUDE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(LONGITUDE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (LATITUDE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(LATITUDE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (HEIGHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(HEIGHT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (TRANSECT_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(TRANSECT_NUM.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (FEAT_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(FEAT_NAME,String)
            End If
            If (DATAFILE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(DATAFILE,String)
            End If
            If (GPS_HEIGHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(GPS_HEIGHT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (VERT_PREC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(VERT_PREC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (HORZ_PREC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(HORZ_PREC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (POINT_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(POINT_ID.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (SOURCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(SOURCE,String)
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(COMMENTS,String)
            End If
            If (MANUAL_MM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(MANUAL_MM,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(RecordUpdatedBy,String)
            End If
            If (RecordCertifiedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(RecordCertifiedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (RecordCertifiedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(RecordCertifiedBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_VegProfilesID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_row_timestamp,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(VegProfilesID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PROFILEID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLE_TIME As Global.System.Nullable(Of Date),  _
                    ByVal TRANSECT_POINT As Global.System.Nullable(Of Integer),  _
                    ByVal WATER_DEPTH As Global.System.Nullable(Of Double),  _
                    ByVal MAT_DEPTH As Global.System.Nullable(Of Double),  _
                    ByVal BOTTOM_DEPTH As Global.System.Nullable(Of Double),  _
                    ByVal MAX_PENETRATION As Global.System.Nullable(Of Double),  _
                    ByVal SUBSTRATE As String,  _
                    ByVal GPS_TIME As Global.System.Nullable(Of Date),  _
                    ByVal LONGITUDE As Global.System.Nullable(Of Double),  _
                    ByVal LATITUDE As Global.System.Nullable(Of Double),  _
                    ByVal HEIGHT As Global.System.Nullable(Of Double),  _
                    ByVal TRANSECT_NUM As Global.System.Nullable(Of Double),  _
                    ByVal FEAT_NAME As String,  _
                    ByVal DATAFILE As String,  _
                    ByVal GPS_HEIGHT As Global.System.Nullable(Of Double),  _
                    ByVal VERT_PREC As Global.System.Nullable(Of Double),  _
                    ByVal HORZ_PREC As Global.System.Nullable(Of Double),  _
                    ByVal POINT_ID As Global.System.Nullable(Of Double),  _
                    ByVal SOURCE As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal MANUAL_MM As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal RecordCertifiedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordCertifiedBy As String,  _
                    ByVal Original_VegProfilesID As Integer,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(PROFILEID, PONDNAME, SAMPLEDATE, SAMPLE_TIME, TRANSECT_POINT, WATER_DEPTH, MAT_DEPTH, BOTTOM_DEPTH, MAX_PENETRATION, SUBSTRATE, GPS_TIME, LONGITUDE, LATITUDE, HEIGHT, TRANSECT_NUM, FEAT_NAME, DATAFILE, GPS_HEIGHT, VERT_PREC, HORZ_PREC, POINT_ID, SOURCE, COMMENTS, MANUAL_MM, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, RecordCertifiedDate, RecordCertifiedBy, Original_VegProfilesID, Original_row_timestamp, Original_VegProfilesID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblVegTransectsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblVegTransects"
            tableMapping.ColumnMappings.Add("PONDVEGTRANSSPPID", "PONDVEGTRANSSPPID")
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("SAMPLEDATE", "SAMPLEDATE")
            tableMapping.ColumnMappings.Add("TRANSECT", "TRANSECT")
            tableMapping.ColumnMappings.Add("OBSERVERS", "OBSERVERS")
            tableMapping.ColumnMappings.Add("SPECIES", "SPECIES")
            tableMapping.ColumnMappings.Add("SPECIESOTHER", "SPECIESOTHER")
            tableMapping.ColumnMappings.Add("SPECIESSTART", "SPECIESSTART")
            tableMapping.ColumnMappings.Add("SPECIESSTOP", "SPECIESSTOP")
            tableMapping.ColumnMappings.Add("SPECIESDISTANCE", "SPECIESDISTANCE")
            tableMapping.ColumnMappings.Add("VEGTRANSNOTES", "VEGTRANSNOTES")
            tableMapping.ColumnMappings.Add("ESTDISTANCE", "ESTDISTANCE")
            tableMapping.ColumnMappings.Add("EXCLUDE", "EXCLUDE")
            tableMapping.ColumnMappings.Add("ANALYSIS_CODE", "ANALYSIS_CODE")
            tableMapping.ColumnMappings.Add("SAMPLETIME", "SAMPLETIME")
            tableMapping.ColumnMappings.Add("DEVICE_ID", "DEVICE_ID")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("VegTransectsID", "VegTransectsID")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            tableMapping.ColumnMappings.Add("QC_Notes", "QC_Notes")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblVegTransects] WHERE (([VegTransectsID] = @Original_VegTrans"& _ 
                "ectsID) AND ([row_timestamp] = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VegTransectsID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VegTransectsID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblVegTransects] ([PONDVEGTRANSSPPID], [PONDNAME], [SAMPLEDATE"& _ 
                "], [TRANSECT], [OBSERVERS], [SPECIES], [SPECIESOTHER], [SPECIESSTART], [SPECIESS"& _ 
                "TOP], [SPECIESDISTANCE], [VEGTRANSNOTES], [ESTDISTANCE], [EXCLUDE], [ANALYSIS_CO"& _ 
                "DE], [SAMPLETIME], [DEVICE_ID], [RecordInsertedDate], [RecordInsertedBy], [Recor"& _ 
                "dUpdatedDate], [RecordUpdatedBy], [QC_Notes]) VALUES (@PONDVEGTRANSSPPID, @PONDN"& _ 
                "AME, @SAMPLEDATE, @TRANSECT, @OBSERVERS, @SPECIES, @SPECIESOTHER, @SPECIESSTART,"& _ 
                " @SPECIESSTOP, @SPECIESDISTANCE, @VEGTRANSNOTES, @ESTDISTANCE, @EXCLUDE, @ANALYS"& _ 
                "IS_CODE, @SAMPLETIME, @DEVICE_ID, @RecordInsertedDate, @RecordInsertedBy, @Recor"& _ 
                "dUpdatedDate, @RecordUpdatedBy, @QC_Notes);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PONDVEGTRANSSPPID, PONDNAME,"& _ 
                " SAMPLEDATE, TRANSECT, OBSERVERS, SPECIES, SPECIESOTHER, SPECIESSTART, SPECIESST"& _ 
                "OP, SPECIESDISTANCE, VEGTRANSNOTES, ESTDISTANCE, EXCLUDE, ANALYSIS_CODE, SAMPLET"& _ 
                "IME, DEVICE_ID, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordU"& _ 
                "pdatedBy, VegTransectsID, row_timestamp, QC_Notes FROM tblVegTransects WHERE (Ve"& _ 
                "gTransectsID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDVEGTRANSSPPID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDVEGTRANSSPPID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSECT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSECT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OBSERVERS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBSERVERS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIESOTHER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIESOTHER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIESSTART", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIESSTART", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIESSTOP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIESSTOP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIESDISTANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIESDISTANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VEGTRANSNOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VEGTRANSNOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTDISTANCE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTDISTANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXCLUDE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXCLUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANALYSIS_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANALYSIS_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLETIME", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLETIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEVICE_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEVICE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QC_Notes", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QC_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblVegTransects] SET [PONDVEGTRANSSPPID] = @PONDVEGTRANSSPPID, [PON"& _ 
                "DNAME] = @PONDNAME, [SAMPLEDATE] = @SAMPLEDATE, [TRANSECT] = @TRANSECT, [OBSERVE"& _ 
                "RS] = @OBSERVERS, [SPECIES] = @SPECIES, [SPECIESOTHER] = @SPECIESOTHER, [SPECIES"& _ 
                "START] = @SPECIESSTART, [SPECIESSTOP] = @SPECIESSTOP, [SPECIESDISTANCE] = @SPECI"& _ 
                "ESDISTANCE, [VEGTRANSNOTES] = @VEGTRANSNOTES, [ESTDISTANCE] = @ESTDISTANCE, [EXC"& _ 
                "LUDE] = @EXCLUDE, [ANALYSIS_CODE] = @ANALYSIS_CODE, [SAMPLETIME] = @SAMPLETIME, "& _ 
                "[DEVICE_ID] = @DEVICE_ID, [RecordInsertedDate] = @RecordInsertedDate, [RecordIns"& _ 
                "ertedBy] = @RecordInsertedBy, [RecordUpdatedDate] = @RecordUpdatedDate, [RecordU"& _ 
                "pdatedBy] = @RecordUpdatedBy, [QC_Notes] = @QC_Notes WHERE (([VegTransectsID] = "& _ 
                "@Original_VegTransectsID) AND ([row_timestamp] = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SEL"& _ 
                "ECT PONDVEGTRANSSPPID, PONDNAME, SAMPLEDATE, TRANSECT, OBSERVERS, SPECIES, SPECI"& _ 
                "ESOTHER, SPECIESSTART, SPECIESSTOP, SPECIESDISTANCE, VEGTRANSNOTES, ESTDISTANCE,"& _ 
                " EXCLUDE, ANALYSIS_CODE, SAMPLETIME, DEVICE_ID, RecordInsertedDate, RecordInsert"& _ 
                "edBy, RecordUpdatedDate, RecordUpdatedBy, VegTransectsID, row_timestamp, QC_Note"& _ 
                "s FROM tblVegTransects WHERE (VegTransectsID = @VegTransectsID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDVEGTRANSSPPID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDVEGTRANSSPPID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRANSECT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TRANSECT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OBSERVERS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBSERVERS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIESOTHER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIESOTHER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIESSTART", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIESSTART", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIESSTOP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIESSTOP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIESDISTANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIESDISTANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VEGTRANSNOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VEGTRANSNOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESTDISTANCE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESTDISTANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXCLUDE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXCLUDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ANALYSIS_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ANALYSIS_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLETIME", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLETIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEVICE_ID", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEVICE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QC_Notes", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QC_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VegTransectsID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VegTransectsID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VegTransectsID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "VegTransectsID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PONDVEGTRANSSPPID, PONDNAME, SAMPLEDATE, TRANSECT, OBSERVERS, SPECIES, SPE"& _ 
                "CIESOTHER, SPECIESSTART, SPECIESSTOP, SPECIESDISTANCE, VEGTRANSNOTES, ESTDISTANC"& _ 
                "E, EXCLUDE, ANALYSIS_CODE, SAMPLETIME, DEVICE_ID, RecordInsertedDate, RecordInse"& _ 
                "rtedBy, RecordUpdatedDate, RecordUpdatedBy, VegTransectsID, row_timestamp, QC_No"& _ 
                "tes FROM dbo.tblVegTransects"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblVegTransectsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblVegTransectsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblVegTransectsDataTable = New AK_ShallowLakesDataSet.tblVegTransectsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblVegTransectsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblVegTransects")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_VegTransectsID As Integer, ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_VegTransectsID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PONDVEGTRANSSPPID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal TRANSECT As Integer,  _
                    ByVal OBSERVERS As String,  _
                    ByVal SPECIES As String,  _
                    ByVal SPECIESOTHER As String,  _
                    ByVal SPECIESSTART As Global.System.Nullable(Of Integer),  _
                    ByVal SPECIESSTOP As Global.System.Nullable(Of Integer),  _
                    ByVal SPECIESDISTANCE As Global.System.Nullable(Of Integer),  _
                    ByVal VEGTRANSNOTES As String,  _
                    ByVal ESTDISTANCE As Global.System.Nullable(Of Boolean),  _
                    ByVal EXCLUDE As Global.System.Nullable(Of Boolean),  _
                    ByVal ANALYSIS_CODE As String,  _
                    ByVal SAMPLETIME As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal DEVICE_ID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal QC_Notes As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(PONDVEGTRANSSPPID,Long)
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAMPLEDATE,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(TRANSECT,Integer)
            If (OBSERVERS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(OBSERVERS,String)
            End If
            If (SPECIES Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPECIES")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SPECIES,String)
            End If
            If (SPECIESOTHER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SPECIESOTHER,String)
            End If
            If (SPECIESSTART.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SPECIESSTART.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (SPECIESSTOP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SPECIESSTOP.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (SPECIESDISTANCE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SPECIESDISTANCE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (VEGTRANSNOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(VEGTRANSNOTES,String)
            End If
            If (ESTDISTANCE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ESTDISTANCE.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (EXCLUDE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(EXCLUDE.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ANALYSIS_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(ANALYSIS_CODE,String)
            End If
            If (SAMPLETIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(SAMPLETIME.Value,System.TimeSpan)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (DEVICE_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(DEVICE_ID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(RecordInsertedBy,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(RecordUpdatedDate,Date)
            If (RecordUpdatedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordUpdatedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(RecordUpdatedBy,String)
            End If
            If (QC_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(QC_Notes,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PONDVEGTRANSSPPID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal TRANSECT As Integer,  _
                    ByVal OBSERVERS As String,  _
                    ByVal SPECIES As String,  _
                    ByVal SPECIESOTHER As String,  _
                    ByVal SPECIESSTART As Global.System.Nullable(Of Integer),  _
                    ByVal SPECIESSTOP As Global.System.Nullable(Of Integer),  _
                    ByVal SPECIESDISTANCE As Global.System.Nullable(Of Integer),  _
                    ByVal VEGTRANSNOTES As String,  _
                    ByVal ESTDISTANCE As Global.System.Nullable(Of Boolean),  _
                    ByVal EXCLUDE As Global.System.Nullable(Of Boolean),  _
                    ByVal ANALYSIS_CODE As String,  _
                    ByVal SAMPLETIME As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal DEVICE_ID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal QC_Notes As String,  _
                    ByVal Original_VegTransectsID As Integer,  _
                    ByVal Original_row_timestamp() As Byte,  _
                    ByVal VegTransectsID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PONDVEGTRANSSPPID,Long)
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAMPLEDATE,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TRANSECT,Integer)
            If (OBSERVERS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(OBSERVERS,String)
            End If
            If (SPECIES Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPECIES")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SPECIES,String)
            End If
            If (SPECIESOTHER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SPECIESOTHER,String)
            End If
            If (SPECIESSTART.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SPECIESSTART.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (SPECIESSTOP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SPECIESSTOP.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (SPECIESDISTANCE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SPECIESDISTANCE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (VEGTRANSNOTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(VEGTRANSNOTES,String)
            End If
            If (ESTDISTANCE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ESTDISTANCE.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (EXCLUDE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(EXCLUDE.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ANALYSIS_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ANALYSIS_CODE,String)
            End If
            If (SAMPLETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(SAMPLETIME.Value,System.TimeSpan)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (DEVICE_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(DEVICE_ID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(RecordInsertedBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(RecordUpdatedDate,Date)
            If (RecordUpdatedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordUpdatedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(RecordUpdatedBy,String)
            End If
            If (QC_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(QC_Notes,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_VegTransectsID,Integer)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_row_timestamp,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(VegTransectsID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PONDVEGTRANSSPPID As Long,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal TRANSECT As Integer,  _
                    ByVal OBSERVERS As String,  _
                    ByVal SPECIES As String,  _
                    ByVal SPECIESOTHER As String,  _
                    ByVal SPECIESSTART As Global.System.Nullable(Of Integer),  _
                    ByVal SPECIESSTOP As Global.System.Nullable(Of Integer),  _
                    ByVal SPECIESDISTANCE As Global.System.Nullable(Of Integer),  _
                    ByVal VEGTRANSNOTES As String,  _
                    ByVal ESTDISTANCE As Global.System.Nullable(Of Boolean),  _
                    ByVal EXCLUDE As Global.System.Nullable(Of Boolean),  _
                    ByVal ANALYSIS_CODE As String,  _
                    ByVal SAMPLETIME As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal DEVICE_ID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Date,  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal QC_Notes As String,  _
                    ByVal Original_VegTransectsID As Integer,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(PONDVEGTRANSSPPID, PONDNAME, SAMPLEDATE, TRANSECT, OBSERVERS, SPECIES, SPECIESOTHER, SPECIESSTART, SPECIESSTOP, SPECIESDISTANCE, VEGTRANSNOTES, ESTDISTANCE, EXCLUDE, ANALYSIS_CODE, SAMPLETIME, DEVICE_ID, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, QC_Notes, Original_VegTransectsID, Original_row_timestamp, Original_VegTransectsID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblWaterChemistryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblWaterChemistry"
            tableMapping.ColumnMappings.Add("WaterChemistryID", "WaterChemistryID")
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("SAMPLEDATE", "SAMPLEDATE")
            tableMapping.ColumnMappings.Add("SAMPLENUMBER", "SAMPLENUMBER")
            tableMapping.ColumnMappings.Add("CHEM_LAB", "CHEM_LAB")
            tableMapping.ColumnMappings.Add("CHEM_METHOD", "CHEM_METHOD")
            tableMapping.ColumnMappings.Add("LAB_SAMPLE_NUMBER", "LAB_SAMPLE_NUMBER")
            tableMapping.ColumnMappings.Add("LAB_DATE", "LAB_DATE")
            tableMapping.ColumnMappings.Add("DELIVERY_DATE", "DELIVERY_DATE")
            tableMapping.ColumnMappings.Add("THAW_DATE", "THAW_DATE")
            tableMapping.ColumnMappings.Add("DUPLICATED_CHEM_ANALYSIS", "DUPLICATED_CHEM_ANALYSIS")
            tableMapping.ColumnMappings.Add("PH", "PH")
            tableMapping.ColumnMappings.Add("PH_Notes", "PH_Notes")
            tableMapping.ColumnMappings.Add("PH_MDL_LEVEL", "PH_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("PH_MDL_YN", "PH_MDL_YN")
            tableMapping.ColumnMappings.Add("PH_LABDATE", "PH_LABDATE")
            tableMapping.ColumnMappings.Add("TOTAL_ALKALINITY", "TOTAL_ALKALINITY")
            tableMapping.ColumnMappings.Add("TOTAL_ALKALINITY_Notes", "TOTAL_ALKALINITY_Notes")
            tableMapping.ColumnMappings.Add("ALKALINITY_MG_L", "ALKALINITY_MG_L")
            tableMapping.ColumnMappings.Add("ALKALINITY_MG_L_Notes", "ALKALINITY_MG_L_Notes")
            tableMapping.ColumnMappings.Add("ALK_MDL_LEVEL", "ALK_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("ALK_MDL_YN", "ALK_MDL_YN")
            tableMapping.ColumnMappings.Add("ALK_LABDATE", "ALK_LABDATE")
            tableMapping.ColumnMappings.Add("CONDUCTIVITY_AES", "CONDUCTIVITY_AES")
            tableMapping.ColumnMappings.Add("CONDUCTIVITY_AES_Notes", "CONDUCTIVITY_AES_Notes")
            tableMapping.ColumnMappings.Add("COND_MDL_LEVEL", "COND_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("COND_MDL_YN", "COND_MDL_YN")
            tableMapping.ColumnMappings.Add("COND_LABDATE", "COND_LABDATE")
            tableMapping.ColumnMappings.Add("TKN_MG_L", "TKN_MG_L")
            tableMapping.ColumnMappings.Add("TKN_Notes", "TKN_Notes")
            tableMapping.ColumnMappings.Add("TKN_MDL_LEVEL", "TKN_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("TKN_MDL_YN", "TKN_MDL_YN")
            tableMapping.ColumnMappings.Add("TN_MG_L", "TN_MG_L")
            tableMapping.ColumnMappings.Add("TN_Notes", "TN_Notes")
            tableMapping.ColumnMappings.Add("TN_MDL_LEVEL", "TN_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("TN_MDL_YN", "TN_MDL_YN")
            tableMapping.ColumnMappings.Add("TN_LABDATE", "TN_LABDATE")
            tableMapping.ColumnMappings.Add("TDN_MG_L", "TDN_MG_L")
            tableMapping.ColumnMappings.Add("TDN_Notes", "TDN_Notes")
            tableMapping.ColumnMappings.Add("TDN_MDL_LEVEL", "TDN_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("TDN_MDL_YN", "TDN_MDL_YN")
            tableMapping.ColumnMappings.Add("TDN_LABDATE", "TDN_LABDATE")
            tableMapping.ColumnMappings.Add("TP_MG_L", "TP_MG_L")
            tableMapping.ColumnMappings.Add("TP_Notes", "TP_Notes")
            tableMapping.ColumnMappings.Add("TP_MDL_LEVEL", "TP_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("TP_MDL_YN", "TP_MDL_YN")
            tableMapping.ColumnMappings.Add("TP_LABDATE", "TP_LABDATE")
            tableMapping.ColumnMappings.Add("TDP_MG_L", "TDP_MG_L")
            tableMapping.ColumnMappings.Add("TDP_Notes", "TDP_Notes")
            tableMapping.ColumnMappings.Add("TDP_MDL_LEVEL", "TDP_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("TDP_MDL_YN", "TDP_MDL_YN")
            tableMapping.ColumnMappings.Add("TDP_LABDATE", "TDP_LABDATE")
            tableMapping.ColumnMappings.Add("PO4_P_MG_L", "PO4_P_MG_L")
            tableMapping.ColumnMappings.Add("PO4_P_Notes", "PO4_P_Notes")
            tableMapping.ColumnMappings.Add("PO4_MDL_LEVEL", "PO4_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("PO4_MDL_YN", "PO4_MDL_YN")
            tableMapping.ColumnMappings.Add("PO4_LABDATE", "PO4_LABDATE")
            tableMapping.ColumnMappings.Add("NO3_N_MG_L", "NO3_N_MG_L")
            tableMapping.ColumnMappings.Add("NO3_N_Notes", "NO3_N_Notes")
            tableMapping.ColumnMappings.Add("NO3_MDL_LEVEL", "NO3_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("NO3_MDL_YN", "NO3_MDL_YN")
            tableMapping.ColumnMappings.Add("NO3_LABDATE", "NO3_LABDATE")
            tableMapping.ColumnMappings.Add("NH3_N_MG_L", "NH3_N_MG_L")
            tableMapping.ColumnMappings.Add("NH3_N_Notes", "NH3_N_Notes")
            tableMapping.ColumnMappings.Add("NH3_MDL_LEVEL", "NH3_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("NH3_MDL_YN", "NH3_MDL_YN")
            tableMapping.ColumnMappings.Add("NH3_LABDATE", "NH3_LABDATE")
            tableMapping.ColumnMappings.Add("SI_MG_L", "SI_MG_L")
            tableMapping.ColumnMappings.Add("SI_Notes", "SI_Notes")
            tableMapping.ColumnMappings.Add("SI_MDL_LEVEL", "SI_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("SI_MDL_YN", "SI_MDL_YN")
            tableMapping.ColumnMappings.Add("SI_LABDATE", "SI_LABDATE")
            tableMapping.ColumnMappings.Add("NA_MG_L", "NA_MG_L")
            tableMapping.ColumnMappings.Add("NA_Notes", "NA_Notes")
            tableMapping.ColumnMappings.Add("NA_MDL_LEVEL", "NA_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("NA_MDL_YN", "NA_MDL_YN")
            tableMapping.ColumnMappings.Add("NA_LABDATE", "NA_LABDATE")
            tableMapping.ColumnMappings.Add("K_MG_L", "K_MG_L")
            tableMapping.ColumnMappings.Add("K_Notes", "K_Notes")
            tableMapping.ColumnMappings.Add("K_MDL_LEVEL", "K_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("K_MDL_YN", "K_MDL_YN")
            tableMapping.ColumnMappings.Add("K_LABDATE", "K_LABDATE")
            tableMapping.ColumnMappings.Add("CA_MG_L", "CA_MG_L")
            tableMapping.ColumnMappings.Add("CA_Notes", "CA_Notes")
            tableMapping.ColumnMappings.Add("CA_MDL_LEVEL", "CA_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("CA_MDL_YN", "CA_MDL_YN")
            tableMapping.ColumnMappings.Add("CA_LABDATE", "CA_LABDATE")
            tableMapping.ColumnMappings.Add("MG_MG_L", "MG_MG_L")
            tableMapping.ColumnMappings.Add("MG_Notes", "MG_Notes")
            tableMapping.ColumnMappings.Add("MG_MDL_LEVEL", "MG_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("MG_MDL_YN", "MG_MDL_YN")
            tableMapping.ColumnMappings.Add("MG_LABDATE", "MG_LABDATE")
            tableMapping.ColumnMappings.Add("SO4_S_MG_L", "SO4_S_MG_L")
            tableMapping.ColumnMappings.Add("SO4_S_Notes", "SO4_S_Notes")
            tableMapping.ColumnMappings.Add("SO4_MDL_LEVEL", "SO4_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("SO4_MDL_YN", "SO4_MDL_YN")
            tableMapping.ColumnMappings.Add("SO4_LABDATE", "SO4_LABDATE")
            tableMapping.ColumnMappings.Add("CL_MG_L", "CL_MG_L")
            tableMapping.ColumnMappings.Add("CL_Notes", "CL_Notes")
            tableMapping.ColumnMappings.Add("CL_MDL_LEVEL", "CL_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("CL_MDL_YN", "CL_MDL_YN")
            tableMapping.ColumnMappings.Add("CL_LABDATE", "CL_LABDATE")
            tableMapping.ColumnMappings.Add("DOC_MG_L", "DOC_MG_L")
            tableMapping.ColumnMappings.Add("DOC_Notes", "DOC_Notes")
            tableMapping.ColumnMappings.Add("DOC_MDL_LEVEL", "DOC_MDL_LEVEL")
            tableMapping.ColumnMappings.Add("DOC_MDL_YN", "DOC_MDL_YN")
            tableMapping.ColumnMappings.Add("DOC_LABDATE", "DOC_LABDATE")
            tableMapping.ColumnMappings.Add("NOTES", "NOTES")
            tableMapping.ColumnMappings.Add("COMMENTS", "COMMENTS")
            tableMapping.ColumnMappings.Add("SOURCE", "SOURCE")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("RecordCertifiedDate", "RecordCertifiedDate")
            tableMapping.ColumnMappings.Add("RecordCertifiedBy", "RecordCertifiedBy")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblWaterChemistry] WHERE (([WaterChemistryID] = @Original_Wate"& _ 
                "rChemistryID) AND ([PONDNAME] = @Original_PONDNAME) AND ([SAMPLEDATE] = @Origina"& _ 
                "l_SAMPLEDATE) AND ([SAMPLENUMBER] = @Original_SAMPLENUMBER) AND ([row_timestamp]"& _ 
                " = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WaterChemistryID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WaterChemistryID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblWaterChemistry] ([WaterChemistryID], [PONDNAME], [SAMPLEDAT"& _ 
                "E], [SAMPLENUMBER], [CHEM_LAB], [CHEM_METHOD], [LAB_SAMPLE_NUMBER], [LAB_DATE], "& _ 
                "[DELIVERY_DATE], [THAW_DATE], [DUPLICATED_CHEM_ANALYSIS], [PH], [PH_Notes], [PH_"& _ 
                "MDL_LEVEL], [PH_LABDATE], [TOTAL_ALKALINITY], [TOTAL_ALKALINITY_Notes], [ALKALIN"& _ 
                "ITY_MG_L], [ALKALINITY_MG_L_Notes], [ALK_MDL_LEVEL], [ALK_LABDATE], [CONDUCTIVIT"& _ 
                "Y_AES], [CONDUCTIVITY_AES_Notes], [COND_MDL_LEVEL], [COND_LABDATE], [TKN_MG_L], "& _ 
                "[TKN_Notes], [TKN_MDL_LEVEL], [TN_MG_L], [TN_Notes], [TN_MDL_LEVEL], [TN_LABDATE"& _ 
                "], [TDN_MG_L], [TDN_Notes], [TDN_MDL_LEVEL], [TDN_LABDATE], [TP_MG_L], [TP_Notes"& _ 
                "], [TP_MDL_LEVEL], [TP_LABDATE], [TDP_MG_L], [TDP_Notes], [TDP_MDL_LEVEL], [TDP_"& _ 
                "LABDATE], [PO4_P_MG_L], [PO4_P_Notes], [PO4_MDL_LEVEL], [PO4_LABDATE], [NO3_N_MG"& _ 
                "_L], [NO3_N_Notes], [NO3_MDL_LEVEL], [NO3_LABDATE], [NH3_N_MG_L], [NH3_N_Notes],"& _ 
                " [NH3_MDL_LEVEL], [NH3_LABDATE], [SI_MG_L], [SI_Notes], [SI_MDL_LEVEL], [SI_LABD"& _ 
                "ATE], [NA_MG_L], [NA_Notes], [NA_MDL_LEVEL], [NA_LABDATE], [K_MG_L], [K_Notes], "& _ 
                "[K_MDL_LEVEL], [K_LABDATE], [CA_MG_L], [CA_Notes], [CA_MDL_LEVEL], [CA_LABDATE],"& _ 
                " [MG_MG_L], [MG_Notes], [MG_MDL_LEVEL], [MG_LABDATE], [SO4_S_MG_L], [SO4_S_Notes"& _ 
                "], [SO4_MDL_LEVEL], [SO4_LABDATE], [CL_MG_L], [CL_Notes], [CL_MDL_LEVEL], [CL_LA"& _ 
                "BDATE], [DOC_MG_L], [DOC_Notes], [DOC_MDL_LEVEL], [DOC_LABDATE], [NOTES], [COMME"& _ 
                "NTS], [SOURCE], [RecordInsertedDate], [RecordInsertedBy], [RecordUpdatedDate], ["& _ 
                "RecordUpdatedBy], [RecordCertifiedDate], [RecordCertifiedBy]) VALUES (@WaterChem"& _ 
                "istryID, @PONDNAME, @SAMPLEDATE, @SAMPLENUMBER, @CHEM_LAB, @CHEM_METHOD, @LAB_SA"& _ 
                "MPLE_NUMBER, @LAB_DATE, @DELIVERY_DATE, @THAW_DATE, @DUPLICATED_CHEM_ANALYSIS, @"& _ 
                "PH, @PH_Notes, @PH_MDL_LEVEL, @PH_LABDATE, @TOTAL_ALKALINITY, @TOTAL_ALKALINITY_"& _ 
                "Notes, @ALKALINITY_MG_L, @ALKALINITY_MG_L_Notes, @ALK_MDL_LEVEL, @ALK_LABDATE, @"& _ 
                "CONDUCTIVITY_AES, @CONDUCTIVITY_AES_Notes, @COND_MDL_LEVEL, @COND_LABDATE, @TKN_"& _ 
                "MG_L, @TKN_Notes, @TKN_MDL_LEVEL, @TN_MG_L, @TN_Notes, @TN_MDL_LEVEL, @TN_LABDAT"& _ 
                "E, @TDN_MG_L, @TDN_Notes, @TDN_MDL_LEVEL, @TDN_LABDATE, @TP_MG_L, @TP_Notes, @TP"& _ 
                "_MDL_LEVEL, @TP_LABDATE, @TDP_MG_L, @TDP_Notes, @TDP_MDL_LEVEL, @TDP_LABDATE, @P"& _ 
                "O4_P_MG_L, @PO4_P_Notes, @PO4_MDL_LEVEL, @PO4_LABDATE, @NO3_N_MG_L, @NO3_N_Notes"& _ 
                ", @NO3_MDL_LEVEL, @NO3_LABDATE, @NH3_N_MG_L, @NH3_N_Notes, @NH3_MDL_LEVEL, @NH3_"& _ 
                "LABDATE, @SI_MG_L, @SI_Notes, @SI_MDL_LEVEL, @SI_LABDATE, @NA_MG_L, @NA_Notes, @"& _ 
                "NA_MDL_LEVEL, @NA_LABDATE, @K_MG_L, @K_Notes, @K_MDL_LEVEL, @K_LABDATE, @CA_MG_L"& _ 
                ", @CA_Notes, @CA_MDL_LEVEL, @CA_LABDATE, @MG_MG_L, @MG_Notes, @MG_MDL_LEVEL, @MG"& _ 
                "_LABDATE, @SO4_S_MG_L, @SO4_S_Notes, @SO4_MDL_LEVEL, @SO4_LABDATE, @CL_MG_L, @CL"& _ 
                "_Notes, @CL_MDL_LEVEL, @CL_LABDATE, @DOC_MG_L, @DOC_Notes, @DOC_MDL_LEVEL, @DOC_"& _ 
                "LABDATE, @NOTES, @COMMENTS, @SOURCE, @RecordInsertedDate, @RecordInsertedBy, @Re"& _ 
                "cordUpdatedDate, @RecordUpdatedBy, @RecordCertifiedDate, @RecordCertifiedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"S"& _ 
                "ELECT WaterChemistryID, PONDNAME, SAMPLEDATE, SAMPLENUMBER, CHEM_LAB, CHEM_METHO"& _ 
                "D, LAB_SAMPLE_NUMBER, LAB_DATE, DELIVERY_DATE, THAW_DATE, DUPLICATED_CHEM_ANALYS"& _ 
                "IS, PH, PH_Notes, PH_MDL_LEVEL, PH_MDL_YN, PH_LABDATE, TOTAL_ALKALINITY, TOTAL_A"& _ 
                "LKALINITY_Notes, ALKALINITY_MG_L, ALKALINITY_MG_L_Notes, ALK_MDL_LEVEL, ALK_MDL_"& _ 
                "YN, ALK_LABDATE, CONDUCTIVITY_AES, CONDUCTIVITY_AES_Notes, COND_MDL_LEVEL, COND_"& _ 
                "MDL_YN, COND_LABDATE, TKN_MG_L, TKN_Notes, TKN_MDL_LEVEL, TKN_MDL_YN, TN_MG_L, T"& _ 
                "N_Notes, TN_MDL_LEVEL, TN_MDL_YN, TN_LABDATE, TDN_MG_L, TDN_Notes, TDN_MDL_LEVEL"& _ 
                ", TDN_MDL_YN, TDN_LABDATE, TP_MG_L, TP_Notes, TP_MDL_LEVEL, TP_MDL_YN, TP_LABDAT"& _ 
                "E, TDP_MG_L, TDP_Notes, TDP_MDL_LEVEL, TDP_MDL_YN, TDP_LABDATE, PO4_P_MG_L, PO4_"& _ 
                "P_Notes, PO4_MDL_LEVEL, PO4_MDL_YN, PO4_LABDATE, NO3_N_MG_L, NO3_N_Notes, NO3_MD"& _ 
                "L_LEVEL, NO3_MDL_YN, NO3_LABDATE, NH3_N_MG_L, NH3_N_Notes, NH3_MDL_LEVEL, NH3_MD"& _ 
                "L_YN, NH3_LABDATE, SI_MG_L, SI_Notes, SI_MDL_LEVEL, SI_MDL_YN, SI_LABDATE, NA_MG"& _ 
                "_L, NA_Notes, NA_MDL_LEVEL, NA_MDL_YN, NA_LABDATE, K_MG_L, K_Notes, K_MDL_LEVEL,"& _ 
                " K_MDL_YN, K_LABDATE, CA_MG_L, CA_Notes, CA_MDL_LEVEL, CA_MDL_YN, CA_LABDATE, MG"& _ 
                "_MG_L, MG_Notes, MG_MDL_LEVEL, MG_MDL_YN, MG_LABDATE, SO4_S_MG_L, SO4_S_Notes, S"& _ 
                "O4_MDL_LEVEL, SO4_MDL_YN, SO4_LABDATE, CL_MG_L, CL_Notes, CL_MDL_LEVEL, CL_MDL_Y"& _ 
                "N, CL_LABDATE, DOC_MG_L, DOC_Notes, DOC_MDL_LEVEL, DOC_MDL_YN, DOC_LABDATE, NOTE"& _ 
                "S, COMMENTS, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, Re"& _ 
                "cordUpdatedBy, RecordCertifiedDate, RecordCertifiedBy, row_timestamp FROM tblWat"& _ 
                "erChemistry WHERE (PONDNAME = @PONDNAME) AND (SAMPLEDATE = @SAMPLEDATE) AND (SAM"& _ 
                "PLENUMBER = @SAMPLENUMBER) AND (WaterChemistryID = @WaterChemistryID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WaterChemistryID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WaterChemistryID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHEM_LAB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHEM_LAB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHEM_METHOD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHEM_METHOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAB_SAMPLE_NUMBER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAB_SAMPLE_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAB_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAB_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DELIVERY_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DELIVERY_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THAW_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THAW_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DUPLICATED_CHEM_ANALYSIS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DUPLICATED_CHEM_ANALYSIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PH_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PH_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PH_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PH_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PH_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PH_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_ALKALINITY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_ALKALINITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_ALKALINITY_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_ALKALINITY_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ALKALINITY_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ALKALINITY_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ALKALINITY_MG_L_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ALKALINITY_MG_L_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ALK_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ALK_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ALK_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ALK_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONDUCTIVITY_AES", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONDUCTIVITY_AES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONDUCTIVITY_AES_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONDUCTIVITY_AES_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COND_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COND_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COND_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COND_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TKN_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TKN_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TKN_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TKN_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TKN_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TKN_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TN_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TN_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TN_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TN_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TN_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TN_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TN_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TN_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDN_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDN_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDN_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDN_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDN_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDN_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDN_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDN_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TP_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TP_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TP_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TP_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDP_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDP_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDP_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDP_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDP_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDP_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDP_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDP_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PO4_P_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PO4_P_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PO4_P_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PO4_P_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PO4_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PO4_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PO4_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PO4_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NO3_N_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NO3_N_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NO3_N_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NO3_N_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NO3_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NO3_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NO3_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NO3_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NH3_N_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NH3_N_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NH3_N_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NH3_N_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NH3_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NH3_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NH3_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NH3_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SI_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SI_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SI_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SI_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SI_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SI_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SI_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SI_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NA_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NA_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NA_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NA_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NA_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NA_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NA_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NA_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@K_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "K_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@K_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "K_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@K_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "K_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@K_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "K_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CA_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CA_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CA_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CA_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MG_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MG_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MG_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MG_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MG_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MG_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MG_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MG_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SO4_S_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SO4_S_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SO4_S_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SO4_S_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SO4_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SO4_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SO4_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SO4_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CL_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CL_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CL_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CL_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CL_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CL_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CL_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CL_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOC_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOC_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOC_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOC_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOC_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOC_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOC_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOC_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordCertifiedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordCertifiedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordCertifiedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordCertifiedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblWaterChemistry] SET [WaterChemistryID] = @WaterChemistryID, [PON"& _ 
                "DNAME] = @PONDNAME, [SAMPLEDATE] = @SAMPLEDATE, [SAMPLENUMBER] = @SAMPLENUMBER, "& _ 
                "[CHEM_LAB] = @CHEM_LAB, [CHEM_METHOD] = @CHEM_METHOD, [LAB_SAMPLE_NUMBER] = @LAB"& _ 
                "_SAMPLE_NUMBER, [LAB_DATE] = @LAB_DATE, [DELIVERY_DATE] = @DELIVERY_DATE, [THAW_"& _ 
                "DATE] = @THAW_DATE, [DUPLICATED_CHEM_ANALYSIS] = @DUPLICATED_CHEM_ANALYSIS, [PH]"& _ 
                " = @PH, [PH_Notes] = @PH_Notes, [PH_MDL_LEVEL] = @PH_MDL_LEVEL, [PH_LABDATE] = @"& _ 
                "PH_LABDATE, [TOTAL_ALKALINITY] = @TOTAL_ALKALINITY, [TOTAL_ALKALINITY_Notes] = @"& _ 
                "TOTAL_ALKALINITY_Notes, [ALKALINITY_MG_L] = @ALKALINITY_MG_L, [ALKALINITY_MG_L_N"& _ 
                "otes] = @ALKALINITY_MG_L_Notes, [ALK_MDL_LEVEL] = @ALK_MDL_LEVEL, [ALK_LABDATE] "& _ 
                "= @ALK_LABDATE, [CONDUCTIVITY_AES] = @CONDUCTIVITY_AES, [CONDUCTIVITY_AES_Notes]"& _ 
                " = @CONDUCTIVITY_AES_Notes, [COND_MDL_LEVEL] = @COND_MDL_LEVEL, [COND_LABDATE] ="& _ 
                " @COND_LABDATE, [TKN_MG_L] = @TKN_MG_L, [TKN_Notes] = @TKN_Notes, [TKN_MDL_LEVEL"& _ 
                "] = @TKN_MDL_LEVEL, [TN_MG_L] = @TN_MG_L, [TN_Notes] = @TN_Notes, [TN_MDL_LEVEL]"& _ 
                " = @TN_MDL_LEVEL, [TN_LABDATE] = @TN_LABDATE, [TDN_MG_L] = @TDN_MG_L, [TDN_Notes"& _ 
                "] = @TDN_Notes, [TDN_MDL_LEVEL] = @TDN_MDL_LEVEL, [TDN_LABDATE] = @TDN_LABDATE, "& _ 
                "[TP_MG_L] = @TP_MG_L, [TP_Notes] = @TP_Notes, [TP_MDL_LEVEL] = @TP_MDL_LEVEL, [T"& _ 
                "P_LABDATE] = @TP_LABDATE, [TDP_MG_L] = @TDP_MG_L, [TDP_Notes] = @TDP_Notes, [TDP"& _ 
                "_MDL_LEVEL] = @TDP_MDL_LEVEL, [TDP_LABDATE] = @TDP_LABDATE, [PO4_P_MG_L] = @PO4_"& _ 
                "P_MG_L, [PO4_P_Notes] = @PO4_P_Notes, [PO4_MDL_LEVEL] = @PO4_MDL_LEVEL, [PO4_LAB"& _ 
                "DATE] = @PO4_LABDATE, [NO3_N_MG_L] = @NO3_N_MG_L, [NO3_N_Notes] = @NO3_N_Notes, "& _ 
                "[NO3_MDL_LEVEL] = @NO3_MDL_LEVEL, [NO3_LABDATE] = @NO3_LABDATE, [NH3_N_MG_L] = @"& _ 
                "NH3_N_MG_L, [NH3_N_Notes] = @NH3_N_Notes, [NH3_MDL_LEVEL] = @NH3_MDL_LEVEL, [NH3"& _ 
                "_LABDATE] = @NH3_LABDATE, [SI_MG_L] = @SI_MG_L, [SI_Notes] = @SI_Notes, [SI_MDL_"& _ 
                "LEVEL] = @SI_MDL_LEVEL, [SI_LABDATE] = @SI_LABDATE, [NA_MG_L] = @NA_MG_L, [NA_No"& _ 
                "tes] = @NA_Notes, [NA_MDL_LEVEL] = @NA_MDL_LEVEL, [NA_LABDATE] = @NA_LABDATE, [K"& _ 
                "_MG_L] = @K_MG_L, [K_Notes] = @K_Notes, [K_MDL_LEVEL] = @K_MDL_LEVEL, [K_LABDATE"& _ 
                "] = @K_LABDATE, [CA_MG_L] = @CA_MG_L, [CA_Notes] = @CA_Notes, [CA_MDL_LEVEL] = @"& _ 
                "CA_MDL_LEVEL, [CA_LABDATE] = @CA_LABDATE, [MG_MG_L] = @MG_MG_L, [MG_Notes] = @MG"& _ 
                "_Notes, [MG_MDL_LEVEL] = @MG_MDL_LEVEL, [MG_LABDATE] = @MG_LABDATE, [SO4_S_MG_L]"& _ 
                " = @SO4_S_MG_L, [SO4_S_Notes] = @SO4_S_Notes, [SO4_MDL_LEVEL] = @SO4_MDL_LEVEL, "& _ 
                "[SO4_LABDATE] = @SO4_LABDATE, [CL_MG_L] = @CL_MG_L, [CL_Notes] = @CL_Notes, [CL_"& _ 
                "MDL_LEVEL] = @CL_MDL_LEVEL, [CL_LABDATE] = @CL_LABDATE, [DOC_MG_L] = @DOC_MG_L, "& _ 
                "[DOC_Notes] = @DOC_Notes, [DOC_MDL_LEVEL] = @DOC_MDL_LEVEL, [DOC_LABDATE] = @DOC"& _ 
                "_LABDATE, [NOTES] = @NOTES, [COMMENTS] = @COMMENTS, [SOURCE] = @SOURCE, [RecordI"& _ 
                "nsertedDate] = @RecordInsertedDate, [RecordInsertedBy] = @RecordInsertedBy, [Rec"& _ 
                "ordUpdatedDate] = @RecordUpdatedDate, [RecordUpdatedBy] = @RecordUpdatedBy, [Rec"& _ 
                "ordCertifiedDate] = @RecordCertifiedDate, [RecordCertifiedBy] = @RecordCertified"& _ 
                "By WHERE (([WaterChemistryID] = @Original_WaterChemistryID) AND ([PONDNAME] = @O"& _ 
                "riginal_PONDNAME) AND ([SAMPLEDATE] = @Original_SAMPLEDATE) AND ([SAMPLENUMBER] "& _ 
                "= @Original_SAMPLENUMBER) AND ([row_timestamp] = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SEL"& _ 
                "ECT WaterChemistryID, PONDNAME, SAMPLEDATE, SAMPLENUMBER, CHEM_LAB, CHEM_METHOD,"& _ 
                " LAB_SAMPLE_NUMBER, LAB_DATE, DELIVERY_DATE, THAW_DATE, DUPLICATED_CHEM_ANALYSIS"& _ 
                ", PH, PH_Notes, PH_MDL_LEVEL, PH_MDL_YN, PH_LABDATE, TOTAL_ALKALINITY, TOTAL_ALK"& _ 
                "ALINITY_Notes, ALKALINITY_MG_L, ALKALINITY_MG_L_Notes, ALK_MDL_LEVEL, ALK_MDL_YN"& _ 
                ", ALK_LABDATE, CONDUCTIVITY_AES, CONDUCTIVITY_AES_Notes, COND_MDL_LEVEL, COND_MD"& _ 
                "L_YN, COND_LABDATE, TKN_MG_L, TKN_Notes, TKN_MDL_LEVEL, TKN_MDL_YN, TN_MG_L, TN_"& _ 
                "Notes, TN_MDL_LEVEL, TN_MDL_YN, TN_LABDATE, TDN_MG_L, TDN_Notes, TDN_MDL_LEVEL, "& _ 
                "TDN_MDL_YN, TDN_LABDATE, TP_MG_L, TP_Notes, TP_MDL_LEVEL, TP_MDL_YN, TP_LABDATE,"& _ 
                " TDP_MG_L, TDP_Notes, TDP_MDL_LEVEL, TDP_MDL_YN, TDP_LABDATE, PO4_P_MG_L, PO4_P_"& _ 
                "Notes, PO4_MDL_LEVEL, PO4_MDL_YN, PO4_LABDATE, NO3_N_MG_L, NO3_N_Notes, NO3_MDL_"& _ 
                "LEVEL, NO3_MDL_YN, NO3_LABDATE, NH3_N_MG_L, NH3_N_Notes, NH3_MDL_LEVEL, NH3_MDL_"& _ 
                "YN, NH3_LABDATE, SI_MG_L, SI_Notes, SI_MDL_LEVEL, SI_MDL_YN, SI_LABDATE, NA_MG_L"& _ 
                ", NA_Notes, NA_MDL_LEVEL, NA_MDL_YN, NA_LABDATE, K_MG_L, K_Notes, K_MDL_LEVEL, K"& _ 
                "_MDL_YN, K_LABDATE, CA_MG_L, CA_Notes, CA_MDL_LEVEL, CA_MDL_YN, CA_LABDATE, MG_M"& _ 
                "G_L, MG_Notes, MG_MDL_LEVEL, MG_MDL_YN, MG_LABDATE, SO4_S_MG_L, SO4_S_Notes, SO4"& _ 
                "_MDL_LEVEL, SO4_MDL_YN, SO4_LABDATE, CL_MG_L, CL_Notes, CL_MDL_LEVEL, CL_MDL_YN,"& _ 
                " CL_LABDATE, DOC_MG_L, DOC_Notes, DOC_MDL_LEVEL, DOC_MDL_YN, DOC_LABDATE, NOTES,"& _ 
                " COMMENTS, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, Reco"& _ 
                "rdUpdatedBy, RecordCertifiedDate, RecordCertifiedBy, row_timestamp FROM tblWater"& _ 
                "Chemistry WHERE (PONDNAME = @PONDNAME) AND (SAMPLEDATE = @SAMPLEDATE) AND (SAMPL"& _ 
                "ENUMBER = @SAMPLENUMBER) AND (WaterChemistryID = @WaterChemistryID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WaterChemistryID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WaterChemistryID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHEM_LAB", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHEM_LAB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHEM_METHOD", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHEM_METHOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAB_SAMPLE_NUMBER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAB_SAMPLE_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAB_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAB_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DELIVERY_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DELIVERY_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THAW_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THAW_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DUPLICATED_CHEM_ANALYSIS", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DUPLICATED_CHEM_ANALYSIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PH_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PH_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PH_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PH_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PH_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PH_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_ALKALINITY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_ALKALINITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_ALKALINITY_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_ALKALINITY_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ALKALINITY_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ALKALINITY_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ALKALINITY_MG_L_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ALKALINITY_MG_L_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ALK_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ALK_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ALK_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ALK_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONDUCTIVITY_AES", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONDUCTIVITY_AES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONDUCTIVITY_AES_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONDUCTIVITY_AES_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COND_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COND_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COND_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COND_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TKN_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TKN_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TKN_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TKN_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TKN_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TKN_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TN_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TN_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TN_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TN_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TN_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TN_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TN_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TN_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDN_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDN_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDN_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDN_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDN_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDN_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDN_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDN_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TP_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TP_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TP_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TP_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TP_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDP_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDP_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDP_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDP_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDP_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDP_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TDP_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TDP_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PO4_P_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PO4_P_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PO4_P_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PO4_P_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PO4_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PO4_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PO4_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PO4_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NO3_N_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NO3_N_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NO3_N_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NO3_N_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NO3_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NO3_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NO3_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NO3_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NH3_N_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NH3_N_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NH3_N_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NH3_N_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NH3_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NH3_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NH3_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NH3_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SI_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SI_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SI_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SI_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SI_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SI_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SI_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SI_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NA_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NA_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NA_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NA_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NA_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NA_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NA_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NA_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@K_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "K_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@K_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "K_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@K_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "K_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@K_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "K_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CA_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CA_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CA_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CA_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CA_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MG_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MG_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MG_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MG_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MG_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MG_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MG_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MG_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SO4_S_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SO4_S_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SO4_S_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SO4_S_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SO4_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SO4_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SO4_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SO4_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CL_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CL_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CL_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CL_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CL_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CL_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CL_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CL_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOC_MG_L", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOC_MG_L", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOC_Notes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOC_Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOC_MDL_LEVEL", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOC_MDL_LEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOC_LABDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOC_LABDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordCertifiedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordCertifiedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordCertifiedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordCertifiedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WaterChemistryID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WaterChemistryID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT WaterChemistryID, PONDNAME, SAMPLEDATE, SAMPLENUMBER, CHEM_LAB, CHEM_METHO"& _ 
                "D, LAB_SAMPLE_NUMBER, LAB_DATE, DELIVERY_DATE, THAW_DATE, DUPLICATED_CHEM_ANALYS"& _ 
                "IS, PH, PH_Notes, PH_MDL_LEVEL, PH_MDL_YN, PH_LABDATE, TOTAL_ALKALINITY, TOTAL_A"& _ 
                "LKALINITY_Notes, ALKALINITY_MG_L, ALKALINITY_MG_L_Notes, ALK_MDL_LEVEL, ALK_MDL_"& _ 
                "YN, ALK_LABDATE, CONDUCTIVITY_AES, CONDUCTIVITY_AES_Notes, COND_MDL_LEVEL, COND_"& _ 
                "MDL_YN, COND_LABDATE, TKN_MG_L, TKN_Notes, TKN_MDL_LEVEL, TKN_MDL_YN, TN_MG_L, T"& _ 
                "N_Notes, TN_MDL_LEVEL, TN_MDL_YN, TN_LABDATE, TDN_MG_L, TDN_Notes, TDN_MDL_LEVEL"& _ 
                ", TDN_MDL_YN, TDN_LABDATE, TP_MG_L, TP_Notes, TP_MDL_LEVEL, TP_MDL_YN, TP_LABDAT"& _ 
                "E, TDP_MG_L, TDP_Notes, TDP_MDL_LEVEL, TDP_MDL_YN, TDP_LABDATE, PO4_P_MG_L, PO4_"& _ 
                "P_Notes, PO4_MDL_LEVEL, PO4_MDL_YN, PO4_LABDATE, NO3_N_MG_L, NO3_N_Notes, NO3_MD"& _ 
                "L_LEVEL, NO3_MDL_YN, NO3_LABDATE, NH3_N_MG_L, NH3_N_Notes, NH3_MDL_LEVEL, NH3_MD"& _ 
                "L_YN, NH3_LABDATE, SI_MG_L, SI_Notes, SI_MDL_LEVEL, SI_MDL_YN, SI_LABDATE, NA_MG"& _ 
                "_L, NA_Notes, NA_MDL_LEVEL, NA_MDL_YN, NA_LABDATE, K_MG_L, K_Notes, K_MDL_LEVEL,"& _ 
                " K_MDL_YN, K_LABDATE, CA_MG_L, CA_Notes, CA_MDL_LEVEL, CA_MDL_YN, CA_LABDATE, MG"& _ 
                "_MG_L, MG_Notes, MG_MDL_LEVEL, MG_MDL_YN, MG_LABDATE, SO4_S_MG_L, SO4_S_Notes, S"& _ 
                "O4_MDL_LEVEL, SO4_MDL_YN, SO4_LABDATE, CL_MG_L, CL_Notes, CL_MDL_LEVEL, CL_MDL_Y"& _ 
                "N, CL_LABDATE, DOC_MG_L, DOC_Notes, DOC_MDL_LEVEL, DOC_MDL_YN, DOC_LABDATE, NOTE"& _ 
                "S, COMMENTS, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, Re"& _ 
                "cordUpdatedBy, RecordCertifiedDate, RecordCertifiedBy, row_timestamp FROM dbo.tb"& _ 
                "lWaterChemistry"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblWaterChemistryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblWaterChemistryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblWaterChemistryDataTable = New AK_ShallowLakesDataSet.tblWaterChemistryDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblWaterChemistryDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblWaterChemistry")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_WaterChemistryID As System.Guid, ByVal Original_PONDNAME As String, ByVal Original_SAMPLEDATE As Date, ByVal Original_SAMPLENUMBER As String, ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_WaterChemistryID,System.Guid)
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SAMPLEDATE,Date)
            If (Original_SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAMPLENUMBER")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SAMPLENUMBER,String)
            End If
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal WaterChemistryID As System.Guid,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal CHEM_LAB As String,  _
                    ByVal CHEM_METHOD As String,  _
                    ByVal LAB_SAMPLE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal LAB_DATE As Global.System.Nullable(Of Date),  _
                    ByVal DELIVERY_DATE As Global.System.Nullable(Of Date),  _
                    ByVal THAW_DATE As Global.System.Nullable(Of Date),  _
                    ByVal DUPLICATED_CHEM_ANALYSIS As Global.System.Nullable(Of Boolean),  _
                    ByVal PH As Global.System.Nullable(Of Double),  _
                    ByVal PH_Notes As String,  _
                    ByVal PH_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal PH_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal TOTAL_ALKALINITY As Global.System.Nullable(Of Double),  _
                    ByVal TOTAL_ALKALINITY_Notes As String,  _
                    ByVal ALKALINITY_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal ALKALINITY_MG_L_Notes As String,  _
                    ByVal ALK_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal ALK_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal CONDUCTIVITY_AES As Global.System.Nullable(Of Double),  _
                    ByVal CONDUCTIVITY_AES_Notes As String,  _
                    ByVal COND_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal COND_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal TKN_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal TKN_Notes As String,  _
                    ByVal TKN_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal TN_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal TN_Notes As String,  _
                    ByVal TN_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal TN_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal TDN_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal TDN_Notes As String,  _
                    ByVal TDN_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal TDN_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal TP_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal TP_Notes As String,  _
                    ByVal TP_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal TP_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal TDP_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal TDP_Notes As String,  _
                    ByVal TDP_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal TDP_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal PO4_P_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal PO4_P_Notes As String,  _
                    ByVal PO4_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal PO4_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal NO3_N_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal NO3_N_Notes As String,  _
                    ByVal NO3_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal NO3_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal NH3_N_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal NH3_N_Notes As String,  _
                    ByVal NH3_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal NH3_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal SI_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal SI_Notes As String,  _
                    ByVal SI_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal SI_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal NA_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal NA_Notes As String,  _
                    ByVal NA_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal NA_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal K_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal K_Notes As String,  _
                    ByVal K_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal K_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal CA_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal CA_Notes As String,  _
                    ByVal CA_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal CA_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal MG_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal MG_Notes As String,  _
                    ByVal MG_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal MG_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal SO4_S_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal SO4_S_Notes As String,  _
                    ByVal SO4_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal SO4_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal CL_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal CL_Notes As String,  _
                    ByVal CL_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal CL_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal DOC_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal DOC_Notes As String,  _
                    ByVal DOC_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal DOC_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal NOTES As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal RecordCertifiedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordCertifiedBy As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(WaterChemistryID,System.Guid)
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAMPLEDATE,Date)
            If (SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAMPLENUMBER")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SAMPLENUMBER,String)
            End If
            If (CHEM_LAB Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CHEM_LAB,String)
            End If
            If (CHEM_METHOD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CHEM_METHOD,String)
            End If
            If (LAB_SAMPLE_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(LAB_SAMPLE_NUMBER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (LAB_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(LAB_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (DELIVERY_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(DELIVERY_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (THAW_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(THAW_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (DUPLICATED_CHEM_ANALYSIS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(DUPLICATED_CHEM_ANALYSIS.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PH.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PH_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PH_Notes,String)
            End If
            If (PH_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PH_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PH_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PH_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_ALKALINITY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(TOTAL_ALKALINITY.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_ALKALINITY_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(TOTAL_ALKALINITY_Notes,String)
            End If
            If (ALKALINITY_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(ALKALINITY_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (ALKALINITY_MG_L_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(ALKALINITY_MG_L_Notes,String)
            End If
            If (ALK_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(ALK_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (ALK_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(ALK_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (CONDUCTIVITY_AES.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(CONDUCTIVITY_AES.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (CONDUCTIVITY_AES_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(CONDUCTIVITY_AES_Notes,String)
            End If
            If (COND_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(COND_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (COND_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(COND_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (TKN_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(TKN_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (TKN_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(TKN_Notes,String)
            End If
            If (TKN_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(TKN_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (TN_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(TN_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (TN_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(TN_Notes,String)
            End If
            If (TN_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(TN_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (TN_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(TN_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (TDN_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(TDN_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (TDN_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(TDN_Notes,String)
            End If
            If (TDN_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(TDN_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (TDN_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(TDN_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (TP_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(TP_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (TP_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(TP_Notes,String)
            End If
            If (TP_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(TP_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (TP_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(TP_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (TDP_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(TDP_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (TDP_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(TDP_Notes,String)
            End If
            If (TDP_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(TDP_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (TDP_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(TDP_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (PO4_P_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(PO4_P_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (PO4_P_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(PO4_P_Notes,String)
            End If
            If (PO4_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(PO4_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (PO4_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(PO4_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (NO3_N_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(NO3_N_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (NO3_N_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(NO3_N_Notes,String)
            End If
            If (NO3_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(NO3_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (NO3_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(NO3_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (NH3_N_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(NH3_N_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (NH3_N_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(NH3_N_Notes,String)
            End If
            If (NH3_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(NH3_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (NH3_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(NH3_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (SI_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(SI_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (SI_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(SI_Notes,String)
            End If
            If (SI_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(SI_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (SI_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(SI_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (NA_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(NA_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (NA_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(NA_Notes,String)
            End If
            If (NA_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(NA_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (NA_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(NA_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (K_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(K_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (K_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(K_Notes,String)
            End If
            If (K_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(66).Value = CType(K_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (K_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(67).Value = CType(K_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (CA_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(CA_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (CA_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(69).Value = CType(CA_Notes,String)
            End If
            If (CA_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(70).Value = CType(CA_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (CA_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(71).Value = CType(CA_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (MG_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(72).Value = CType(MG_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (MG_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(73).Value = CType(MG_Notes,String)
            End If
            If (MG_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(74).Value = CType(MG_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (MG_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(75).Value = CType(MG_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (SO4_S_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(76).Value = CType(SO4_S_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (SO4_S_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(77).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(77).Value = CType(SO4_S_Notes,String)
            End If
            If (SO4_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(78).Value = CType(SO4_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (SO4_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(79).Value = CType(SO4_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (CL_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(80).Value = CType(CL_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(80).Value = Global.System.DBNull.Value
            End If
            If (CL_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(81).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(81).Value = CType(CL_Notes,String)
            End If
            If (CL_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(82).Value = CType(CL_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (CL_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(83).Value = CType(CL_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            If (DOC_MG_L.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(84).Value = CType(DOC_MG_L.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (DOC_Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(85).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(85).Value = CType(DOC_Notes,String)
            End If
            If (DOC_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(86).Value = CType(DOC_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (DOC_LABDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(87).Value = CType(DOC_LABDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (NOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(88).Value = CType(NOTES,String)
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(89).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(89).Value = CType(COMMENTS,String)
            End If
            If (SOURCE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(90).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(90).Value = CType(SOURCE,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(91).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(92).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(93).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(93).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(94).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(94).Value = CType(RecordUpdatedBy,String)
            End If
            If (RecordCertifiedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(95).Value = CType(RecordCertifiedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(95).Value = Global.System.DBNull.Value
            End If
            If (RecordCertifiedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(96).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(96).Value = CType(RecordCertifiedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal WaterChemistryID As System.Guid,  _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal CHEM_LAB As String,  _
                    ByVal CHEM_METHOD As String,  _
                    ByVal LAB_SAMPLE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal LAB_DATE As Global.System.Nullable(Of Date),  _
                    ByVal DELIVERY_DATE As Global.System.Nullable(Of Date),  _
                    ByVal THAW_DATE As Global.System.Nullable(Of Date),  _
                    ByVal DUPLICATED_CHEM_ANALYSIS As Global.System.Nullable(Of Boolean),  _
                    ByVal PH As Global.System.Nullable(Of Double),  _
                    ByVal PH_Notes As String,  _
                    ByVal PH_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal PH_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal TOTAL_ALKALINITY As Global.System.Nullable(Of Double),  _
                    ByVal TOTAL_ALKALINITY_Notes As String,  _
                    ByVal ALKALINITY_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal ALKALINITY_MG_L_Notes As String,  _
                    ByVal ALK_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal ALK_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal CONDUCTIVITY_AES As Global.System.Nullable(Of Double),  _
                    ByVal CONDUCTIVITY_AES_Notes As String,  _
                    ByVal COND_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal COND_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal TKN_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal TKN_Notes As String,  _
                    ByVal TKN_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal TN_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal TN_Notes As String,  _
                    ByVal TN_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal TN_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal TDN_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal TDN_Notes As String,  _
                    ByVal TDN_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal TDN_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal TP_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal TP_Notes As String,  _
                    ByVal TP_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal TP_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal TDP_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal TDP_Notes As String,  _
                    ByVal TDP_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal TDP_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal PO4_P_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal PO4_P_Notes As String,  _
                    ByVal PO4_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal PO4_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal NO3_N_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal NO3_N_Notes As String,  _
                    ByVal NO3_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal NO3_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal NH3_N_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal NH3_N_Notes As String,  _
                    ByVal NH3_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal NH3_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal SI_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal SI_Notes As String,  _
                    ByVal SI_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal SI_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal NA_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal NA_Notes As String,  _
                    ByVal NA_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal NA_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal K_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal K_Notes As String,  _
                    ByVal K_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal K_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal CA_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal CA_Notes As String,  _
                    ByVal CA_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal CA_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal MG_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal MG_Notes As String,  _
                    ByVal MG_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal MG_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal SO4_S_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal SO4_S_Notes As String,  _
                    ByVal SO4_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal SO4_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal CL_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal CL_Notes As String,  _
                    ByVal CL_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal CL_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal DOC_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal DOC_Notes As String,  _
                    ByVal DOC_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal DOC_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal NOTES As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal RecordCertifiedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordCertifiedBy As String,  _
                    ByVal Original_WaterChemistryID As System.Guid,  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_SAMPLEDATE As Date,  _
                    ByVal Original_SAMPLENUMBER As String,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(WaterChemistryID,System.Guid)
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAMPLEDATE,Date)
            If (SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAMPLENUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SAMPLENUMBER,String)
            End If
            If (CHEM_LAB Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CHEM_LAB,String)
            End If
            If (CHEM_METHOD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CHEM_METHOD,String)
            End If
            If (LAB_SAMPLE_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(LAB_SAMPLE_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (LAB_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(LAB_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (DELIVERY_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(DELIVERY_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (THAW_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(THAW_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (DUPLICATED_CHEM_ANALYSIS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(DUPLICATED_CHEM_ANALYSIS.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PH.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (PH_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(PH_Notes,String)
            End If
            If (PH_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(PH_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PH_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(PH_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_ALKALINITY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(TOTAL_ALKALINITY.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_ALKALINITY_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(TOTAL_ALKALINITY_Notes,String)
            End If
            If (ALKALINITY_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(ALKALINITY_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (ALKALINITY_MG_L_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(ALKALINITY_MG_L_Notes,String)
            End If
            If (ALK_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(ALK_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (ALK_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(ALK_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (CONDUCTIVITY_AES.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(CONDUCTIVITY_AES.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (CONDUCTIVITY_AES_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(CONDUCTIVITY_AES_Notes,String)
            End If
            If (COND_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(COND_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (COND_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(COND_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (TKN_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(TKN_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (TKN_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(TKN_Notes,String)
            End If
            If (TKN_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(TKN_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (TN_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(TN_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (TN_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(TN_Notes,String)
            End If
            If (TN_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(TN_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (TN_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(TN_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (TDN_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(TDN_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (TDN_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(TDN_Notes,String)
            End If
            If (TDN_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(TDN_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (TDN_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(TDN_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (TP_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(TP_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (TP_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(TP_Notes,String)
            End If
            If (TP_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(TP_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (TP_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(TP_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (TDP_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(TDP_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (TDP_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(TDP_Notes,String)
            End If
            If (TDP_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(TDP_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (TDP_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(TDP_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (PO4_P_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(PO4_P_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (PO4_P_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(PO4_P_Notes,String)
            End If
            If (PO4_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(PO4_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (PO4_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(PO4_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (NO3_N_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(NO3_N_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (NO3_N_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(NO3_N_Notes,String)
            End If
            If (NO3_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(NO3_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (NO3_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(NO3_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (NH3_N_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(NH3_N_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (NH3_N_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(NH3_N_Notes,String)
            End If
            If (NH3_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(NH3_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (NH3_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(NH3_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (SI_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(SI_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (SI_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(SI_Notes,String)
            End If
            If (SI_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(SI_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (SI_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(SI_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (NA_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(NA_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (NA_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(NA_Notes,String)
            End If
            If (NA_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(NA_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (NA_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(NA_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (K_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(K_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (K_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(K_Notes,String)
            End If
            If (K_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(K_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (K_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(K_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (CA_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(CA_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (CA_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(CA_Notes,String)
            End If
            If (CA_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(CA_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (CA_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(CA_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (MG_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(MG_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (MG_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(MG_Notes,String)
            End If
            If (MG_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(MG_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (MG_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(MG_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (SO4_S_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(SO4_S_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (SO4_S_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(SO4_S_Notes,String)
            End If
            If (SO4_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(SO4_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (SO4_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(SO4_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (CL_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(CL_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            End If
            If (CL_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(CL_Notes,String)
            End If
            If (CL_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(CL_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (CL_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(CL_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            If (DOC_MG_L.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(DOC_MG_L.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (DOC_Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(DOC_Notes,String)
            End If
            If (DOC_MDL_LEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(DOC_MDL_LEVEL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (DOC_LABDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(DOC_LABDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (NOTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(NOTES,String)
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(COMMENTS,String)
            End If
            If (SOURCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(SOURCE,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(RecordUpdatedBy,String)
            End If
            If (RecordCertifiedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(RecordCertifiedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = Global.System.DBNull.Value
            End If
            If (RecordCertifiedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(RecordCertifiedBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_WaterChemistryID,System.Guid)
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_SAMPLEDATE,Date)
            If (Original_SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAMPLENUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_SAMPLENUMBER,String)
            End If
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CHEM_LAB As String,  _
                    ByVal CHEM_METHOD As String,  _
                    ByVal LAB_SAMPLE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal LAB_DATE As Global.System.Nullable(Of Date),  _
                    ByVal DELIVERY_DATE As Global.System.Nullable(Of Date),  _
                    ByVal THAW_DATE As Global.System.Nullable(Of Date),  _
                    ByVal DUPLICATED_CHEM_ANALYSIS As Global.System.Nullable(Of Boolean),  _
                    ByVal PH As Global.System.Nullable(Of Double),  _
                    ByVal PH_Notes As String,  _
                    ByVal PH_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal PH_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal TOTAL_ALKALINITY As Global.System.Nullable(Of Double),  _
                    ByVal TOTAL_ALKALINITY_Notes As String,  _
                    ByVal ALKALINITY_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal ALKALINITY_MG_L_Notes As String,  _
                    ByVal ALK_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal ALK_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal CONDUCTIVITY_AES As Global.System.Nullable(Of Double),  _
                    ByVal CONDUCTIVITY_AES_Notes As String,  _
                    ByVal COND_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal COND_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal TKN_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal TKN_Notes As String,  _
                    ByVal TKN_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal TN_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal TN_Notes As String,  _
                    ByVal TN_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal TN_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal TDN_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal TDN_Notes As String,  _
                    ByVal TDN_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal TDN_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal TP_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal TP_Notes As String,  _
                    ByVal TP_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal TP_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal TDP_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal TDP_Notes As String,  _
                    ByVal TDP_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal TDP_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal PO4_P_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal PO4_P_Notes As String,  _
                    ByVal PO4_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal PO4_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal NO3_N_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal NO3_N_Notes As String,  _
                    ByVal NO3_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal NO3_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal NH3_N_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal NH3_N_Notes As String,  _
                    ByVal NH3_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal NH3_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal SI_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal SI_Notes As String,  _
                    ByVal SI_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal SI_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal NA_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal NA_Notes As String,  _
                    ByVal NA_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal NA_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal K_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal K_Notes As String,  _
                    ByVal K_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal K_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal CA_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal CA_Notes As String,  _
                    ByVal CA_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal CA_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal MG_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal MG_Notes As String,  _
                    ByVal MG_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal MG_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal SO4_S_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal SO4_S_Notes As String,  _
                    ByVal SO4_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal SO4_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal CL_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal CL_Notes As String,  _
                    ByVal CL_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal CL_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal DOC_MG_L As Global.System.Nullable(Of Double),  _
                    ByVal DOC_Notes As String,  _
                    ByVal DOC_MDL_LEVEL As Global.System.Nullable(Of Double),  _
                    ByVal DOC_LABDATE As Global.System.Nullable(Of Date),  _
                    ByVal NOTES As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal SOURCE As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal RecordCertifiedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordCertifiedBy As String,  _
                    ByVal Original_WaterChemistryID As System.Guid,  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_SAMPLEDATE As Date,  _
                    ByVal Original_SAMPLENUMBER As String,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_WaterChemistryID, Original_PONDNAME, Original_SAMPLEDATE, Original_SAMPLENUMBER, CHEM_LAB, CHEM_METHOD, LAB_SAMPLE_NUMBER, LAB_DATE, DELIVERY_DATE, THAW_DATE, DUPLICATED_CHEM_ANALYSIS, PH, PH_Notes, PH_MDL_LEVEL, PH_LABDATE, TOTAL_ALKALINITY, TOTAL_ALKALINITY_Notes, ALKALINITY_MG_L, ALKALINITY_MG_L_Notes, ALK_MDL_LEVEL, ALK_LABDATE, CONDUCTIVITY_AES, CONDUCTIVITY_AES_Notes, COND_MDL_LEVEL, COND_LABDATE, TKN_MG_L, TKN_Notes, TKN_MDL_LEVEL, TN_MG_L, TN_Notes, TN_MDL_LEVEL, TN_LABDATE, TDN_MG_L, TDN_Notes, TDN_MDL_LEVEL, TDN_LABDATE, TP_MG_L, TP_Notes, TP_MDL_LEVEL, TP_LABDATE, TDP_MG_L, TDP_Notes, TDP_MDL_LEVEL, TDP_LABDATE, PO4_P_MG_L, PO4_P_Notes, PO4_MDL_LEVEL, PO4_LABDATE, NO3_N_MG_L, NO3_N_Notes, NO3_MDL_LEVEL, NO3_LABDATE, NH3_N_MG_L, NH3_N_Notes, NH3_MDL_LEVEL, NH3_LABDATE, SI_MG_L, SI_Notes, SI_MDL_LEVEL, SI_LABDATE, NA_MG_L, NA_Notes, NA_MDL_LEVEL, NA_LABDATE, K_MG_L, K_Notes, K_MDL_LEVEL, K_LABDATE, CA_MG_L, CA_Notes, CA_MDL_LEVEL, CA_LABDATE, MG_MG_L, MG_Notes, MG_MDL_LEVEL, MG_LABDATE, SO4_S_MG_L, SO4_S_Notes, SO4_MDL_LEVEL, SO4_LABDATE, CL_MG_L, CL_Notes, CL_MDL_LEVEL, CL_LABDATE, DOC_MG_L, DOC_Notes, DOC_MDL_LEVEL, DOC_LABDATE, NOTES, COMMENTS, SOURCE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, RecordCertifiedDate, RecordCertifiedBy, Original_WaterChemistryID, Original_PONDNAME, Original_SAMPLEDATE, Original_SAMPLENUMBER, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblWaterProfilesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblWaterProfiles"
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("SAMPLEDATE", "SAMPLEDATE")
            tableMapping.ColumnMappings.Add("SAMPLENUMBER", "SAMPLENUMBER")
            tableMapping.ColumnMappings.Add("SAMPLETIME", "SAMPLETIME")
            tableMapping.ColumnMappings.Add("SAMPLEDEPTH", "SAMPLEDEPTH")
            tableMapping.ColumnMappings.Add("DEPTH_SENSORCALC", "DEPTH_SENSORCALC")
            tableMapping.ColumnMappings.Add("TEMPERATURE", "TEMPERATURE")
            tableMapping.ColumnMappings.Add("PH", "PH")
            tableMapping.ColumnMappings.Add("pH_mV", "pH_mV")
            tableMapping.ColumnMappings.Add("SPECIFICCONDUCTANCE", "SPECIFICCONDUCTANCE")
            tableMapping.ColumnMappings.Add("DO", "DO")
            tableMapping.ColumnMappings.Add("DO_PCT", "DO_PCT")
            tableMapping.ColumnMappings.Add("DO_Charge", "DO_Charge")
            tableMapping.ColumnMappings.Add("PROFILE_COMMENTS", "PROFILE_COMMENTS")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            tableMapping.ColumnMappings.Add("DO_METHOD", "DO_METHOD")
            tableMapping.ColumnMappings.Add("ODO_PCT_LOCALB", "ODO_PCT_LOCALB")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblWaterProfiles] WHERE (([PONDNAME] = @Original_PONDNAME) AND"& _ 
                " ([SAMPLEDATE] = @Original_SAMPLEDATE) AND ([SAMPLENUMBER] = @Original_SAMPLENUM"& _ 
                "BER) AND ([SAMPLEDEPTH] = @Original_SAMPLEDEPTH) AND ([row_timestamp] = @Origina"& _ 
                "l_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDEPTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblWaterProfiles] ([PONDNAME], [SAMPLEDATE], [SAMPLENUMBER], ["& _ 
                "SAMPLETIME], [SAMPLEDEPTH], [DEPTH_SENSORCALC], [TEMPERATURE], [PH], [pH_mV], [S"& _ 
                "PECIFICCONDUCTANCE], [DO], [DO_PCT], [DO_Charge], [PROFILE_COMMENTS], [RecordIns"& _ 
                "ertedDate], [RecordInsertedBy], [RecordUpdatedDate], [RecordUpdatedBy], [DO_METH"& _ 
                "OD], [ODO_PCT_LOCALB]) VALUES (@PONDNAME, @SAMPLEDATE, @SAMPLENUMBER, @SAMPLETIM"& _ 
                "E, @SAMPLEDEPTH, @DEPTH_SENSORCALC, @TEMPERATURE, @PH, @pH_mV, @SPECIFICCONDUCTA"& _ 
                "NCE, @DO, @DO_PCT, @DO_Charge, @PROFILE_COMMENTS, @RecordInsertedDate, @RecordIn"& _ 
                "sertedBy, @RecordUpdatedDate, @RecordUpdatedBy, @DO_METHOD, @ODO_PCT_LOCALB);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"S"& _ 
                "ELECT PONDNAME, SAMPLEDATE, SAMPLENUMBER, SAMPLETIME, SAMPLEDEPTH, DEPTH_SENSORC"& _ 
                "ALC, TEMPERATURE, PH, pH_mV, SPECIFICCONDUCTANCE, DO, DO_PCT, DO_Charge, PROFILE"& _ 
                "_COMMENTS, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdate"& _ 
                "dBy, row_timestamp, DO_METHOD, ODO_PCT_LOCALB FROM tblWaterProfiles WHERE (PONDN"& _ 
                "AME = @PONDNAME) AND (SAMPLEDATE = @SAMPLEDATE) AND (SAMPLEDEPTH = @SAMPLEDEPTH)"& _ 
                " AND (SAMPLENUMBER = @SAMPLENUMBER)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLETIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLETIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEPTH_SENSORCALC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEPTH_SENSORCALC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TEMPERATURE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TEMPERATURE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pH_mV", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pH_mV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIFICCONDUCTANCE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIFICCONDUCTANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DO", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DO_PCT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DO_PCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DO_Charge", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DO_Charge", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROFILE_COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROFILE_COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DO_METHOD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DO_METHOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ODO_PCT_LOCALB", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ODO_PCT_LOCALB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblWaterProfiles] SET [PONDNAME] = @PONDNAME, [SAMPLEDATE] = @SAMPL"& _ 
                "EDATE, [SAMPLENUMBER] = @SAMPLENUMBER, [SAMPLETIME] = @SAMPLETIME, [SAMPLEDEPTH]"& _ 
                " = @SAMPLEDEPTH, [DEPTH_SENSORCALC] = @DEPTH_SENSORCALC, [TEMPERATURE] = @TEMPER"& _ 
                "ATURE, [PH] = @PH, [pH_mV] = @pH_mV, [SPECIFICCONDUCTANCE] = @SPECIFICCONDUCTANC"& _ 
                "E, [DO] = @DO, [DO_PCT] = @DO_PCT, [DO_Charge] = @DO_Charge, [PROFILE_COMMENTS] "& _ 
                "= @PROFILE_COMMENTS, [RecordInsertedDate] = @RecordInsertedDate, [RecordInserted"& _ 
                "By] = @RecordInsertedBy, [RecordUpdatedDate] = @RecordUpdatedDate, [RecordUpdate"& _ 
                "dBy] = @RecordUpdatedBy, [DO_METHOD] = @DO_METHOD, [ODO_PCT_LOCALB] = @ODO_PCT_L"& _ 
                "OCALB WHERE (([PONDNAME] = @Original_PONDNAME) AND ([SAMPLEDATE] = @Original_SAM"& _ 
                "PLEDATE) AND ([SAMPLENUMBER] = @Original_SAMPLENUMBER) AND ([SAMPLEDEPTH] = @Ori"& _ 
                "ginal_SAMPLEDEPTH) AND ([row_timestamp] = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PON"& _ 
                "DNAME, SAMPLEDATE, SAMPLENUMBER, SAMPLETIME, SAMPLEDEPTH, DEPTH_SENSORCALC, TEMP"& _ 
                "ERATURE, PH, pH_mV, SPECIFICCONDUCTANCE, DO, DO_PCT, DO_Charge, PROFILE_COMMENTS"& _ 
                ", RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_"& _ 
                "timestamp, DO_METHOD, ODO_PCT_LOCALB FROM tblWaterProfiles WHERE (PONDNAME = @PO"& _ 
                "NDNAME) AND (SAMPLEDATE = @SAMPLEDATE) AND (SAMPLEDEPTH = @SAMPLEDEPTH) AND (SAM"& _ 
                "PLENUMBER = @SAMPLENUMBER)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLETIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLETIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEPTH_SENSORCALC", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEPTH_SENSORCALC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TEMPERATURE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TEMPERATURE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pH_mV", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pH_mV", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPECIFICCONDUCTANCE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPECIFICCONDUCTANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DO", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DO_PCT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DO_PCT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DO_Charge", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DO_Charge", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROFILE_COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROFILE_COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DO_METHOD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DO_METHOD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ODO_PCT_LOCALB", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ODO_PCT_LOCALB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDEPTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PONDNAME, SAMPLEDATE, SAMPLENUMBER, SAMPLETIME, SAMPLEDEPTH, DEPTH_SENSORC"& _ 
                "ALC, TEMPERATURE, PH, pH_mV, SPECIFICCONDUCTANCE, DO, DO_PCT, DO_Charge, PROFILE"& _ 
                "_COMMENTS, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdate"& _ 
                "dBy, row_timestamp, DO_METHOD, ODO_PCT_LOCALB FROM dbo.tblWaterProfiles"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblWaterProfilesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblWaterProfilesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblWaterProfilesDataTable = New AK_ShallowLakesDataSet.tblWaterProfilesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblWaterProfilesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblWaterProfiles")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PONDNAME As String, ByVal Original_SAMPLEDATE As Date, ByVal Original_SAMPLENUMBER As String, ByVal Original_SAMPLEDEPTH As Double, ByVal Original_row_timestamp() As Byte) As Integer
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SAMPLEDATE,Date)
            If (Original_SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAMPLENUMBER")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SAMPLENUMBER,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SAMPLEDEPTH,Double)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal SAMPLETIME As Global.System.Nullable(Of Date),  _
                    ByVal SAMPLEDEPTH As Double,  _
                    ByVal DEPTH_SENSORCALC As Global.System.Nullable(Of Double),  _
                    ByVal TEMPERATURE As Global.System.Nullable(Of Double),  _
                    ByVal PH As Global.System.Nullable(Of Double),  _
                    ByVal pH_mV As Global.System.Nullable(Of Double),  _
                    ByVal SPECIFICCONDUCTANCE As Global.System.Nullable(Of Double),  _
                    ByVal _DO As Global.System.Nullable(Of Double),  _
                    ByVal DO_PCT As Global.System.Nullable(Of Double),  _
                    ByVal DO_Charge As Global.System.Nullable(Of Double),  _
                    ByVal PROFILE_COMMENTS As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal DO_METHOD As String,  _
                    ByVal ODO_PCT_LOCALB As Global.System.Nullable(Of Double)) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAMPLEDATE,Date)
            If (SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAMPLENUMBER")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAMPLENUMBER,String)
            End If
            If (SAMPLETIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SAMPLETIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(SAMPLEDEPTH,Double)
            If (DEPTH_SENSORCALC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DEPTH_SENSORCALC.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TEMPERATURE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TEMPERATURE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PH.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (pH_mV.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(pH_mV.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (SPECIFICCONDUCTANCE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SPECIFICCONDUCTANCE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (_DO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(_DO.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (DO_PCT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(DO_PCT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (DO_Charge.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(DO_Charge.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PROFILE_COMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PROFILE_COMMENTS,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(RecordUpdatedBy,String)
            End If
            If (DO_METHOD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(DO_METHOD,String)
            End If
            If (ODO_PCT_LOCALB.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(ODO_PCT_LOCALB.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal SAMPLETIME As Global.System.Nullable(Of Date),  _
                    ByVal SAMPLEDEPTH As Double,  _
                    ByVal DEPTH_SENSORCALC As Global.System.Nullable(Of Double),  _
                    ByVal TEMPERATURE As Global.System.Nullable(Of Double),  _
                    ByVal PH As Global.System.Nullable(Of Double),  _
                    ByVal pH_mV As Global.System.Nullable(Of Double),  _
                    ByVal SPECIFICCONDUCTANCE As Global.System.Nullable(Of Double),  _
                    ByVal _DO As Global.System.Nullable(Of Double),  _
                    ByVal DO_PCT As Global.System.Nullable(Of Double),  _
                    ByVal DO_Charge As Global.System.Nullable(Of Double),  _
                    ByVal PROFILE_COMMENTS As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal DO_METHOD As String,  _
                    ByVal ODO_PCT_LOCALB As Global.System.Nullable(Of Double),  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_SAMPLEDATE As Date,  _
                    ByVal Original_SAMPLENUMBER As String,  _
                    ByVal Original_SAMPLEDEPTH As Double,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAMPLEDATE,Date)
            If (SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAMPLENUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAMPLENUMBER,String)
            End If
            If (SAMPLETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SAMPLETIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SAMPLEDEPTH,Double)
            If (DEPTH_SENSORCALC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DEPTH_SENSORCALC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TEMPERATURE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TEMPERATURE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PH.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (pH_mV.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(pH_mV.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (SPECIFICCONDUCTANCE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SPECIFICCONDUCTANCE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (_DO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(_DO.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (DO_PCT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(DO_PCT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (DO_Charge.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(DO_Charge.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PROFILE_COMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(PROFILE_COMMENTS,String)
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(RecordUpdatedBy,String)
            End If
            If (DO_METHOD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(DO_METHOD,String)
            End If
            If (ODO_PCT_LOCALB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(ODO_PCT_LOCALB.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_SAMPLEDATE,Date)
            If (Original_SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAMPLENUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_SAMPLENUMBER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_SAMPLEDEPTH,Double)
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SAMPLETIME As Global.System.Nullable(Of Date),  _
                    ByVal DEPTH_SENSORCALC As Global.System.Nullable(Of Double),  _
                    ByVal TEMPERATURE As Global.System.Nullable(Of Double),  _
                    ByVal PH As Global.System.Nullable(Of Double),  _
                    ByVal pH_mV As Global.System.Nullable(Of Double),  _
                    ByVal SPECIFICCONDUCTANCE As Global.System.Nullable(Of Double),  _
                    ByVal _DO As Global.System.Nullable(Of Double),  _
                    ByVal DO_PCT As Global.System.Nullable(Of Double),  _
                    ByVal DO_Charge As Global.System.Nullable(Of Double),  _
                    ByVal PROFILE_COMMENTS As String,  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal DO_METHOD As String,  _
                    ByVal ODO_PCT_LOCALB As Global.System.Nullable(Of Double),  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_SAMPLEDATE As Date,  _
                    ByVal Original_SAMPLENUMBER As String,  _
                    ByVal Original_SAMPLEDEPTH As Double,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_PONDNAME, Original_SAMPLEDATE, Original_SAMPLENUMBER, SAMPLETIME, Original_SAMPLEDEPTH, DEPTH_SENSORCALC, TEMPERATURE, PH, pH_mV, SPECIFICCONDUCTANCE, _DO, DO_PCT, DO_Charge, PROFILE_COMMENTS, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, DO_METHOD, ODO_PCT_LOCALB, Original_PONDNAME, Original_SAMPLEDATE, Original_SAMPLENUMBER, Original_SAMPLEDEPTH, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblWaterSamplesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblWaterSamples"
            tableMapping.ColumnMappings.Add("PONDNAME", "PONDNAME")
            tableMapping.ColumnMappings.Add("SAMPLEDATE", "SAMPLEDATE")
            tableMapping.ColumnMappings.Add("SAMPLENUMBER", "SAMPLENUMBER")
            tableMapping.ColumnMappings.Add("SAMPLEDEPTH", "SAMPLEDEPTH")
            tableMapping.ColumnMappings.Add("SAMPLETIME", "SAMPLETIME")
            tableMapping.ColumnMappings.Add("DEPTH", "DEPTH")
            tableMapping.ColumnMappings.Add("WATERCOLOR", "WATERCOLOR")
            tableMapping.ColumnMappings.Add("ALKALINITY", "ALKALINITY")
            tableMapping.ColumnMappings.Add("VOLUMEFILTERED", "VOLUMEFILTERED")
            tableMapping.ColumnMappings.Add("COMMENTS", "COMMENTS")
            tableMapping.ColumnMappings.Add("SHIPPING_DATE", "SHIPPING_DATE")
            tableMapping.ColumnMappings.Add("SHIPPING_INFO", "SHIPPING_INFO")
            tableMapping.ColumnMappings.Add("Methane", "Methane")
            tableMapping.ColumnMappings.Add("DOC_COLL", "DOC_COLL")
            tableMapping.ColumnMappings.Add("O18_COLL", "O18_COLL")
            tableMapping.ColumnMappings.Add("SI_DOC_COLL", "SI_DOC_COLL")
            tableMapping.ColumnMappings.Add("IONS_COLL", "IONS_COLL")
            tableMapping.ColumnMappings.Add("TN_TP_COLL", "TN_TP_COLL")
            tableMapping.ColumnMappings.Add("CHLA_COLL", "CHLA_COLL")
            tableMapping.ColumnMappings.Add("NOTES", "NOTES")
            tableMapping.ColumnMappings.Add("DISTFROMSHORE", "DISTFROMSHORE")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordUpdatedDate", "RecordUpdatedDate")
            tableMapping.ColumnMappings.Add("RecordUpdatedBy", "RecordUpdatedBy")
            tableMapping.ColumnMappings.Add("row_timestamp", "row_timestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblWaterSamples] WHERE (([PONDNAME] = @Original_PONDNAME) AND "& _ 
                "([SAMPLEDATE] = @Original_SAMPLEDATE) AND ([SAMPLENUMBER] = @Original_SAMPLENUMB"& _ 
                "ER) AND ([row_timestamp] = @Original_row_timestamp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblWaterSamples] ([PONDNAME], [SAMPLEDATE], [SAMPLENUMBER], [S"& _ 
                "AMPLEDEPTH], [SAMPLETIME], [DEPTH], [WATERCOLOR], [ALKALINITY], [VOLUMEFILTERED]"& _ 
                ", [COMMENTS], [SHIPPING_DATE], [SHIPPING_INFO], [Methane], [DOC_COLL], [O18_COLL"& _ 
                "], [SI_DOC_COLL], [IONS_COLL], [TN_TP_COLL], [CHLA_COLL], [NOTES], [DISTFROMSHOR"& _ 
                "E], [RecordInsertedDate], [RecordInsertedBy], [RecordUpdatedDate], [RecordUpdate"& _ 
                "dBy]) VALUES (@PONDNAME, @SAMPLEDATE, @SAMPLENUMBER, @SAMPLEDEPTH, @SAMPLETIME, "& _ 
                "@DEPTH, @WATERCOLOR, @ALKALINITY, @VOLUMEFILTERED, @COMMENTS, @SHIPPING_DATE, @S"& _ 
                "HIPPING_INFO, @Methane, @DOC_COLL, @O18_COLL, @SI_DOC_COLL, @IONS_COLL, @TN_TP_C"& _ 
                "OLL, @CHLA_COLL, @NOTES, @DISTFROMSHORE, @RecordInsertedDate, @RecordInsertedBy,"& _ 
                " @RecordUpdatedDate, @RecordUpdatedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PONDNAME, SAMPLEDATE, SAMPLENUMB"& _ 
                "ER, SAMPLEDEPTH, SAMPLETIME, DEPTH, WATERCOLOR, ALKALINITY, VOLUMEFILTERED, COMM"& _ 
                "ENTS, SHIPPING_DATE, SHIPPING_INFO, Methane, DOC_COLL, O18_COLL, SI_DOC_COLL, IO"& _ 
                "NS_COLL, TN_TP_COLL, CHLA_COLL, NOTES, DISTFROMSHORE, RecordInsertedDate, Record"& _ 
                "InsertedBy, RecordUpdatedDate, RecordUpdatedBy, row_timestamp FROM tblWaterSampl"& _ 
                "es WHERE (PONDNAME = @PONDNAME) AND (SAMPLEDATE = @SAMPLEDATE) AND (SAMPLENUMBER"& _ 
                " = @SAMPLENUMBER)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLETIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLETIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEPTH", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "DEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WATERCOLOR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WATERCOLOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ALKALINITY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ALKALINITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VOLUMEFILTERED", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOLUMEFILTERED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPPING_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPPING_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPPING_INFO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPPING_INFO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Methane", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Methane", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOC_COLL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOC_COLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@O18_COLL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "O18_COLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SI_DOC_COLL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SI_DOC_COLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IONS_COLL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IONS_COLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TN_TP_COLL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TN_TP_COLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_COLL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_COLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISTFROMSHORE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISTFROMSHORE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblWaterSamples] SET [PONDNAME] = @PONDNAME, [SAMPLEDATE] = @SAMPLE"& _ 
                "DATE, [SAMPLENUMBER] = @SAMPLENUMBER, [SAMPLEDEPTH] = @SAMPLEDEPTH, [SAMPLETIME]"& _ 
                " = @SAMPLETIME, [DEPTH] = @DEPTH, [WATERCOLOR] = @WATERCOLOR, [ALKALINITY] = @AL"& _ 
                "KALINITY, [VOLUMEFILTERED] = @VOLUMEFILTERED, [COMMENTS] = @COMMENTS, [SHIPPING_"& _ 
                "DATE] = @SHIPPING_DATE, [SHIPPING_INFO] = @SHIPPING_INFO, [Methane] = @Methane, "& _ 
                "[DOC_COLL] = @DOC_COLL, [O18_COLL] = @O18_COLL, [SI_DOC_COLL] = @SI_DOC_COLL, [I"& _ 
                "ONS_COLL] = @IONS_COLL, [TN_TP_COLL] = @TN_TP_COLL, [CHLA_COLL] = @CHLA_COLL, [N"& _ 
                "OTES] = @NOTES, [DISTFROMSHORE] = @DISTFROMSHORE, [RecordInsertedDate] = @Record"& _ 
                "InsertedDate, [RecordInsertedBy] = @RecordInsertedBy, [RecordUpdatedDate] = @Rec"& _ 
                "ordUpdatedDate, [RecordUpdatedBy] = @RecordUpdatedBy WHERE (([PONDNAME] = @Origi"& _ 
                "nal_PONDNAME) AND ([SAMPLEDATE] = @Original_SAMPLEDATE) AND ([SAMPLENUMBER] = @O"& _ 
                "riginal_SAMPLENUMBER) AND ([row_timestamp] = @Original_row_timestamp));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "PONDNAME, SAMPLEDATE, SAMPLENUMBER, SAMPLEDEPTH, SAMPLETIME, DEPTH, WATERCOLOR, "& _ 
                "ALKALINITY, VOLUMEFILTERED, COMMENTS, SHIPPING_DATE, SHIPPING_INFO, Methane, DOC"& _ 
                "_COLL, O18_COLL, SI_DOC_COLL, IONS_COLL, TN_TP_COLL, CHLA_COLL, NOTES, DISTFROMS"& _ 
                "HORE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, "& _ 
                "row_timestamp FROM tblWaterSamples WHERE (PONDNAME = @PONDNAME) AND (SAMPLEDATE "& _ 
                "= @SAMPLEDATE) AND (SAMPLENUMBER = @SAMPLENUMBER)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLEDEPTH", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAMPLETIME", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLETIME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEPTH", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 1, "DEPTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WATERCOLOR", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WATERCOLOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ALKALINITY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ALKALINITY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VOLUMEFILTERED", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOLUMEFILTERED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPPING_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPPING_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SHIPPING_INFO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SHIPPING_INFO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Methane", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Methane", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOC_COLL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOC_COLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@O18_COLL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "O18_COLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SI_DOC_COLL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SI_DOC_COLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IONS_COLL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IONS_COLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TN_TP_COLL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TN_TP_COLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHLA_COLL", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHLA_COLL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOTES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOTES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISTFROMSHORE", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISTFROMSHORE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PONDNAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PONDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLEDATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLEDATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAMPLENUMBER", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAMPLENUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_row_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "row_timestamp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Shallow_Lakes_Database_Application.My.MySettings.Default.AK_ShallowLakesConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PONDNAME, SAMPLEDATE, SAMPLENUMBER, SAMPLEDEPTH, SAMPLETIME, DEPTH, WATERC"& _ 
                "OLOR, ALKALINITY, VOLUMEFILTERED, COMMENTS, SHIPPING_DATE, SHIPPING_INFO, Methan"& _ 
                "e, DOC_COLL, O18_COLL, SI_DOC_COLL, IONS_COLL, TN_TP_COLL, CHLA_COLL, NOTES, DIS"& _ 
                "TFROMSHORE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdat"& _ 
                "edBy, row_timestamp FROM dbo.tblWaterSamples"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AK_ShallowLakesDataSet.tblWaterSamplesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AK_ShallowLakesDataSet.tblWaterSamplesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AK_ShallowLakesDataSet.tblWaterSamplesDataTable = New AK_ShallowLakesDataSet.tblWaterSamplesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AK_ShallowLakesDataSet.tblWaterSamplesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tblWaterSamples")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PONDNAME As String, ByVal Original_SAMPLEDATE As Date, ByVal Original_SAMPLENUMBER As String, ByVal Original_row_timestamp() As Byte) As Integer
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SAMPLEDATE,Date)
            If (Original_SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAMPLENUMBER")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SAMPLENUMBER,String)
            End If
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal SAMPLEDEPTH As Global.System.Nullable(Of Double),  _
                    ByVal SAMPLETIME As Global.System.Nullable(Of Date),  _
                    ByVal DEPTH As Global.System.Nullable(Of Decimal),  _
                    ByVal WATERCOLOR As Global.System.Nullable(Of Double),  _
                    ByVal ALKALINITY As Global.System.Nullable(Of Double),  _
                    ByVal VOLUMEFILTERED As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal SHIPPING_DATE As Global.System.Nullable(Of Date),  _
                    ByVal SHIPPING_INFO As String,  _
                    ByVal Methane As Global.System.Nullable(Of Boolean),  _
                    ByVal DOC_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal O18_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal SI_DOC_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal IONS_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal TN_TP_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal CHLA_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal NOTES As String,  _
                    ByVal DISTFROMSHORE As Global.System.Nullable(Of Double),  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAMPLEDATE,Date)
            If (SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAMPLENUMBER")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAMPLENUMBER,String)
            End If
            If (SAMPLEDEPTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SAMPLEDEPTH.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (SAMPLETIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SAMPLETIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DEPTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DEPTH.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (WATERCOLOR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(WATERCOLOR.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ALKALINITY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ALKALINITY.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (VOLUMEFILTERED Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(VOLUMEFILTERED,String)
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(COMMENTS,String)
            End If
            If (SHIPPING_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SHIPPING_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (SHIPPING_INFO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SHIPPING_INFO,String)
            End If
            If (Methane.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Methane.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (DOC_COLL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(DOC_COLL.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (O18_COLL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(O18_COLL.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (SI_DOC_COLL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(SI_DOC_COLL.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (IONS_COLL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(IONS_COLL.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (TN_TP_COLL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(TN_TP_COLL.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (CHLA_COLL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(CHLA_COLL.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (NOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(NOTES,String)
            End If
            If (DISTFROMSHORE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(DISTFROMSHORE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(RecordUpdatedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PONDNAME As String,  _
                    ByVal SAMPLEDATE As Date,  _
                    ByVal SAMPLENUMBER As String,  _
                    ByVal SAMPLEDEPTH As Global.System.Nullable(Of Double),  _
                    ByVal SAMPLETIME As Global.System.Nullable(Of Date),  _
                    ByVal DEPTH As Global.System.Nullable(Of Decimal),  _
                    ByVal WATERCOLOR As Global.System.Nullable(Of Double),  _
                    ByVal ALKALINITY As Global.System.Nullable(Of Double),  _
                    ByVal VOLUMEFILTERED As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal SHIPPING_DATE As Global.System.Nullable(Of Date),  _
                    ByVal SHIPPING_INFO As String,  _
                    ByVal Methane As Global.System.Nullable(Of Boolean),  _
                    ByVal DOC_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal O18_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal SI_DOC_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal IONS_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal TN_TP_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal CHLA_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal NOTES As String,  _
                    ByVal DISTFROMSHORE As Global.System.Nullable(Of Double),  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_SAMPLEDATE As Date,  _
                    ByVal Original_SAMPLENUMBER As String,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            If (PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAMPLEDATE,Date)
            If (SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAMPLENUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAMPLENUMBER,String)
            End If
            If (SAMPLEDEPTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SAMPLEDEPTH.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (SAMPLETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SAMPLETIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DEPTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DEPTH.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (WATERCOLOR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(WATERCOLOR.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ALKALINITY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ALKALINITY.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (VOLUMEFILTERED Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(VOLUMEFILTERED,String)
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(COMMENTS,String)
            End If
            If (SHIPPING_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SHIPPING_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (SHIPPING_INFO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SHIPPING_INFO,String)
            End If
            If (Methane.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Methane.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (DOC_COLL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(DOC_COLL.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (O18_COLL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(O18_COLL.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (SI_DOC_COLL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(SI_DOC_COLL.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (IONS_COLL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(IONS_COLL.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (TN_TP_COLL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(TN_TP_COLL.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (CHLA_COLL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(CHLA_COLL.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (NOTES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(NOTES,String)
            End If
            If (DISTFROMSHORE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(DISTFROMSHORE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(RecordInsertedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (RecordInsertedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(RecordInsertedBy,String)
            End If
            If (RecordUpdatedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(RecordUpdatedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (RecordUpdatedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(RecordUpdatedBy,String)
            End If
            If (Original_PONDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PONDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_PONDNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_SAMPLEDATE,Date)
            If (Original_SAMPLENUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAMPLENUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_SAMPLENUMBER,String)
            End If
            If (Original_row_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_row_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_row_timestamp,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SAMPLEDEPTH As Global.System.Nullable(Of Double),  _
                    ByVal SAMPLETIME As Global.System.Nullable(Of Date),  _
                    ByVal DEPTH As Global.System.Nullable(Of Decimal),  _
                    ByVal WATERCOLOR As Global.System.Nullable(Of Double),  _
                    ByVal ALKALINITY As Global.System.Nullable(Of Double),  _
                    ByVal VOLUMEFILTERED As String,  _
                    ByVal COMMENTS As String,  _
                    ByVal SHIPPING_DATE As Global.System.Nullable(Of Date),  _
                    ByVal SHIPPING_INFO As String,  _
                    ByVal Methane As Global.System.Nullable(Of Boolean),  _
                    ByVal DOC_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal O18_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal SI_DOC_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal IONS_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal TN_TP_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal CHLA_COLL As Global.System.Nullable(Of Boolean),  _
                    ByVal NOTES As String,  _
                    ByVal DISTFROMSHORE As Global.System.Nullable(Of Double),  _
                    ByVal RecordInsertedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal RecordUpdatedDate As Global.System.Nullable(Of Date),  _
                    ByVal RecordUpdatedBy As String,  _
                    ByVal Original_PONDNAME As String,  _
                    ByVal Original_SAMPLEDATE As Date,  _
                    ByVal Original_SAMPLENUMBER As String,  _
                    ByVal Original_row_timestamp() As Byte) As Integer
            Return Me.Update(Original_PONDNAME, Original_SAMPLEDATE, Original_SAMPLENUMBER, SAMPLEDEPTH, SAMPLETIME, DEPTH, WATERCOLOR, ALKALINITY, VOLUMEFILTERED, COMMENTS, SHIPPING_DATE, SHIPPING_INFO, Methane, DOC_COLL, O18_COLL, SI_DOC_COLL, IONS_COLL, TN_TP_COLL, CHLA_COLL, NOTES, DISTFROMSHORE, RecordInsertedDate, RecordInsertedBy, RecordUpdatedDate, RecordUpdatedBy, Original_PONDNAME, Original_SAMPLEDATE, Original_SAMPLENUMBER, Original_row_timestamp)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _tbl_ContinuousTLLTableAdapter As tbl_ContinuousTLLTableAdapter
        
        Private _tbl_ContinuousWLTableAdapter As tbl_ContinuousWLTableAdapter
        
        Private _tbl_ContinuousYSITableAdapter As tbl_ContinuousYSITableAdapter
        
        Private _tblChlorophyllTableAdapter As tblChlorophyllTableAdapter
        
        Private _tblContinuousDataDeploymentsTableAdapter As tblContinuousDataDeploymentsTableAdapter
        
        Private _tblContinuousDataLoggersTableAdapter As tblContinuousDataLoggersTableAdapter
        
        Private _tblContinuousDataSitesTableAdapter As tblContinuousDataSitesTableAdapter
        
        Private _tblDBEditsTableAdapter As tblDBEditsTableAdapter
        
        Private _tblDBIssuesTableAdapter As tblDBIssuesTableAdapter
        
        Private _tblEventsTableAdapter As tblEventsTableAdapter
        
        Private _tblFrogMonitorsTableAdapter As tblFrogMonitorsTableAdapter
        
        Private _tblInvertebratesTableAdapter As tblInvertebratesTableAdapter
        
        Private _tblInvertebrateSamplesTableAdapter As tblInvertebrateSamplesTableAdapter
        
        Private _tblLoonsTableAdapter As tblLoonsTableAdapter
        
        Private _tblMonumentsTableAdapter As tblMonumentsTableAdapter
        
        Private _tblPhotosTableAdapter As tblPhotosTableAdapter
        
        Private _tblPondDepthsTableAdapter As tblPondDepthsTableAdapter
        
        Private _tblPondsTableAdapter As tblPondsTableAdapter
        
        Private _tblTransQuadratsTableAdapter As tblTransQuadratsTableAdapter
        
        Private _tblTransSpeciesPointInterceptsTableAdapter As tblTransSpeciesPointInterceptsTableAdapter
        
        Private _tblUSGSLabDataTableAdapter As tblUSGSLabDataTableAdapter
        
        Private _tblVegProfilesTableAdapter As tblVegProfilesTableAdapter
        
        Private _tblVegTransectsTableAdapter As tblVegTransectsTableAdapter
        
        Private _tblWaterChemistryTableAdapter As tblWaterChemistryTableAdapter
        
        Private _tblWaterProfilesTableAdapter As tblWaterProfilesTableAdapter
        
        Private _tblWaterSamplesTableAdapter As tblWaterSamplesTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tbl_ContinuousTLLTableAdapter() As tbl_ContinuousTLLTableAdapter
            Get
                Return Me._tbl_ContinuousTLLTableAdapter
            End Get
            Set
                Me._tbl_ContinuousTLLTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tbl_ContinuousWLTableAdapter() As tbl_ContinuousWLTableAdapter
            Get
                Return Me._tbl_ContinuousWLTableAdapter
            End Get
            Set
                Me._tbl_ContinuousWLTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tbl_ContinuousYSITableAdapter() As tbl_ContinuousYSITableAdapter
            Get
                Return Me._tbl_ContinuousYSITableAdapter
            End Get
            Set
                Me._tbl_ContinuousYSITableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblChlorophyllTableAdapter() As tblChlorophyllTableAdapter
            Get
                Return Me._tblChlorophyllTableAdapter
            End Get
            Set
                Me._tblChlorophyllTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblContinuousDataDeploymentsTableAdapter() As tblContinuousDataDeploymentsTableAdapter
            Get
                Return Me._tblContinuousDataDeploymentsTableAdapter
            End Get
            Set
                Me._tblContinuousDataDeploymentsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblContinuousDataLoggersTableAdapter() As tblContinuousDataLoggersTableAdapter
            Get
                Return Me._tblContinuousDataLoggersTableAdapter
            End Get
            Set
                Me._tblContinuousDataLoggersTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblContinuousDataSitesTableAdapter() As tblContinuousDataSitesTableAdapter
            Get
                Return Me._tblContinuousDataSitesTableAdapter
            End Get
            Set
                Me._tblContinuousDataSitesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblDBEditsTableAdapter() As tblDBEditsTableAdapter
            Get
                Return Me._tblDBEditsTableAdapter
            End Get
            Set
                Me._tblDBEditsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblDBIssuesTableAdapter() As tblDBIssuesTableAdapter
            Get
                Return Me._tblDBIssuesTableAdapter
            End Get
            Set
                Me._tblDBIssuesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblEventsTableAdapter() As tblEventsTableAdapter
            Get
                Return Me._tblEventsTableAdapter
            End Get
            Set
                Me._tblEventsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblFrogMonitorsTableAdapter() As tblFrogMonitorsTableAdapter
            Get
                Return Me._tblFrogMonitorsTableAdapter
            End Get
            Set
                Me._tblFrogMonitorsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblInvertebratesTableAdapter() As tblInvertebratesTableAdapter
            Get
                Return Me._tblInvertebratesTableAdapter
            End Get
            Set
                Me._tblInvertebratesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblInvertebrateSamplesTableAdapter() As tblInvertebrateSamplesTableAdapter
            Get
                Return Me._tblInvertebrateSamplesTableAdapter
            End Get
            Set
                Me._tblInvertebrateSamplesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblLoonsTableAdapter() As tblLoonsTableAdapter
            Get
                Return Me._tblLoonsTableAdapter
            End Get
            Set
                Me._tblLoonsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblMonumentsTableAdapter() As tblMonumentsTableAdapter
            Get
                Return Me._tblMonumentsTableAdapter
            End Get
            Set
                Me._tblMonumentsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblPhotosTableAdapter() As tblPhotosTableAdapter
            Get
                Return Me._tblPhotosTableAdapter
            End Get
            Set
                Me._tblPhotosTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblPondDepthsTableAdapter() As tblPondDepthsTableAdapter
            Get
                Return Me._tblPondDepthsTableAdapter
            End Get
            Set
                Me._tblPondDepthsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblPondsTableAdapter() As tblPondsTableAdapter
            Get
                Return Me._tblPondsTableAdapter
            End Get
            Set
                Me._tblPondsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblTransQuadratsTableAdapter() As tblTransQuadratsTableAdapter
            Get
                Return Me._tblTransQuadratsTableAdapter
            End Get
            Set
                Me._tblTransQuadratsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblTransSpeciesPointInterceptsTableAdapter() As tblTransSpeciesPointInterceptsTableAdapter
            Get
                Return Me._tblTransSpeciesPointInterceptsTableAdapter
            End Get
            Set
                Me._tblTransSpeciesPointInterceptsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblUSGSLabDataTableAdapter() As tblUSGSLabDataTableAdapter
            Get
                Return Me._tblUSGSLabDataTableAdapter
            End Get
            Set
                Me._tblUSGSLabDataTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblVegProfilesTableAdapter() As tblVegProfilesTableAdapter
            Get
                Return Me._tblVegProfilesTableAdapter
            End Get
            Set
                Me._tblVegProfilesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblVegTransectsTableAdapter() As tblVegTransectsTableAdapter
            Get
                Return Me._tblVegTransectsTableAdapter
            End Get
            Set
                Me._tblVegTransectsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblWaterChemistryTableAdapter() As tblWaterChemistryTableAdapter
            Get
                Return Me._tblWaterChemistryTableAdapter
            End Get
            Set
                Me._tblWaterChemistryTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblWaterProfilesTableAdapter() As tblWaterProfilesTableAdapter
            Get
                Return Me._tblWaterProfilesTableAdapter
            End Get
            Set
                Me._tblWaterProfilesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblWaterSamplesTableAdapter() As tblWaterSamplesTableAdapter
            Get
                Return Me._tblWaterSamplesTableAdapter
            End Get
            Set
                Me._tblWaterSamplesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._tbl_ContinuousTLLTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tbl_ContinuousTLLTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tbl_ContinuousTLLTableAdapter.Connection
                End If
                If ((Not (Me._tbl_ContinuousWLTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tbl_ContinuousWLTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tbl_ContinuousWLTableAdapter.Connection
                End If
                If ((Not (Me._tbl_ContinuousYSITableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tbl_ContinuousYSITableAdapter.Connection) Is Nothing)) Then
                    Return Me._tbl_ContinuousYSITableAdapter.Connection
                End If
                If ((Not (Me._tblChlorophyllTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblChlorophyllTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblChlorophyllTableAdapter.Connection
                End If
                If ((Not (Me._tblContinuousDataDeploymentsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblContinuousDataDeploymentsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblContinuousDataDeploymentsTableAdapter.Connection
                End If
                If ((Not (Me._tblContinuousDataLoggersTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblContinuousDataLoggersTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblContinuousDataLoggersTableAdapter.Connection
                End If
                If ((Not (Me._tblContinuousDataSitesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblContinuousDataSitesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblContinuousDataSitesTableAdapter.Connection
                End If
                If ((Not (Me._tblDBEditsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblDBEditsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblDBEditsTableAdapter.Connection
                End If
                If ((Not (Me._tblDBIssuesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblDBIssuesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblDBIssuesTableAdapter.Connection
                End If
                If ((Not (Me._tblEventsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblEventsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblEventsTableAdapter.Connection
                End If
                If ((Not (Me._tblFrogMonitorsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblFrogMonitorsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblFrogMonitorsTableAdapter.Connection
                End If
                If ((Not (Me._tblInvertebratesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblInvertebratesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblInvertebratesTableAdapter.Connection
                End If
                If ((Not (Me._tblInvertebrateSamplesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblInvertebrateSamplesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblInvertebrateSamplesTableAdapter.Connection
                End If
                If ((Not (Me._tblLoonsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblLoonsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblLoonsTableAdapter.Connection
                End If
                If ((Not (Me._tblMonumentsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblMonumentsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblMonumentsTableAdapter.Connection
                End If
                If ((Not (Me._tblPhotosTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblPhotosTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblPhotosTableAdapter.Connection
                End If
                If ((Not (Me._tblPondDepthsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblPondDepthsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblPondDepthsTableAdapter.Connection
                End If
                If ((Not (Me._tblPondsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblPondsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblPondsTableAdapter.Connection
                End If
                If ((Not (Me._tblTransQuadratsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblTransQuadratsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblTransQuadratsTableAdapter.Connection
                End If
                If ((Not (Me._tblTransSpeciesPointInterceptsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblTransSpeciesPointInterceptsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblTransSpeciesPointInterceptsTableAdapter.Connection
                End If
                If ((Not (Me._tblUSGSLabDataTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblUSGSLabDataTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblUSGSLabDataTableAdapter.Connection
                End If
                If ((Not (Me._tblVegProfilesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblVegProfilesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblVegProfilesTableAdapter.Connection
                End If
                If ((Not (Me._tblVegTransectsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblVegTransectsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblVegTransectsTableAdapter.Connection
                End If
                If ((Not (Me._tblWaterChemistryTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblWaterChemistryTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblWaterChemistryTableAdapter.Connection
                End If
                If ((Not (Me._tblWaterProfilesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblWaterProfilesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblWaterProfilesTableAdapter.Connection
                End If
                If ((Not (Me._tblWaterSamplesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblWaterSamplesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblWaterSamplesTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._tbl_ContinuousTLLTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tbl_ContinuousWLTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tbl_ContinuousYSITableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblChlorophyllTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblContinuousDataDeploymentsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblContinuousDataLoggersTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblContinuousDataSitesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblDBEditsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblDBIssuesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblEventsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblFrogMonitorsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblInvertebratesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblInvertebrateSamplesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblLoonsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblMonumentsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblPhotosTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblPondDepthsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblPondsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblTransQuadratsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblTransSpeciesPointInterceptsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblUSGSLabDataTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblVegProfilesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblVegTransectsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblWaterChemistryTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblWaterProfilesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblWaterSamplesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As AK_ShallowLakesDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tblPondsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblPonds.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblPondsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblEventsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblEvents.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblEventsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblContinuousDataDeploymentsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblContinuousDataDeployments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblContinuousDataDeploymentsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblInvertebrateSamplesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblInvertebrateSamples.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblInvertebrateSamplesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblContinuousDataLoggersTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblContinuousDataLoggers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblContinuousDataLoggersTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblWaterSamplesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblWaterSamples.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblWaterSamplesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblContinuousDataSitesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblContinuousDataSites.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblContinuousDataSitesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblWaterChemistryTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblWaterChemistry.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblWaterChemistryTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblVegTransectsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblVegTransects.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblVegTransectsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblVegProfilesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblVegProfiles.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblVegProfilesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblUSGSLabDataTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblUSGSLabData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblUSGSLabDataTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblTransSpeciesPointInterceptsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblTransSpeciesPointIntercepts.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblTransSpeciesPointInterceptsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblTransQuadratsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblTransQuadrats.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblTransQuadratsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tbl_ContinuousWLTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tbl_ContinuousWL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tbl_ContinuousWLTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblPondDepthsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblPondDepths.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblPondDepthsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblPhotosTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblPhotos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblPhotosTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblMonumentsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblMonuments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblMonumentsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblLoonsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblLoons.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblLoonsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblWaterProfilesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblWaterProfiles.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblWaterProfilesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblInvertebratesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblInvertebrates.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblInvertebratesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblFrogMonitorsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblFrogMonitors.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblFrogMonitorsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tbl_ContinuousYSITableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tbl_ContinuousYSI.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tbl_ContinuousYSITableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblDBIssuesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblDBIssues.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblDBIssuesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblDBEditsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblDBEdits.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblDBEditsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblChlorophyllTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblChlorophyll.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblChlorophyllTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tbl_ContinuousTLLTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tbl_ContinuousTLL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tbl_ContinuousTLLTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As AK_ShallowLakesDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tblPondsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblPonds.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblPondsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblEventsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblEvents.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblEventsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblContinuousDataDeploymentsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblContinuousDataDeployments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblContinuousDataDeploymentsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblInvertebrateSamplesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblInvertebrateSamples.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblInvertebrateSamplesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblContinuousDataLoggersTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblContinuousDataLoggers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblContinuousDataLoggersTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblWaterSamplesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblWaterSamples.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblWaterSamplesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblContinuousDataSitesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblContinuousDataSites.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblContinuousDataSitesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblWaterChemistryTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblWaterChemistry.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblWaterChemistryTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblVegTransectsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblVegTransects.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblVegTransectsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblVegProfilesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblVegProfiles.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblVegProfilesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblUSGSLabDataTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblUSGSLabData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblUSGSLabDataTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblTransSpeciesPointInterceptsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblTransSpeciesPointIntercepts.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblTransSpeciesPointInterceptsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblTransQuadratsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblTransQuadrats.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblTransQuadratsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tbl_ContinuousWLTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tbl_ContinuousWL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tbl_ContinuousWLTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblPondDepthsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblPondDepths.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblPondDepthsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblPhotosTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblPhotos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblPhotosTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblMonumentsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblMonuments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblMonumentsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblLoonsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblLoons.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblLoonsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblWaterProfilesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblWaterProfiles.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblWaterProfilesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblInvertebratesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblInvertebrates.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblInvertebratesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblFrogMonitorsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblFrogMonitors.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblFrogMonitorsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tbl_ContinuousYSITableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tbl_ContinuousYSI.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tbl_ContinuousYSITableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblDBIssuesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblDBIssues.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblDBIssuesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblDBEditsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblDBEdits.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblDBEditsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblChlorophyllTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblChlorophyll.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblChlorophyllTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tbl_ContinuousTLLTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tbl_ContinuousTLL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tbl_ContinuousTLLTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As AK_ShallowLakesDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tbl_ContinuousTLLTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tbl_ContinuousTLL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tbl_ContinuousTLLTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblChlorophyllTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblChlorophyll.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblChlorophyllTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblDBEditsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblDBEdits.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblDBEditsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblDBIssuesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblDBIssues.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblDBIssuesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tbl_ContinuousYSITableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tbl_ContinuousYSI.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tbl_ContinuousYSITableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblFrogMonitorsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblFrogMonitors.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblFrogMonitorsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblInvertebratesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblInvertebrates.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblInvertebratesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblWaterProfilesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblWaterProfiles.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblWaterProfilesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblLoonsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblLoons.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblLoonsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblMonumentsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblMonuments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblMonumentsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblPhotosTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblPhotos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblPhotosTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblPondDepthsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblPondDepths.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblPondDepthsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tbl_ContinuousWLTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tbl_ContinuousWL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tbl_ContinuousWLTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblTransQuadratsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblTransQuadrats.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblTransQuadratsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblTransSpeciesPointInterceptsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblTransSpeciesPointIntercepts.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblTransSpeciesPointInterceptsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblUSGSLabDataTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblUSGSLabData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblUSGSLabDataTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblVegProfilesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblVegProfiles.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblVegProfilesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblVegTransectsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblVegTransects.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblVegTransectsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblWaterChemistryTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblWaterChemistry.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblWaterChemistryTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblContinuousDataSitesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblContinuousDataSites.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblContinuousDataSitesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblWaterSamplesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblWaterSamples.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblWaterSamplesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblContinuousDataLoggersTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblContinuousDataLoggers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblContinuousDataLoggersTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblInvertebrateSamplesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblInvertebrateSamples.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblInvertebrateSamplesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblContinuousDataDeploymentsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblContinuousDataDeployments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblContinuousDataDeploymentsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblEventsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblEvents.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblEventsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblPondsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblPonds.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblPondsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As AK_ShallowLakesDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._tbl_ContinuousTLLTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tbl_ContinuousTLLTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tbl_ContinuousWLTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tbl_ContinuousWLTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tbl_ContinuousYSITableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tbl_ContinuousYSITableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblChlorophyllTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblChlorophyllTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblContinuousDataDeploymentsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblContinuousDataDeploymentsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblContinuousDataLoggersTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblContinuousDataLoggersTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblContinuousDataSitesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblContinuousDataSitesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblDBEditsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblDBEditsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblDBIssuesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblDBIssuesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblEventsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblEventsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblFrogMonitorsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblFrogMonitorsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblInvertebratesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblInvertebratesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblInvertebrateSamplesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblInvertebrateSamplesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblLoonsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblLoonsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblMonumentsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblMonumentsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblPhotosTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblPhotosTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblPondDepthsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblPondDepthsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblPondsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblPondsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblTransQuadratsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblTransQuadratsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblTransSpeciesPointInterceptsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblTransSpeciesPointInterceptsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblUSGSLabDataTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblUSGSLabDataTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblVegProfilesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblVegProfilesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblVegTransectsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblVegTransectsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblWaterChemistryTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblWaterChemistryTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblWaterProfilesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblWaterProfilesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblWaterSamplesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblWaterSamplesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._tbl_ContinuousTLLTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tbl_ContinuousTLLTableAdapter, Me._tbl_ContinuousTLLTableAdapter.Connection)
                    Me._tbl_ContinuousTLLTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tbl_ContinuousTLLTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tbl_ContinuousTLLTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tbl_ContinuousTLLTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tbl_ContinuousTLLTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tbl_ContinuousWLTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tbl_ContinuousWLTableAdapter, Me._tbl_ContinuousWLTableAdapter.Connection)
                    Me._tbl_ContinuousWLTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tbl_ContinuousWLTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tbl_ContinuousWLTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tbl_ContinuousWLTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tbl_ContinuousWLTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tbl_ContinuousYSITableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tbl_ContinuousYSITableAdapter, Me._tbl_ContinuousYSITableAdapter.Connection)
                    Me._tbl_ContinuousYSITableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tbl_ContinuousYSITableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tbl_ContinuousYSITableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tbl_ContinuousYSITableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tbl_ContinuousYSITableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblChlorophyllTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblChlorophyllTableAdapter, Me._tblChlorophyllTableAdapter.Connection)
                    Me._tblChlorophyllTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblChlorophyllTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblChlorophyllTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblChlorophyllTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblChlorophyllTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblContinuousDataDeploymentsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblContinuousDataDeploymentsTableAdapter, Me._tblContinuousDataDeploymentsTableAdapter.Connection)
                    Me._tblContinuousDataDeploymentsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblContinuousDataDeploymentsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblContinuousDataDeploymentsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblContinuousDataDeploymentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblContinuousDataDeploymentsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblContinuousDataLoggersTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblContinuousDataLoggersTableAdapter, Me._tblContinuousDataLoggersTableAdapter.Connection)
                    Me._tblContinuousDataLoggersTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblContinuousDataLoggersTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblContinuousDataLoggersTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblContinuousDataLoggersTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblContinuousDataLoggersTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblContinuousDataSitesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblContinuousDataSitesTableAdapter, Me._tblContinuousDataSitesTableAdapter.Connection)
                    Me._tblContinuousDataSitesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblContinuousDataSitesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblContinuousDataSitesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblContinuousDataSitesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblContinuousDataSitesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblDBEditsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblDBEditsTableAdapter, Me._tblDBEditsTableAdapter.Connection)
                    Me._tblDBEditsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblDBEditsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblDBEditsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblDBEditsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblDBEditsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblDBIssuesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblDBIssuesTableAdapter, Me._tblDBIssuesTableAdapter.Connection)
                    Me._tblDBIssuesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblDBIssuesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblDBIssuesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblDBIssuesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblDBIssuesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblEventsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblEventsTableAdapter, Me._tblEventsTableAdapter.Connection)
                    Me._tblEventsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblEventsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblEventsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblEventsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblEventsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblFrogMonitorsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblFrogMonitorsTableAdapter, Me._tblFrogMonitorsTableAdapter.Connection)
                    Me._tblFrogMonitorsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblFrogMonitorsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblFrogMonitorsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblFrogMonitorsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblFrogMonitorsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblInvertebratesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblInvertebratesTableAdapter, Me._tblInvertebratesTableAdapter.Connection)
                    Me._tblInvertebratesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblInvertebratesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblInvertebratesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblInvertebratesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblInvertebratesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblInvertebrateSamplesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblInvertebrateSamplesTableAdapter, Me._tblInvertebrateSamplesTableAdapter.Connection)
                    Me._tblInvertebrateSamplesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblInvertebrateSamplesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblInvertebrateSamplesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblInvertebrateSamplesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblInvertebrateSamplesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblLoonsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblLoonsTableAdapter, Me._tblLoonsTableAdapter.Connection)
                    Me._tblLoonsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblLoonsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblLoonsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblLoonsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblLoonsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblMonumentsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblMonumentsTableAdapter, Me._tblMonumentsTableAdapter.Connection)
                    Me._tblMonumentsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblMonumentsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblMonumentsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblMonumentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblMonumentsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblPhotosTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblPhotosTableAdapter, Me._tblPhotosTableAdapter.Connection)
                    Me._tblPhotosTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblPhotosTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblPhotosTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblPhotosTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblPhotosTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblPondDepthsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblPondDepthsTableAdapter, Me._tblPondDepthsTableAdapter.Connection)
                    Me._tblPondDepthsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblPondDepthsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblPondDepthsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblPondDepthsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblPondDepthsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblPondsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblPondsTableAdapter, Me._tblPondsTableAdapter.Connection)
                    Me._tblPondsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblPondsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblPondsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblPondsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblPondsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblTransQuadratsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblTransQuadratsTableAdapter, Me._tblTransQuadratsTableAdapter.Connection)
                    Me._tblTransQuadratsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblTransQuadratsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblTransQuadratsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblTransQuadratsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblTransQuadratsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblTransSpeciesPointInterceptsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblTransSpeciesPointInterceptsTableAdapter, Me._tblTransSpeciesPointInterceptsTableAdapter.Connection)
                    Me._tblTransSpeciesPointInterceptsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblTransSpeciesPointInterceptsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblTransSpeciesPointInterceptsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblTransSpeciesPointInterceptsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblTransSpeciesPointInterceptsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblUSGSLabDataTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblUSGSLabDataTableAdapter, Me._tblUSGSLabDataTableAdapter.Connection)
                    Me._tblUSGSLabDataTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblUSGSLabDataTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblUSGSLabDataTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblUSGSLabDataTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblUSGSLabDataTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblVegProfilesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblVegProfilesTableAdapter, Me._tblVegProfilesTableAdapter.Connection)
                    Me._tblVegProfilesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblVegProfilesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblVegProfilesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblVegProfilesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblVegProfilesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblVegTransectsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblVegTransectsTableAdapter, Me._tblVegTransectsTableAdapter.Connection)
                    Me._tblVegTransectsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblVegTransectsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblVegTransectsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblVegTransectsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblVegTransectsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblWaterChemistryTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblWaterChemistryTableAdapter, Me._tblWaterChemistryTableAdapter.Connection)
                    Me._tblWaterChemistryTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblWaterChemistryTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblWaterChemistryTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblWaterChemistryTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblWaterChemistryTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblWaterProfilesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblWaterProfilesTableAdapter, Me._tblWaterProfilesTableAdapter.Connection)
                    Me._tblWaterProfilesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblWaterProfilesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblWaterProfilesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblWaterProfilesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblWaterProfilesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblWaterSamplesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblWaterSamplesTableAdapter, Me._tblWaterSamplesTableAdapter.Connection)
                    Me._tblWaterSamplesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblWaterSamplesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblWaterSamplesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblWaterSamplesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblWaterSamplesTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._tbl_ContinuousTLLTableAdapter) Is Nothing) Then
                    Me._tbl_ContinuousTLLTableAdapter.Connection = CType(revertConnections(Me._tbl_ContinuousTLLTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tbl_ContinuousTLLTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tbl_ContinuousWLTableAdapter) Is Nothing) Then
                    Me._tbl_ContinuousWLTableAdapter.Connection = CType(revertConnections(Me._tbl_ContinuousWLTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tbl_ContinuousWLTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tbl_ContinuousYSITableAdapter) Is Nothing) Then
                    Me._tbl_ContinuousYSITableAdapter.Connection = CType(revertConnections(Me._tbl_ContinuousYSITableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tbl_ContinuousYSITableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblChlorophyllTableAdapter) Is Nothing) Then
                    Me._tblChlorophyllTableAdapter.Connection = CType(revertConnections(Me._tblChlorophyllTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblChlorophyllTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblContinuousDataDeploymentsTableAdapter) Is Nothing) Then
                    Me._tblContinuousDataDeploymentsTableAdapter.Connection = CType(revertConnections(Me._tblContinuousDataDeploymentsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblContinuousDataDeploymentsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblContinuousDataLoggersTableAdapter) Is Nothing) Then
                    Me._tblContinuousDataLoggersTableAdapter.Connection = CType(revertConnections(Me._tblContinuousDataLoggersTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblContinuousDataLoggersTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblContinuousDataSitesTableAdapter) Is Nothing) Then
                    Me._tblContinuousDataSitesTableAdapter.Connection = CType(revertConnections(Me._tblContinuousDataSitesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblContinuousDataSitesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblDBEditsTableAdapter) Is Nothing) Then
                    Me._tblDBEditsTableAdapter.Connection = CType(revertConnections(Me._tblDBEditsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblDBEditsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblDBIssuesTableAdapter) Is Nothing) Then
                    Me._tblDBIssuesTableAdapter.Connection = CType(revertConnections(Me._tblDBIssuesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblDBIssuesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblEventsTableAdapter) Is Nothing) Then
                    Me._tblEventsTableAdapter.Connection = CType(revertConnections(Me._tblEventsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblEventsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblFrogMonitorsTableAdapter) Is Nothing) Then
                    Me._tblFrogMonitorsTableAdapter.Connection = CType(revertConnections(Me._tblFrogMonitorsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblFrogMonitorsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblInvertebratesTableAdapter) Is Nothing) Then
                    Me._tblInvertebratesTableAdapter.Connection = CType(revertConnections(Me._tblInvertebratesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblInvertebratesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblInvertebrateSamplesTableAdapter) Is Nothing) Then
                    Me._tblInvertebrateSamplesTableAdapter.Connection = CType(revertConnections(Me._tblInvertebrateSamplesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblInvertebrateSamplesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblLoonsTableAdapter) Is Nothing) Then
                    Me._tblLoonsTableAdapter.Connection = CType(revertConnections(Me._tblLoonsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblLoonsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblMonumentsTableAdapter) Is Nothing) Then
                    Me._tblMonumentsTableAdapter.Connection = CType(revertConnections(Me._tblMonumentsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblMonumentsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblPhotosTableAdapter) Is Nothing) Then
                    Me._tblPhotosTableAdapter.Connection = CType(revertConnections(Me._tblPhotosTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblPhotosTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblPondDepthsTableAdapter) Is Nothing) Then
                    Me._tblPondDepthsTableAdapter.Connection = CType(revertConnections(Me._tblPondDepthsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblPondDepthsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblPondsTableAdapter) Is Nothing) Then
                    Me._tblPondsTableAdapter.Connection = CType(revertConnections(Me._tblPondsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblPondsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblTransQuadratsTableAdapter) Is Nothing) Then
                    Me._tblTransQuadratsTableAdapter.Connection = CType(revertConnections(Me._tblTransQuadratsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblTransQuadratsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblTransSpeciesPointInterceptsTableAdapter) Is Nothing) Then
                    Me._tblTransSpeciesPointInterceptsTableAdapter.Connection = CType(revertConnections(Me._tblTransSpeciesPointInterceptsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblTransSpeciesPointInterceptsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblUSGSLabDataTableAdapter) Is Nothing) Then
                    Me._tblUSGSLabDataTableAdapter.Connection = CType(revertConnections(Me._tblUSGSLabDataTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblUSGSLabDataTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblVegProfilesTableAdapter) Is Nothing) Then
                    Me._tblVegProfilesTableAdapter.Connection = CType(revertConnections(Me._tblVegProfilesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblVegProfilesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblVegTransectsTableAdapter) Is Nothing) Then
                    Me._tblVegTransectsTableAdapter.Connection = CType(revertConnections(Me._tblVegTransectsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblVegTransectsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblWaterChemistryTableAdapter) Is Nothing) Then
                    Me._tblWaterChemistryTableAdapter.Connection = CType(revertConnections(Me._tblWaterChemistryTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblWaterChemistryTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblWaterProfilesTableAdapter) Is Nothing) Then
                    Me._tblWaterProfilesTableAdapter.Connection = CType(revertConnections(Me._tblWaterProfilesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblWaterProfilesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblWaterSamplesTableAdapter) Is Nothing) Then
                    Me._tblWaterSamplesTableAdapter.Connection = CType(revertConnections(Me._tblWaterSamplesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblWaterSamplesTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
